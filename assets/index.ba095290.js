import{r as n,g as e,G as t,a as o}from"./vendor.ae94e3c9.js";!function(n=".",e="__import__"){try{self[e]=new Function("u","return import(u)")}catch(t){const o=new URL(n,location),a=n=>{URL.revokeObjectURL(n.src),n.remove()};self[e]=n=>new Promise(((t,i)=>{const r=new URL(n,o);if(self[e].moduleMap[r])return t(self[e].moduleMap[r]);const c=new Blob([`import * as m from '${r}';`,`${e}.moduleMap['${r}']=m;`],{type:"text/javascript"}),s=Object.assign(document.createElement("script"),{type:"module",src:URL.createObjectURL(c),onerror(){i(new Error(`Failed to import: ${n}`)),a(s)},onload(){t(self[e].moduleMap[r]),a(s)}});document.head.appendChild(s)})),self[e].moduleMap={}}}("assets/");var a=new class{constructor(){this.message="dat.gui",this.detail=125}};window.vScale=1,window.gen=!1,window.vol=[],window.vout=[],window.voutT=[];const i=n({extensions:["webgl_draw_buffers","oes_texture_float","oes_texture_float_linear"]});new e.GPU;(new t).add(a,"detail",10,1080,5).onFinishChange((function(n){window.resizeG(n)}));const r=0,c=0;var s=261.625565;window.mul=1;var l=1;function d(n){return s*a.detail/n}window.count=0,window.fastMode=!1,window.simF=d;var v=0,u=0,f=(new Date).getTime();(new Date).getTime();var p=function(n,e){this.isReady=!1,this.frequency=1,this.amplitude=0,this.waveOffset=0,this.context=n,window._processor=this.processor=this.context.createScriptProcessor(1024,1,1),this.processor.onaudioprocess=function(e){for(var t=e.inputBuffer.getChannelData(0),o=[],a=0;a<t.length;a++)o[a]=t[Math.floor(a)%t.length];var i=window.vol.concat(o);i.length;var r=Math.max(0,i.length-16384);i=i.slice(r,Math.min(r+16384,i.length)),window.vol=i,u+=r/n.sampleRate||0,this.isReady&&(window.vScale=1)}.bind(this),this.source=e,this.source.connect(this.processor).connect(this.context.destination),this.isReady=!0};o({audio:!0},(function(n,e){window.vol=[0];for(var t=0;t<1024;t++)window.vol.push(0);if(n)return;const o=new AudioContext;var m=o.createMediaStreamSource(e);new p(o,m),console.log(m),l=s*a.detail/o.sampleRate;const w=i.texture({wrapS:"clamp",wrapT:"clamp",mag:"linear",min:"linear"}),x=function(n){let e=[h(n),h(n)];return{read:()=>e[0].buf,write:()=>e[1].buf,swap(){e.reverse()},resize(n,t){e.forEach((e=>{e.tex.resize(n,t),e.buf.resize(n,t)}))}}}("linear");function h(n){let e=i.texture({type:"float",width:a.detail,height:a.detail,mag:n,min:n});return{tex:e,buf:i.framebuffer({color:e,depthStencil:!1})}}window.fboA=x;const g=i({frag:"\n precision mediump float;\n uniform sampler2D texture;\n uniform vec2 mouse;\n uniform vec2 res;\n uniform float t;\n uniform float vol;\n varying vec2 uv;\n uniform float mp;\n \n void main () {\n   vec2 uvc=(uv-vec2(0.5,0.5))*2.0;\n   if(max(abs(uvc.x),abs(uvc.y))>1.0){\n     gl_FragColor = vec4(vec3(0.0),1.0);\n       \n     return;\n   }\n   float fadeIn=20.0;\n   float easeIn=1.0;\n   if(t<fadeIn){\n     easeIn=t/fadeIn;\n   }\n     float mpt=mp;///2.0;\n     \n     vec2 cVa=texture2D(texture,uv).xy;\n     //vec2 cVa0=texture2D(texture,uv).xy;\n     float sX=cVa.x+0.0;\n     float gn=texture2D(texture,uv).z;\n     cVa.y=cVa.y*2.0-1.0;\n     //cVa0.y=cVa0.y*2.0-1.0;\n     \n     float q=0.0;\n     float qC=0.0;\n    \n       float s=1.0;\n       if(mpt>1.0){\n         s=mpt+0.0;\n         mpt=1.0;\n       }\n       float c=1.0/(s);\n     vec2 up=uv+vec2(0.0,-1.0)/res.xy*s;\n     vec2 left=uv+vec2(-1.0,0.0)/res.xy*s;\n     vec2 right=uv+vec2(1.0,0.0)/res.xy*s;\n     vec2 down=uv+vec2(0.0,1.0)/res.xy*s;\n     \n     vec2 uVa=texture2D(texture,up).xy;\n     uVa.y=uVa.y*2.0-1.0;\n     vec2 lVa=texture2D(texture,left).xy;\n     lVa.y=lVa.y*2.0-1.0;\n     vec2 rVa=texture2D(texture,right).xy;\n     rVa.y=rVa.y*2.0-1.0;\n     vec2 dVa=texture2D(texture,down).xy;\n     dVa.y=dVa.y*2.0-1.0;\n     float oS=0.0;\n     q+=(dVa.x+dVa.y*oS-cVa.y*oS)*c;\n     q+=(uVa.x+uVa.y*oS-cVa.y*oS)*c;\n     q+=(lVa.x+lVa.y*oS-cVa.y*oS)*c;\n     q+=(rVa.x+rVa.y*oS-cVa.y*oS)*c;\n     qC+=c*4.0;\n     float pos=cVa.x-0.5;\n     \n     float accel=(q/qC-cVa.x)*mpt;\n     float vel=(cVa.y+0.0);//+accel/2.0;\n     cVa.y+=accel;\n     \n     \n     \n     float gnt=0.0;\n    \n     if(t<fadeIn){\n         \n         cVa=(vec2(0.5,0.0)*(1.0-easeIn)+cVa*(easeIn));\n         pos=0.0*(1.0-easeIn)+pos*(easeIn);\n         //gn=0.0;\n     }\n     gnt=gn;//1.0;//abs(abs(rVa.x-0.5)+abs(lVa.x-0.5)+abs(uVa.x-0.5)+abs(dVa.x-0.5)-abs((rVa.x-0.5)+(lVa.x-0.5)+(uVa.x-0.5)+(dVa.x-0.5))*2.0)+abs(cVa.x-0.5);\n     float apRat=pow(abs(-accel/mpt/mpt/pos),0.5);\n     gnt=pow(pow(pos,2.0)+pow(vel/mpt/mpt,2.0)/abs(-accel/mpt/mpt/pos),0.5);\n    float H=gnt;\n     \n     //cVa.y=(vec2(0.5,0.0)*0.001+cVa*0.999).y;\n     float j=1.0-length((((uv-vec2(0.5))*res.xy)))*1.3;//pow(2.0,-pow(length(abs(uv-vec2(0.5))*res.xy)/10.0,2.0));\n     cVa.x+=cVa.y*mpt;\n     \n     if( j>0.0 ){\n    j=1.0;\n     float dp=vol/2.0+0.5;\n    \n       cVa=(cVa*(1.0-j)+vec2(dp,0.0)*j);//cos(t*0.1*2.0*atan(0.0,-1.0))/4.0+0.5;\n        }\n     \n   \n    \n    \n         gnt=H;\n         if(abs(gnt)<=1.0){//} && abs(pos)>gnt/2.0){//&& dot(pos,vel)>=0.0 && dot(vel+accel,vel)<=0.0 ){//} && abs(vel+pos-accel/2.0)>=abs(pos))){\n     \n       float le=max(gn/1000.0,0.00001);//max(min((1.0-pow(0.5,1.0*apRat/100.0)),0.01),0.00001);//min(abs(vel*2.0+pos-0.5)/abs(pos-0.5)*0.001+0.00001,1.0);\n       gnt=gnt;\n       //gn=gnt*le+gn*(1.0-le);//+min(max(gnt-gn,-le),le);\n       gn=gn+min(max(gnt-gn,-le),le);\n     }\n     \n   \n    \n     \n     if(true||mod(float(t),1024.0*128.0)<1.0||abs(vel)>=abs(pos+abs(vel)*sign(pos))){\n      \n       float d=0.001;//abs(pos+abs(vel)*s\n     cVa=(vec2(0.5,0.0)*d+cVa*(1.0-d));\n \n     }\n    \n     vec2 outp=vec2(cVa.x,cVa.y*0.5+0.5);\n \n     gn=max(min(1.0,gn),0.0);\n     outp.x=max(min(1.0,outp.x),0.0);\n     outp.y=max(min(1.0,outp.y),0.0);\n     gl_FragColor = vec4(vec3(outp,gn),1.0);\n }",vert:"\n \n   precision mediump float;\n   attribute vec2 position;\n   varying vec2 uv;\n   void main () {\n     uv = position/2.0+vec2(0.5,0.5);\n     gl_Position = vec4(position, 0, 1);\n   }\n   ",attributes:{position:[-1,-1,3,-1,-1,3]},framebuffer:()=>x.write(),uniforms:{texture:()=>x.read(),mouse:({pixelRatio:n,viewportHeight:e,viewportWidth:t})=>[r*n,e-c*n],res:({viewportHeight:n,viewportWidth:e})=>[a.detail,a.detail],t:({tick:n})=>n,vol:()=>{return n=(v-u)*o.sampleRate,e=n%1,1*((window.vol[Math.floor(n)%window.vol.length]||0)*(1-e)+(window.vol[Math.floor(n+1)%window.vol.length]||0)*e);var n,e},mp:()=>l},blend:{enable:!1,func:{srcRGB:"src color",srcAlpha:1,dstRGB:"src color",dstAlpha:1},equation:{rgb:"add",alpha:"add"},color:[0,0,0,0]},count:3}),y=i({frag:'\n     precision mediump float;\n     uniform sampler2D texture;\n     uniform sampler2D p;\n     uniform sampler2D textureB;\n     uniform sampler2D textureC;\n     uniform vec2 mouse;\n     uniform vec2 res;\n     uniform vec2 resp;\n     uniform float t;\n     varying vec2 uv;\n     // IQ\'s simplex noise:\n \n // The MIT License\n // Copyright Â© 2013 Inigo Quilez\n // Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n \n vec2 hash( vec2 p ) // replace this by something better\n {\n   p = vec2( dot(p,vec2(127.1,311.7)),\n         dot(p,vec2(269.5,183.3)) );\n \n   return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n }\n \n float noise( in vec2 p )\n {\n     const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n     const float K2 = 0.211324865; // (3-sqrt(3))/6;\n \n   vec2 i = floor( p + (p.x+p.y)*K1 );\n   \n     vec2 a = p - i + (i.x+i.y)*K2;\n     vec2 o = step(a.yx,a.xy);    \n     vec2 b = a - o + K2;\n   vec2 c = a - 1.0 + 2.0*K2;\n \n     vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n \n   vec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n \n     return dot( n, vec3(70.0) );\n   \n }\n \n \n // GGX from Noby\'s Goo shader https://www.shadertoy.com/view/lllBDM\n \n // MIT License: https://opensource.org/licenses/MIT\n float G1V(float dnv, float k){\n     return 1.0/(dnv*(1.0-k)+k);\n }\n \n float ggx(vec3 n, vec3 v, vec3 l, float rough, float f0){\n     float alpha = rough*rough;\n     vec3 h = normalize(v+l);\n     float dnl = clamp(dot(n,l), 0.0, 1.0);\n     float dnv = clamp(dot(n,v), 0.0, 1.0);\n     float dnh = clamp(dot(n,h), 0.0, 1.0);\n     float dlh = clamp(dot(l,h), 0.0, 1.0);\n     float f, d, vis;\n     float asqr = alpha*alpha;\n     const float pi = 3.14159;\n     float den = dnh*dnh*(asqr-1.0)+1.0;\n     d = asqr/(pi * den * den);\n     dlh = pow(1.0-dlh, 5.0);\n     f = f0 + (1.0-f0)*dlh;\n     float k = alpha/1.0;\n     vis = G1V(dnl, k)*G1V(dnv, k);\n     float spec = dnl * d * f * vis;\n     return spec;\n }\n     #define BUMP 10.0\n \n vec3 normz(vec3 x) {\n   return x == vec3(0) ? vec3(0) : normalize(x);\n }\n vec3 hsv2rgb(vec3 c)\n         {\n             vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n             vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n             return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n         }\n \n void main( ){\n   float time=t/1000.0;\n   vec2 rc=vec2(min(res.x,res.y));\n         vec2 uv2=(uv-vec2(0.5,0.5)-vec2(0.5,0.5)/res.xy*0.0)*res.xy/rc.xy+vec2(0.5,0.5);\n         vec2 uvc=(uv2-vec2(0.5,0.5))*2.0;\n         if(max(abs(uvc.x),abs(uvc.y))>1.0){\n           gl_FragColor = vec4(vec3(0.0),1.0);\n             \n           return;\n         }\n         float gn=texture2D(texture,uv2).x;\n      \n         //gl_FragColor = vec4(vec3( gn),1.0);\n      //return;\n     vec2 texel = 1. / vec2(128.0).xy;//resp.xy;\n \n     vec2 n  = vec2(0.0, texel.y);\n     vec2 e  = vec2(texel.x, 0.0);\n     vec2 s  = vec2(0.0, -texel.y);\n     vec2 w  = vec2(-texel.x, 0.0);\n     float hsc=-1.0/0.02;\n     float d   = (texture2D(texture, uv2).z-0.5)*hsc;\n     //#define SIMPLE\n     #ifdef SIMPLE\n     gl_FragColor = vec4(vec3(d),1.0);\n     #else\n     float d_n  = (texture2D(texture, fract(uv2+n)  ).z-0.5)*hsc;\n     float d_e  = (texture2D(texture, fract(uv2+e)  ).z-0.5)*hsc;\n     float d_s  = (texture2D(texture, fract(uv2+s)  ).z-0.5)*hsc;\n     float d_w  = (texture2D(texture, fract(uv2+w)  ).z-0.5)*hsc; \n     float d_ne = (texture2D(texture, fract(uv2+n+e)).z-0.5)*hsc;\n     float d_se = (texture2D(texture, fract(uv2+s+e)).z-0.5)*hsc;\n     float d_sw = (texture2D(texture, fract(uv2+s+w)).z-0.5)*hsc;\n     float d_nw = (texture2D(texture, fract(uv2+n+w)).z-0.5)*hsc; \n \n     float dxn[3];\n     float dyn[3];\n     float dcn[3];\n     \n     dcn[0] = 0.5;\n     dcn[1] = 1.0; \n     dcn[2] = 0.5;\n \n     dyn[0] = d_nw - d_sw;\n     dyn[1] = d_n  - d_s; \n     dyn[2] = d_ne - d_se;\n \n     dxn[0] = d_ne - d_nw; \n     dxn[1] = d_e  - d_w; \n     dxn[2] = d_se - d_sw; \n \n     // The section below is an antialiased version of \n     // Shane\'s Bumped Sinusoidal Warp shadertoy here:\n     // https://www.shadertoy.com/view/4l2XWK\n   #define SRC_DIST 8.0\n     vec3 sp = vec3(uv2-0.5, 0);\n     vec3 light = vec3(cos(time/2.0)*0.5, sin(time/2.0)*0.5, -SRC_DIST);\n     vec3 ld = light - sp;\n     float lDist = max(length(ld), 0.001);\n     ld /= lDist;\n     float aDist = max(distance(vec3(light.xy,0),sp) , 0.001);\n     float atten = min(0.07/(0.25 + aDist*0.5 + aDist*aDist*0.05), 1.);\n     vec3 rd = normalize(vec3(uv2 - 0.5, 1.));\n \n     float spec = 0.0;\n   float den = 0.0;\n     \n     // apply some antialiasing to the normals\n     vec3 avd = vec3(0);\n     for(int i = 0; i < 3; i++) {\n         for(int j = 0; j < 3; j++) {\n             vec2 dxy = vec2(dxn[i], dyn[j]);\n             float w = dcn[i] * dcn[j];\n             vec3 bn = reflect(normalize(vec3(BUMP*dxy, -1.0)), vec3(0,1,0));\n             avd += w * bn;\n             den += w;\n         }\n     }\n \n     avd /= den;\n     spec += ggx(avd, vec3(0,1,0), ld, 0.7, 0.3);\n     \n     // end bumpmapping section\n     \n     // cheap occlusion with mipmaps\n     float occ = 0.0;\n     for (float m = 1.0; m <= 10.0; m +=1.0) {\n         float dm = (texture2D(texture, uv2, m).z-0.5)*hsc;\n       occ += smoothstep(-8.0, 2.0, (d - dm))/(m*m);\n     }\n     vec2 dir=vec2(0.0,0.0);\n     dir+=(n)*d_n;\n     dir+=(e)*d_e;\n     dir+=(s)*d_s;\n     dir+=(w)*d_w;\n     \n     occ = pow(occ / 1.5, 2.0);\n     //float q=atan(dir.y,dir.x)/atan(1.0,0.0)/4.;\n     vec4 wow =   occ* vec4(0.05,0.05,0.05,0) + 2.5*vec4(0.9, 0.85, 0.8, 1)*spec;\n     wow.w=1.0;\n     gl_FragColor=wow;\n     #endif\n \n \n     }',vert:"\n     precision mediump float;\n     attribute vec2 position;\n     varying vec2 uv;\n     void main () {\n       uv = position/2.0+vec2(0.5,0.5);\n       gl_Position = vec4(position, 0, 1);\n     }",attributes:{position:[-1,-1,3,-1,-1,3]},uniforms:{texture:x.read(),p:w,mouse:({pixelRatio:n,viewportHeight:e,viewportWidth:t})=>[r*n,e-c*n],res:({viewportHeight:n,viewportWidth:e})=>[e,n],resp:({viewportHeight:n,viewportWidth:e})=>[a.detail,a.detail],t:({tick:n})=>n},count:3});window.resizeG=function(n,e){a.detail=n,x.resize(a.detail,a.detail)},window.lq=performance.now()+0,window.tdown=0,window.ggg=0,f=performance.now();var b=function(){requestAnimationFrame(b);for(var n=performance.now();f<n&&(f+=1e3/d(l),(v-u)*o.sampleRate<window.vol.length&&(g(),x.swap(),v+=1/d(l)),!(performance.now()-n>1e3/60)););};b();var V=0;i.frame((function(){y(),V++,window.qz=V}))}));
