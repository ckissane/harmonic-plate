// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"../node_modules/regl/dist/regl.js":[function(require,module,exports) {
var define;
var global = arguments[3];
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.createREGL = factory());
}(this, (function () { 'use strict';

var isTypedArray = function (x) {
  return (
    x instanceof Uint8Array ||
    x instanceof Uint16Array ||
    x instanceof Uint32Array ||
    x instanceof Int8Array ||
    x instanceof Int16Array ||
    x instanceof Int32Array ||
    x instanceof Float32Array ||
    x instanceof Float64Array ||
    x instanceof Uint8ClampedArray
  )
};

var extend = function (base, opts) {
  var keys = Object.keys(opts);
  for (var i = 0; i < keys.length; ++i) {
    base[keys[i]] = opts[keys[i]];
  }
  return base
};

// Error checking and parameter validation.
//
// Statements for the form `check.someProcedure(...)` get removed by
// a browserify transform for optimized/minified bundles.
//
/* globals atob */
var endl = '\n';

// only used for extracting shader names.  if atob not present, then errors
// will be slightly crappier
function decodeB64 (str) {
  if (typeof atob !== 'undefined') {
    return atob(str)
  }
  return 'base64:' + str
}

function raise (message) {
  var error = new Error('(regl) ' + message);
  console.error(error);
  throw error
}

function check (pred, message) {
  if (!pred) {
    raise(message);
  }
}

function encolon (message) {
  if (message) {
    return ': ' + message
  }
  return ''
}

function checkParameter (param, possibilities, message) {
  if (!(param in possibilities)) {
    raise('unknown parameter (' + param + ')' + encolon(message) +
          '. possible values: ' + Object.keys(possibilities).join());
  }
}

function checkIsTypedArray (data, message) {
  if (!isTypedArray(data)) {
    raise(
      'invalid parameter type' + encolon(message) +
      '. must be a typed array');
  }
}

function checkTypeOf (value, type, message) {
  if (typeof value !== type) {
    raise(
      'invalid parameter type' + encolon(message) +
      '. expected ' + type + ', got ' + (typeof value));
  }
}

function checkNonNegativeInt (value, message) {
  if (!((value >= 0) &&
        ((value | 0) === value))) {
    raise('invalid parameter type, (' + value + ')' + encolon(message) +
          '. must be a nonnegative integer');
  }
}

function checkOneOf (value, list, message) {
  if (list.indexOf(value) < 0) {
    raise('invalid value' + encolon(message) + '. must be one of: ' + list);
  }
}

var constructorKeys = [
  'gl',
  'canvas',
  'container',
  'attributes',
  'pixelRatio',
  'extensions',
  'optionalExtensions',
  'profile',
  'onDone'
];

function checkConstructor (obj) {
  Object.keys(obj).forEach(function (key) {
    if (constructorKeys.indexOf(key) < 0) {
      raise('invalid regl constructor argument "' + key + '". must be one of ' + constructorKeys);
    }
  });
}

function leftPad (str, n) {
  str = str + '';
  while (str.length < n) {
    str = ' ' + str;
  }
  return str
}

function ShaderFile () {
  this.name = 'unknown';
  this.lines = [];
  this.index = {};
  this.hasErrors = false;
}

function ShaderLine (number, line) {
  this.number = number;
  this.line = line;
  this.errors = [];
}

function ShaderError (fileNumber, lineNumber, message) {
  this.file = fileNumber;
  this.line = lineNumber;
  this.message = message;
}

function guessCommand () {
  var error = new Error();
  var stack = (error.stack || error).toString();
  var pat = /compileProcedure.*\n\s*at.*\((.*)\)/.exec(stack);
  if (pat) {
    return pat[1]
  }
  var pat2 = /compileProcedure.*\n\s*at\s+(.*)(\n|$)/.exec(stack);
  if (pat2) {
    return pat2[1]
  }
  return 'unknown'
}

function guessCallSite () {
  var error = new Error();
  var stack = (error.stack || error).toString();
  var pat = /at REGLCommand.*\n\s+at.*\((.*)\)/.exec(stack);
  if (pat) {
    return pat[1]
  }
  var pat2 = /at REGLCommand.*\n\s+at\s+(.*)\n/.exec(stack);
  if (pat2) {
    return pat2[1]
  }
  return 'unknown'
}

function parseSource (source, command) {
  var lines = source.split('\n');
  var lineNumber = 1;
  var fileNumber = 0;
  var files = {
    unknown: new ShaderFile(),
    0: new ShaderFile()
  };
  files.unknown.name = files[0].name = command || guessCommand();
  files.unknown.lines.push(new ShaderLine(0, ''));
  for (var i = 0; i < lines.length; ++i) {
    var line = lines[i];
    var parts = /^\s*\#\s*(\w+)\s+(.+)\s*$/.exec(line);
    if (parts) {
      switch (parts[1]) {
        case 'line':
          var lineNumberInfo = /(\d+)(\s+\d+)?/.exec(parts[2]);
          if (lineNumberInfo) {
            lineNumber = lineNumberInfo[1] | 0;
            if (lineNumberInfo[2]) {
              fileNumber = lineNumberInfo[2] | 0;
              if (!(fileNumber in files)) {
                files[fileNumber] = new ShaderFile();
              }
            }
          }
          break
        case 'define':
          var nameInfo = /SHADER_NAME(_B64)?\s+(.*)$/.exec(parts[2]);
          if (nameInfo) {
            files[fileNumber].name = (nameInfo[1]
                ? decodeB64(nameInfo[2])
                : nameInfo[2]);
          }
          break
      }
    }
    files[fileNumber].lines.push(new ShaderLine(lineNumber++, line));
  }
  Object.keys(files).forEach(function (fileNumber) {
    var file = files[fileNumber];
    file.lines.forEach(function (line) {
      file.index[line.number] = line;
    });
  });
  return files
}

function parseErrorLog (errLog) {
  var result = [];
  errLog.split('\n').forEach(function (errMsg) {
    if (errMsg.length < 5) {
      return
    }
    var parts = /^ERROR\:\s+(\d+)\:(\d+)\:\s*(.*)$/.exec(errMsg);
    if (parts) {
      result.push(new ShaderError(
        parts[1] | 0,
        parts[2] | 0,
        parts[3].trim()));
    } else if (errMsg.length > 0) {
      result.push(new ShaderError('unknown', 0, errMsg));
    }
  });
  return result
}

function annotateFiles (files, errors) {
  errors.forEach(function (error) {
    var file = files[error.file];
    if (file) {
      var line = file.index[error.line];
      if (line) {
        line.errors.push(error);
        file.hasErrors = true;
        return
      }
    }
    files.unknown.hasErrors = true;
    files.unknown.lines[0].errors.push(error);
  });
}

function checkShaderError (gl, shader, source, type, command) {
  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
    var errLog = gl.getShaderInfoLog(shader);
    var typeName = type === gl.FRAGMENT_SHADER ? 'fragment' : 'vertex';
    checkCommandType(source, 'string', typeName + ' shader source must be a string', command);
    var files = parseSource(source, command);
    var errors = parseErrorLog(errLog);
    annotateFiles(files, errors);

    Object.keys(files).forEach(function (fileNumber) {
      var file = files[fileNumber];
      if (!file.hasErrors) {
        return
      }

      var strings = [''];
      var styles = [''];

      function push (str, style) {
        strings.push(str);
        styles.push(style || '');
      }

      push('file number ' + fileNumber + ': ' + file.name + '\n', 'color:red;text-decoration:underline;font-weight:bold');

      file.lines.forEach(function (line) {
        if (line.errors.length > 0) {
          push(leftPad(line.number, 4) + '|  ', 'background-color:yellow; font-weight:bold');
          push(line.line + endl, 'color:red; background-color:yellow; font-weight:bold');

          // try to guess token
          var offset = 0;
          line.errors.forEach(function (error) {
            var message = error.message;
            var token = /^\s*\'(.*)\'\s*\:\s*(.*)$/.exec(message);
            if (token) {
              var tokenPat = token[1];
              message = token[2];
              switch (tokenPat) {
                case 'assign':
                  tokenPat = '=';
                  break
              }
              offset = Math.max(line.line.indexOf(tokenPat, offset), 0);
            } else {
              offset = 0;
            }

            push(leftPad('| ', 6));
            push(leftPad('^^^', offset + 3) + endl, 'font-weight:bold');
            push(leftPad('| ', 6));
            push(message + endl, 'font-weight:bold');
          });
          push(leftPad('| ', 6) + endl);
        } else {
          push(leftPad(line.number, 4) + '|  ');
          push(line.line + endl, 'color:red');
        }
      });
      if (typeof document !== 'undefined' && !window.chrome) {
        styles[0] = strings.join('%c');
        console.log.apply(console, styles);
      } else {
        console.log(strings.join(''));
      }
    });

    check.raise('Error compiling ' + typeName + ' shader, ' + files[0].name);
  }
}

function checkLinkError (gl, program, fragShader, vertShader, command) {
  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    var errLog = gl.getProgramInfoLog(program);
    var fragParse = parseSource(fragShader, command);
    var vertParse = parseSource(vertShader, command);

    var header = 'Error linking program with vertex shader, "' +
      vertParse[0].name + '", and fragment shader "' + fragParse[0].name + '"';

    if (typeof document !== 'undefined') {
      console.log('%c' + header + endl + '%c' + errLog,
        'color:red;text-decoration:underline;font-weight:bold',
        'color:red');
    } else {
      console.log(header + endl + errLog);
    }
    check.raise(header);
  }
}

function saveCommandRef (object) {
  object._commandRef = guessCommand();
}

function saveDrawCommandInfo (opts, uniforms, attributes, stringStore) {
  saveCommandRef(opts);

  function id (str) {
    if (str) {
      return stringStore.id(str)
    }
    return 0
  }
  opts._fragId = id(opts.static.frag);
  opts._vertId = id(opts.static.vert);

  function addProps (dict, set) {
    Object.keys(set).forEach(function (u) {
      dict[stringStore.id(u)] = true;
    });
  }

  var uniformSet = opts._uniformSet = {};
  addProps(uniformSet, uniforms.static);
  addProps(uniformSet, uniforms.dynamic);

  var attributeSet = opts._attributeSet = {};
  addProps(attributeSet, attributes.static);
  addProps(attributeSet, attributes.dynamic);

  opts._hasCount = (
    'count' in opts.static ||
    'count' in opts.dynamic ||
    'elements' in opts.static ||
    'elements' in opts.dynamic);
}

function commandRaise (message, command) {
  var callSite = guessCallSite();
  raise(message +
    ' in command ' + (command || guessCommand()) +
    (callSite === 'unknown' ? '' : ' called from ' + callSite));
}

function checkCommand (pred, message, command) {
  if (!pred) {
    commandRaise(message, command || guessCommand());
  }
}

function checkParameterCommand (param, possibilities, message, command) {
  if (!(param in possibilities)) {
    commandRaise(
      'unknown parameter (' + param + ')' + encolon(message) +
      '. possible values: ' + Object.keys(possibilities).join(),
      command || guessCommand());
  }
}

function checkCommandType (value, type, message, command) {
  if (typeof value !== type) {
    commandRaise(
      'invalid parameter type' + encolon(message) +
      '. expected ' + type + ', got ' + (typeof value),
      command || guessCommand());
  }
}

function checkOptional (block) {
  block();
}

function checkFramebufferFormat (attachment, texFormats, rbFormats) {
  if (attachment.texture) {
    checkOneOf(
      attachment.texture._texture.internalformat,
      texFormats,
      'unsupported texture format for attachment');
  } else {
    checkOneOf(
      attachment.renderbuffer._renderbuffer.format,
      rbFormats,
      'unsupported renderbuffer format for attachment');
  }
}

var GL_CLAMP_TO_EDGE = 0x812F;

var GL_NEAREST = 0x2600;
var GL_NEAREST_MIPMAP_NEAREST = 0x2700;
var GL_LINEAR_MIPMAP_NEAREST = 0x2701;
var GL_NEAREST_MIPMAP_LINEAR = 0x2702;
var GL_LINEAR_MIPMAP_LINEAR = 0x2703;

var GL_BYTE = 5120;
var GL_UNSIGNED_BYTE = 5121;
var GL_SHORT = 5122;
var GL_UNSIGNED_SHORT = 5123;
var GL_INT = 5124;
var GL_UNSIGNED_INT = 5125;
var GL_FLOAT = 5126;

var GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
var GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
var GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
var GL_UNSIGNED_INT_24_8_WEBGL = 0x84FA;

var GL_HALF_FLOAT_OES = 0x8D61;

var TYPE_SIZE = {};

TYPE_SIZE[GL_BYTE] =
TYPE_SIZE[GL_UNSIGNED_BYTE] = 1;

TYPE_SIZE[GL_SHORT] =
TYPE_SIZE[GL_UNSIGNED_SHORT] =
TYPE_SIZE[GL_HALF_FLOAT_OES] =
TYPE_SIZE[GL_UNSIGNED_SHORT_5_6_5] =
TYPE_SIZE[GL_UNSIGNED_SHORT_4_4_4_4] =
TYPE_SIZE[GL_UNSIGNED_SHORT_5_5_5_1] = 2;

TYPE_SIZE[GL_INT] =
TYPE_SIZE[GL_UNSIGNED_INT] =
TYPE_SIZE[GL_FLOAT] =
TYPE_SIZE[GL_UNSIGNED_INT_24_8_WEBGL] = 4;

function pixelSize (type, channels) {
  if (type === GL_UNSIGNED_SHORT_5_5_5_1 ||
      type === GL_UNSIGNED_SHORT_4_4_4_4 ||
      type === GL_UNSIGNED_SHORT_5_6_5) {
    return 2
  } else if (type === GL_UNSIGNED_INT_24_8_WEBGL) {
    return 4
  } else {
    return TYPE_SIZE[type] * channels
  }
}

function isPow2 (v) {
  return !(v & (v - 1)) && (!!v)
}

function checkTexture2D (info, mipData, limits) {
  var i;
  var w = mipData.width;
  var h = mipData.height;
  var c = mipData.channels;

  // Check texture shape
  check(w > 0 && w <= limits.maxTextureSize &&
        h > 0 && h <= limits.maxTextureSize,
        'invalid texture shape');

  // check wrap mode
  if (info.wrapS !== GL_CLAMP_TO_EDGE || info.wrapT !== GL_CLAMP_TO_EDGE) {
    check(isPow2(w) && isPow2(h),
      'incompatible wrap mode for texture, both width and height must be power of 2');
  }

  if (mipData.mipmask === 1) {
    if (w !== 1 && h !== 1) {
      check(
        info.minFilter !== GL_NEAREST_MIPMAP_NEAREST &&
        info.minFilter !== GL_NEAREST_MIPMAP_LINEAR &&
        info.minFilter !== GL_LINEAR_MIPMAP_NEAREST &&
        info.minFilter !== GL_LINEAR_MIPMAP_LINEAR,
        'min filter requires mipmap');
    }
  } else {
    // texture must be power of 2
    check(isPow2(w) && isPow2(h),
      'texture must be a square power of 2 to support mipmapping');
    check(mipData.mipmask === (w << 1) - 1,
      'missing or incomplete mipmap data');
  }

  if (mipData.type === GL_FLOAT) {
    if (limits.extensions.indexOf('oes_texture_float_linear') < 0) {
      check(info.minFilter === GL_NEAREST && info.magFilter === GL_NEAREST,
        'filter not supported, must enable oes_texture_float_linear');
    }
    check(!info.genMipmaps,
      'mipmap generation not supported with float textures');
  }

  // check image complete
  var mipimages = mipData.images;
  for (i = 0; i < 16; ++i) {
    if (mipimages[i]) {
      var mw = w >> i;
      var mh = h >> i;
      check(mipData.mipmask & (1 << i), 'missing mipmap data');

      var img = mipimages[i];

      check(
        img.width === mw &&
        img.height === mh,
        'invalid shape for mip images');

      check(
        img.format === mipData.format &&
        img.internalformat === mipData.internalformat &&
        img.type === mipData.type,
        'incompatible type for mip image');

      if (img.compressed) {
        // TODO: check size for compressed images
      } else if (img.data) {
        // check(img.data.byteLength === mw * mh *
        // Math.max(pixelSize(img.type, c), img.unpackAlignment),
        var rowSize = Math.ceil(pixelSize(img.type, c) * mw / img.unpackAlignment) * img.unpackAlignment;
        check(img.data.byteLength === rowSize * mh,
          'invalid data for image, buffer size is inconsistent with image format');
      } else if (img.element) {
        // TODO: check element can be loaded
      } else if (img.copy) {
        // TODO: check compatible format and type
      }
    } else if (!info.genMipmaps) {
      check((mipData.mipmask & (1 << i)) === 0, 'extra mipmap data');
    }
  }

  if (mipData.compressed) {
    check(!info.genMipmaps,
      'mipmap generation for compressed images not supported');
  }
}

function checkTextureCube (texture, info, faces, limits) {
  var w = texture.width;
  var h = texture.height;
  var c = texture.channels;

  // Check texture shape
  check(
    w > 0 && w <= limits.maxTextureSize && h > 0 && h <= limits.maxTextureSize,
    'invalid texture shape');
  check(
    w === h,
    'cube map must be square');
  check(
    info.wrapS === GL_CLAMP_TO_EDGE && info.wrapT === GL_CLAMP_TO_EDGE,
    'wrap mode not supported by cube map');

  for (var i = 0; i < faces.length; ++i) {
    var face = faces[i];
    check(
      face.width === w && face.height === h,
      'inconsistent cube map face shape');

    if (info.genMipmaps) {
      check(!face.compressed,
        'can not generate mipmap for compressed textures');
      check(face.mipmask === 1,
        'can not specify mipmaps and generate mipmaps');
    } else {
      // TODO: check mip and filter mode
    }

    var mipmaps = face.images;
    for (var j = 0; j < 16; ++j) {
      var img = mipmaps[j];
      if (img) {
        var mw = w >> j;
        var mh = h >> j;
        check(face.mipmask & (1 << j), 'missing mipmap data');
        check(
          img.width === mw &&
          img.height === mh,
          'invalid shape for mip images');
        check(
          img.format === texture.format &&
          img.internalformat === texture.internalformat &&
          img.type === texture.type,
          'incompatible type for mip image');

        if (img.compressed) {
          // TODO: check size for compressed images
        } else if (img.data) {
          check(img.data.byteLength === mw * mh *
            Math.max(pixelSize(img.type, c), img.unpackAlignment),
            'invalid data for image, buffer size is inconsistent with image format');
        } else if (img.element) {
          // TODO: check element can be loaded
        } else if (img.copy) {
          // TODO: check compatible format and type
        }
      }
    }
  }
}

var check$1 = extend(check, {
  optional: checkOptional,
  raise: raise,
  commandRaise: commandRaise,
  command: checkCommand,
  parameter: checkParameter,
  commandParameter: checkParameterCommand,
  constructor: checkConstructor,
  type: checkTypeOf,
  commandType: checkCommandType,
  isTypedArray: checkIsTypedArray,
  nni: checkNonNegativeInt,
  oneOf: checkOneOf,
  shaderError: checkShaderError,
  linkError: checkLinkError,
  callSite: guessCallSite,
  saveCommandRef: saveCommandRef,
  saveDrawInfo: saveDrawCommandInfo,
  framebufferFormat: checkFramebufferFormat,
  guessCommand: guessCommand,
  texture2D: checkTexture2D,
  textureCube: checkTextureCube
});

var VARIABLE_COUNTER = 0;

var DYN_FUNC = 0;

function DynamicVariable (type, data) {
  this.id = (VARIABLE_COUNTER++);
  this.type = type;
  this.data = data;
}

function escapeStr (str) {
  return str.replace(/\\/g, '\\\\').replace(/"/g, '\\"')
}

function splitParts (str) {
  if (str.length === 0) {
    return []
  }

  var firstChar = str.charAt(0);
  var lastChar = str.charAt(str.length - 1);

  if (str.length > 1 &&
      firstChar === lastChar &&
      (firstChar === '"' || firstChar === "'")) {
    return ['"' + escapeStr(str.substr(1, str.length - 2)) + '"']
  }

  var parts = /\[(false|true|null|\d+|'[^']*'|"[^"]*")\]/.exec(str);
  if (parts) {
    return (
      splitParts(str.substr(0, parts.index))
      .concat(splitParts(parts[1]))
      .concat(splitParts(str.substr(parts.index + parts[0].length)))
    )
  }

  var subparts = str.split('.');
  if (subparts.length === 1) {
    return ['"' + escapeStr(str) + '"']
  }

  var result = [];
  for (var i = 0; i < subparts.length; ++i) {
    result = result.concat(splitParts(subparts[i]));
  }
  return result
}

function toAccessorString (str) {
  return '[' + splitParts(str).join('][') + ']'
}

function defineDynamic (type, data) {
  return new DynamicVariable(type, toAccessorString(data + ''))
}

function isDynamic (x) {
  return (typeof x === 'function' && !x._reglType) ||
         x instanceof DynamicVariable
}

function unbox (x, path) {
  if (typeof x === 'function') {
    return new DynamicVariable(DYN_FUNC, x)
  }
  return x
}

var dynamic = {
  DynamicVariable: DynamicVariable,
  define: defineDynamic,
  isDynamic: isDynamic,
  unbox: unbox,
  accessor: toAccessorString
};

/* globals requestAnimationFrame, cancelAnimationFrame */
var raf = {
  next: typeof requestAnimationFrame === 'function'
    ? function (cb) { return requestAnimationFrame(cb) }
    : function (cb) { return setTimeout(cb, 16) },
  cancel: typeof cancelAnimationFrame === 'function'
    ? function (raf) { return cancelAnimationFrame(raf) }
    : clearTimeout
};

/* globals performance */
var clock = (typeof performance !== 'undefined' && performance.now)
  ? function () { return performance.now() }
  : function () { return +(new Date()) };

function createStringStore () {
  var stringIds = {'': 0};
  var stringValues = [''];
  return {
    id: function (str) {
      var result = stringIds[str];
      if (result) {
        return result
      }
      result = stringIds[str] = stringValues.length;
      stringValues.push(str);
      return result
    },

    str: function (id) {
      return stringValues[id]
    }
  }
}

// Context and canvas creation helper functions
function createCanvas (element, onDone, pixelRatio) {
  var canvas = document.createElement('canvas');
  extend(canvas.style, {
    border: 0,
    margin: 0,
    padding: 0,
    top: 0,
    left: 0
  });
  element.appendChild(canvas);

  if (element === document.body) {
    canvas.style.position = 'absolute';
    extend(element.style, {
      margin: 0,
      padding: 0
    });
  }

  function resize () {
    var w = window.innerWidth;
    var h = window.innerHeight;
    if (element !== document.body) {
      var bounds = element.getBoundingClientRect();
      w = bounds.right - bounds.left;
      h = bounds.bottom - bounds.top;
    }
    canvas.width = pixelRatio * w;
    canvas.height = pixelRatio * h;
    extend(canvas.style, {
      width: w + 'px',
      height: h + 'px'
    });
  }

  window.addEventListener('resize', resize, false);

  function onDestroy () {
    window.removeEventListener('resize', resize);
    element.removeChild(canvas);
  }

  resize();

  return {
    canvas: canvas,
    onDestroy: onDestroy
  }
}

function createContext (canvas, contextAttributes) {
  function get (name) {
    try {
      return canvas.getContext(name, contextAttributes)
    } catch (e) {
      return null
    }
  }
  return (
    get('webgl') ||
    get('experimental-webgl') ||
    get('webgl-experimental')
  )
}

function isHTMLElement (obj) {
  return (
    typeof obj.nodeName === 'string' &&
    typeof obj.appendChild === 'function' &&
    typeof obj.getBoundingClientRect === 'function'
  )
}

function isWebGLContext (obj) {
  return (
    typeof obj.drawArrays === 'function' ||
    typeof obj.drawElements === 'function'
  )
}

function parseExtensions (input) {
  if (typeof input === 'string') {
    return input.split()
  }
  check$1(Array.isArray(input), 'invalid extension array');
  return input
}

function getElement (desc) {
  if (typeof desc === 'string') {
    check$1(typeof document !== 'undefined', 'not supported outside of DOM');
    return document.querySelector(desc)
  }
  return desc
}

function parseArgs (args_) {
  var args = args_ || {};
  var element, container, canvas, gl;
  var contextAttributes = {};
  var extensions = [];
  var optionalExtensions = [];
  var pixelRatio = (typeof window === 'undefined' ? 1 : window.devicePixelRatio);
  var profile = false;
  var onDone = function (err) {
    if (err) {
      check$1.raise(err);
    }
  };
  var onDestroy = function () {};
  if (typeof args === 'string') {
    check$1(
      typeof document !== 'undefined',
      'selector queries only supported in DOM enviroments');
    element = document.querySelector(args);
    check$1(element, 'invalid query string for element');
  } else if (typeof args === 'object') {
    if (isHTMLElement(args)) {
      element = args;
    } else if (isWebGLContext(args)) {
      gl = args;
      canvas = gl.canvas;
    } else {
      check$1.constructor(args);
      if ('gl' in args) {
        gl = args.gl;
      } else if ('canvas' in args) {
        canvas = getElement(args.canvas);
      } else if ('container' in args) {
        container = getElement(args.container);
      }
      if ('attributes' in args) {
        contextAttributes = args.attributes;
        check$1.type(contextAttributes, 'object', 'invalid context attributes');
      }
      if ('extensions' in args) {
        extensions = parseExtensions(args.extensions);
      }
      if ('optionalExtensions' in args) {
        optionalExtensions = parseExtensions(args.optionalExtensions);
      }
      if ('onDone' in args) {
        check$1.type(
          args.onDone, 'function',
          'invalid or missing onDone callback');
        onDone = args.onDone;
      }
      if ('profile' in args) {
        profile = !!args.profile;
      }
      if ('pixelRatio' in args) {
        pixelRatio = +args.pixelRatio;
        check$1(pixelRatio > 0, 'invalid pixel ratio');
      }
    }
  } else {
    check$1.raise('invalid arguments to regl');
  }

  if (element) {
    if (element.nodeName.toLowerCase() === 'canvas') {
      canvas = element;
    } else {
      container = element;
    }
  }

  if (!gl) {
    if (!canvas) {
      check$1(
        typeof document !== 'undefined',
        'must manually specify webgl context outside of DOM environments');
      var result = createCanvas(container || document.body, onDone, pixelRatio);
      if (!result) {
        return null
      }
      canvas = result.canvas;
      onDestroy = result.onDestroy;
    }
    gl = createContext(canvas, contextAttributes);
  }

  if (!gl) {
    onDestroy();
    onDone('webgl not supported, try upgrading your browser or graphics drivers http://get.webgl.org');
    return null
  }

  return {
    gl: gl,
    canvas: canvas,
    container: container,
    extensions: extensions,
    optionalExtensions: optionalExtensions,
    pixelRatio: pixelRatio,
    profile: profile,
    onDone: onDone,
    onDestroy: onDestroy
  }
}

function createExtensionCache (gl, config) {
  var extensions = {};

  function tryLoadExtension (name_) {
    check$1.type(name_, 'string', 'extension name must be string');
    var name = name_.toLowerCase();
    var ext;
    try {
      ext = extensions[name] = gl.getExtension(name);
    } catch (e) {}
    return !!ext
  }

  for (var i = 0; i < config.extensions.length; ++i) {
    var name = config.extensions[i];
    if (!tryLoadExtension(name)) {
      config.onDestroy();
      config.onDone('"' + name + '" extension is not supported by the current WebGL context, try upgrading your system or a different browser');
      return null
    }
  }

  config.optionalExtensions.forEach(tryLoadExtension);

  return {
    extensions: extensions,
    restore: function () {
      Object.keys(extensions).forEach(function (name) {
        if (extensions[name] && !tryLoadExtension(name)) {
          throw new Error('(regl): error restoring extension ' + name)
        }
      });
    }
  }
}

function loop (n, f) {
  var result = Array(n);
  for (var i = 0; i < n; ++i) {
    result[i] = f(i);
  }
  return result
}

var GL_BYTE$1 = 5120;
var GL_UNSIGNED_BYTE$2 = 5121;
var GL_SHORT$1 = 5122;
var GL_UNSIGNED_SHORT$1 = 5123;
var GL_INT$1 = 5124;
var GL_UNSIGNED_INT$1 = 5125;
var GL_FLOAT$2 = 5126;

function nextPow16 (v) {
  for (var i = 16; i <= (1 << 28); i *= 16) {
    if (v <= i) {
      return i
    }
  }
  return 0
}

function log2 (v) {
  var r, shift;
  r = (v > 0xFFFF) << 4;
  v >>>= r;
  shift = (v > 0xFF) << 3;
  v >>>= shift; r |= shift;
  shift = (v > 0xF) << 2;
  v >>>= shift; r |= shift;
  shift = (v > 0x3) << 1;
  v >>>= shift; r |= shift;
  return r | (v >> 1)
}

function createPool () {
  var bufferPool = loop(8, function () {
    return []
  });

  function alloc (n) {
    var sz = nextPow16(n);
    var bin = bufferPool[log2(sz) >> 2];
    if (bin.length > 0) {
      return bin.pop()
    }
    return new ArrayBuffer(sz)
  }

  function free (buf) {
    bufferPool[log2(buf.byteLength) >> 2].push(buf);
  }

  function allocType (type, n) {
    var result = null;
    switch (type) {
      case GL_BYTE$1:
        result = new Int8Array(alloc(n), 0, n);
        break
      case GL_UNSIGNED_BYTE$2:
        result = new Uint8Array(alloc(n), 0, n);
        break
      case GL_SHORT$1:
        result = new Int16Array(alloc(2 * n), 0, n);
        break
      case GL_UNSIGNED_SHORT$1:
        result = new Uint16Array(alloc(2 * n), 0, n);
        break
      case GL_INT$1:
        result = new Int32Array(alloc(4 * n), 0, n);
        break
      case GL_UNSIGNED_INT$1:
        result = new Uint32Array(alloc(4 * n), 0, n);
        break
      case GL_FLOAT$2:
        result = new Float32Array(alloc(4 * n), 0, n);
        break
      default:
        return null
    }
    if (result.length !== n) {
      return result.subarray(0, n)
    }
    return result
  }

  function freeType (array) {
    free(array.buffer);
  }

  return {
    alloc: alloc,
    free: free,
    allocType: allocType,
    freeType: freeType
  }
}

var pool = createPool();

// zero pool for initial zero data
pool.zero = createPool();

var GL_SUBPIXEL_BITS = 0x0D50;
var GL_RED_BITS = 0x0D52;
var GL_GREEN_BITS = 0x0D53;
var GL_BLUE_BITS = 0x0D54;
var GL_ALPHA_BITS = 0x0D55;
var GL_DEPTH_BITS = 0x0D56;
var GL_STENCIL_BITS = 0x0D57;

var GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
var GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;

var GL_MAX_TEXTURE_SIZE = 0x0D33;
var GL_MAX_VIEWPORT_DIMS = 0x0D3A;
var GL_MAX_VERTEX_ATTRIBS = 0x8869;
var GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
var GL_MAX_VARYING_VECTORS = 0x8DFC;
var GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
var GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
var GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
var GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
var GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
var GL_MAX_RENDERBUFFER_SIZE = 0x84E8;

var GL_VENDOR = 0x1F00;
var GL_RENDERER = 0x1F01;
var GL_VERSION = 0x1F02;
var GL_SHADING_LANGUAGE_VERSION = 0x8B8C;

var GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;

var GL_MAX_COLOR_ATTACHMENTS_WEBGL = 0x8CDF;
var GL_MAX_DRAW_BUFFERS_WEBGL = 0x8824;

var GL_TEXTURE_2D = 0x0DE1;
var GL_TEXTURE_CUBE_MAP = 0x8513;
var GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
var GL_TEXTURE0 = 0x84C0;
var GL_RGBA = 0x1908;
var GL_FLOAT$1 = 0x1406;
var GL_UNSIGNED_BYTE$1 = 0x1401;
var GL_FRAMEBUFFER = 0x8D40;
var GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
var GL_COLOR_ATTACHMENT0 = 0x8CE0;
var GL_COLOR_BUFFER_BIT$1 = 0x4000;

var wrapLimits = function (gl, extensions) {
  var maxAnisotropic = 1;
  if (extensions.ext_texture_filter_anisotropic) {
    maxAnisotropic = gl.getParameter(GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT);
  }

  var maxDrawbuffers = 1;
  var maxColorAttachments = 1;
  if (extensions.webgl_draw_buffers) {
    maxDrawbuffers = gl.getParameter(GL_MAX_DRAW_BUFFERS_WEBGL);
    maxColorAttachments = gl.getParameter(GL_MAX_COLOR_ATTACHMENTS_WEBGL);
  }

  // detect if reading float textures is available (Safari doesn't support)
  var readFloat = !!extensions.oes_texture_float;
  if (readFloat) {
    var readFloatTexture = gl.createTexture();
    gl.bindTexture(GL_TEXTURE_2D, readFloatTexture);
    gl.texImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 1, 1, 0, GL_RGBA, GL_FLOAT$1, null);

    var fbo = gl.createFramebuffer();
    gl.bindFramebuffer(GL_FRAMEBUFFER, fbo);
    gl.framebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, readFloatTexture, 0);
    gl.bindTexture(GL_TEXTURE_2D, null);

    if (gl.checkFramebufferStatus(GL_FRAMEBUFFER) !== GL_FRAMEBUFFER_COMPLETE) readFloat = false;

    else {
      gl.viewport(0, 0, 1, 1);
      gl.clearColor(1.0, 0.0, 0.0, 1.0);
      gl.clear(GL_COLOR_BUFFER_BIT$1);
      var pixels = pool.allocType(GL_FLOAT$1, 4);
      gl.readPixels(0, 0, 1, 1, GL_RGBA, GL_FLOAT$1, pixels);

      if (gl.getError()) readFloat = false;
      else {
        gl.deleteFramebuffer(fbo);
        gl.deleteTexture(readFloatTexture);

        readFloat = pixels[0] === 1.0;
      }

      pool.freeType(pixels);
    }
  }

  // detect non power of two cube textures support (IE doesn't support)
  var isIE = typeof navigator !== 'undefined' && (/MSIE/.test(navigator.userAgent) || /Trident\//.test(navigator.appVersion) || /Edge/.test(navigator.userAgent));

  var npotTextureCube = true;

  if (!isIE) {
    var cubeTexture = gl.createTexture();
    var data = pool.allocType(GL_UNSIGNED_BYTE$1, 36);
    gl.activeTexture(GL_TEXTURE0);
    gl.bindTexture(GL_TEXTURE_CUBE_MAP, cubeTexture);
    gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X, 0, GL_RGBA, 3, 3, 0, GL_RGBA, GL_UNSIGNED_BYTE$1, data);
    pool.freeType(data);
    gl.bindTexture(GL_TEXTURE_CUBE_MAP, null);
    gl.deleteTexture(cubeTexture);
    npotTextureCube = !gl.getError();
  }

  return {
    // drawing buffer bit depth
    colorBits: [
      gl.getParameter(GL_RED_BITS),
      gl.getParameter(GL_GREEN_BITS),
      gl.getParameter(GL_BLUE_BITS),
      gl.getParameter(GL_ALPHA_BITS)
    ],
    depthBits: gl.getParameter(GL_DEPTH_BITS),
    stencilBits: gl.getParameter(GL_STENCIL_BITS),
    subpixelBits: gl.getParameter(GL_SUBPIXEL_BITS),

    // supported extensions
    extensions: Object.keys(extensions).filter(function (ext) {
      return !!extensions[ext]
    }),

    // max aniso samples
    maxAnisotropic: maxAnisotropic,

    // max draw buffers
    maxDrawbuffers: maxDrawbuffers,
    maxColorAttachments: maxColorAttachments,

    // point and line size ranges
    pointSizeDims: gl.getParameter(GL_ALIASED_POINT_SIZE_RANGE),
    lineWidthDims: gl.getParameter(GL_ALIASED_LINE_WIDTH_RANGE),
    maxViewportDims: gl.getParameter(GL_MAX_VIEWPORT_DIMS),
    maxCombinedTextureUnits: gl.getParameter(GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS),
    maxCubeMapSize: gl.getParameter(GL_MAX_CUBE_MAP_TEXTURE_SIZE),
    maxRenderbufferSize: gl.getParameter(GL_MAX_RENDERBUFFER_SIZE),
    maxTextureUnits: gl.getParameter(GL_MAX_TEXTURE_IMAGE_UNITS),
    maxTextureSize: gl.getParameter(GL_MAX_TEXTURE_SIZE),
    maxAttributes: gl.getParameter(GL_MAX_VERTEX_ATTRIBS),
    maxVertexUniforms: gl.getParameter(GL_MAX_VERTEX_UNIFORM_VECTORS),
    maxVertexTextureUnits: gl.getParameter(GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS),
    maxVaryingVectors: gl.getParameter(GL_MAX_VARYING_VECTORS),
    maxFragmentUniforms: gl.getParameter(GL_MAX_FRAGMENT_UNIFORM_VECTORS),

    // vendor info
    glsl: gl.getParameter(GL_SHADING_LANGUAGE_VERSION),
    renderer: gl.getParameter(GL_RENDERER),
    vendor: gl.getParameter(GL_VENDOR),
    version: gl.getParameter(GL_VERSION),

    // quirks
    readFloat: readFloat,
    npotTextureCube: npotTextureCube
  }
};

function isNDArrayLike (obj) {
  return (
    !!obj &&
    typeof obj === 'object' &&
    Array.isArray(obj.shape) &&
    Array.isArray(obj.stride) &&
    typeof obj.offset === 'number' &&
    obj.shape.length === obj.stride.length &&
    (Array.isArray(obj.data) ||
      isTypedArray(obj.data)))
}

var values = function (obj) {
  return Object.keys(obj).map(function (key) { return obj[key] })
};

var flattenUtils = {
  shape: arrayShape$1,
  flatten: flattenArray
};

function flatten1D (array, nx, out) {
  for (var i = 0; i < nx; ++i) {
    out[i] = array[i];
  }
}

function flatten2D (array, nx, ny, out) {
  var ptr = 0;
  for (var i = 0; i < nx; ++i) {
    var row = array[i];
    for (var j = 0; j < ny; ++j) {
      out[ptr++] = row[j];
    }
  }
}

function flatten3D (array, nx, ny, nz, out, ptr_) {
  var ptr = ptr_;
  for (var i = 0; i < nx; ++i) {
    var row = array[i];
    for (var j = 0; j < ny; ++j) {
      var col = row[j];
      for (var k = 0; k < nz; ++k) {
        out[ptr++] = col[k];
      }
    }
  }
}

function flattenRec (array, shape, level, out, ptr) {
  var stride = 1;
  for (var i = level + 1; i < shape.length; ++i) {
    stride *= shape[i];
  }
  var n = shape[level];
  if (shape.length - level === 4) {
    var nx = shape[level + 1];
    var ny = shape[level + 2];
    var nz = shape[level + 3];
    for (i = 0; i < n; ++i) {
      flatten3D(array[i], nx, ny, nz, out, ptr);
      ptr += stride;
    }
  } else {
    for (i = 0; i < n; ++i) {
      flattenRec(array[i], shape, level + 1, out, ptr);
      ptr += stride;
    }
  }
}

function flattenArray (array, shape, type, out_) {
  var sz = 1;
  if (shape.length) {
    for (var i = 0; i < shape.length; ++i) {
      sz *= shape[i];
    }
  } else {
    sz = 0;
  }
  var out = out_ || pool.allocType(type, sz);
  switch (shape.length) {
    case 0:
      break
    case 1:
      flatten1D(array, shape[0], out);
      break
    case 2:
      flatten2D(array, shape[0], shape[1], out);
      break
    case 3:
      flatten3D(array, shape[0], shape[1], shape[2], out, 0);
      break
    default:
      flattenRec(array, shape, 0, out, 0);
  }
  return out
}

function arrayShape$1 (array_) {
  var shape = [];
  for (var array = array_; array.length; array = array[0]) {
    shape.push(array.length);
  }
  return shape
}

var arrayTypes = {
	"[object Int8Array]": 5120,
	"[object Int16Array]": 5122,
	"[object Int32Array]": 5124,
	"[object Uint8Array]": 5121,
	"[object Uint8ClampedArray]": 5121,
	"[object Uint16Array]": 5123,
	"[object Uint32Array]": 5125,
	"[object Float32Array]": 5126,
	"[object Float64Array]": 5121,
	"[object ArrayBuffer]": 5121
};

var int8 = 5120;
var int16 = 5122;
var int32 = 5124;
var uint8 = 5121;
var uint16 = 5123;
var uint32 = 5125;
var float = 5126;
var float32 = 5126;
var glTypes = {
	int8: int8,
	int16: int16,
	int32: int32,
	uint8: uint8,
	uint16: uint16,
	uint32: uint32,
	float: float,
	float32: float32
};

var dynamic$1 = 35048;
var stream = 35040;
var usageTypes = {
	dynamic: dynamic$1,
	stream: stream,
	"static": 35044
};

var arrayFlatten = flattenUtils.flatten;
var arrayShape = flattenUtils.shape;

var GL_STATIC_DRAW = 0x88E4;
var GL_STREAM_DRAW = 0x88E0;

var GL_UNSIGNED_BYTE$3 = 5121;
var GL_FLOAT$3 = 5126;

var DTYPES_SIZES = [];
DTYPES_SIZES[5120] = 1; // int8
DTYPES_SIZES[5122] = 2; // int16
DTYPES_SIZES[5124] = 4; // int32
DTYPES_SIZES[5121] = 1; // uint8
DTYPES_SIZES[5123] = 2; // uint16
DTYPES_SIZES[5125] = 4; // uint32
DTYPES_SIZES[5126] = 4; // float32

function typedArrayCode (data) {
  return arrayTypes[Object.prototype.toString.call(data)] | 0
}

function copyArray (out, inp) {
  for (var i = 0; i < inp.length; ++i) {
    out[i] = inp[i];
  }
}

function transpose (
  result, data, shapeX, shapeY, strideX, strideY, offset) {
  var ptr = 0;
  for (var i = 0; i < shapeX; ++i) {
    for (var j = 0; j < shapeY; ++j) {
      result[ptr++] = data[strideX * i + strideY * j + offset];
    }
  }
}

function wrapBufferState (gl, stats, config, attributeState) {
  var bufferCount = 0;
  var bufferSet = {};

  function REGLBuffer (type) {
    this.id = bufferCount++;
    this.buffer = gl.createBuffer();
    this.type = type;
    this.usage = GL_STATIC_DRAW;
    this.byteLength = 0;
    this.dimension = 1;
    this.dtype = GL_UNSIGNED_BYTE$3;

    this.persistentData = null;

    if (config.profile) {
      this.stats = {size: 0};
    }
  }

  REGLBuffer.prototype.bind = function () {
    gl.bindBuffer(this.type, this.buffer);
  };

  REGLBuffer.prototype.destroy = function () {
    destroy(this);
  };

  var streamPool = [];

  function createStream (type, data) {
    var buffer = streamPool.pop();
    if (!buffer) {
      buffer = new REGLBuffer(type);
    }
    buffer.bind();
    initBufferFromData(buffer, data, GL_STREAM_DRAW, 0, 1, false);
    return buffer
  }

  function destroyStream (stream$$1) {
    streamPool.push(stream$$1);
  }

  function initBufferFromTypedArray (buffer, data, usage) {
    buffer.byteLength = data.byteLength;
    gl.bufferData(buffer.type, data, usage);
  }

  function initBufferFromData (buffer, data, usage, dtype, dimension, persist) {
    var shape;
    buffer.usage = usage;
    if (Array.isArray(data)) {
      buffer.dtype = dtype || GL_FLOAT$3;
      if (data.length > 0) {
        var flatData;
        if (Array.isArray(data[0])) {
          shape = arrayShape(data);
          var dim = 1;
          for (var i = 1; i < shape.length; ++i) {
            dim *= shape[i];
          }
          buffer.dimension = dim;
          flatData = arrayFlatten(data, shape, buffer.dtype);
          initBufferFromTypedArray(buffer, flatData, usage);
          if (persist) {
            buffer.persistentData = flatData;
          } else {
            pool.freeType(flatData);
          }
        } else if (typeof data[0] === 'number') {
          buffer.dimension = dimension;
          var typedData = pool.allocType(buffer.dtype, data.length);
          copyArray(typedData, data);
          initBufferFromTypedArray(buffer, typedData, usage);
          if (persist) {
            buffer.persistentData = typedData;
          } else {
            pool.freeType(typedData);
          }
        } else if (isTypedArray(data[0])) {
          buffer.dimension = data[0].length;
          buffer.dtype = dtype || typedArrayCode(data[0]) || GL_FLOAT$3;
          flatData = arrayFlatten(
            data,
            [data.length, data[0].length],
            buffer.dtype);
          initBufferFromTypedArray(buffer, flatData, usage);
          if (persist) {
            buffer.persistentData = flatData;
          } else {
            pool.freeType(flatData);
          }
        } else {
          check$1.raise('invalid buffer data');
        }
      }
    } else if (isTypedArray(data)) {
      buffer.dtype = dtype || typedArrayCode(data);
      buffer.dimension = dimension;
      initBufferFromTypedArray(buffer, data, usage);
      if (persist) {
        buffer.persistentData = new Uint8Array(new Uint8Array(data.buffer));
      }
    } else if (isNDArrayLike(data)) {
      shape = data.shape;
      var stride = data.stride;
      var offset = data.offset;

      var shapeX = 0;
      var shapeY = 0;
      var strideX = 0;
      var strideY = 0;
      if (shape.length === 1) {
        shapeX = shape[0];
        shapeY = 1;
        strideX = stride[0];
        strideY = 0;
      } else if (shape.length === 2) {
        shapeX = shape[0];
        shapeY = shape[1];
        strideX = stride[0];
        strideY = stride[1];
      } else {
        check$1.raise('invalid shape');
      }

      buffer.dtype = dtype || typedArrayCode(data.data) || GL_FLOAT$3;
      buffer.dimension = shapeY;

      var transposeData = pool.allocType(buffer.dtype, shapeX * shapeY);
      transpose(transposeData,
        data.data,
        shapeX, shapeY,
        strideX, strideY,
        offset);
      initBufferFromTypedArray(buffer, transposeData, usage);
      if (persist) {
        buffer.persistentData = transposeData;
      } else {
        pool.freeType(transposeData);
      }
    } else if (data instanceof ArrayBuffer) {
      buffer.dtype = GL_UNSIGNED_BYTE$3;
      buffer.dimension = dimension;
      initBufferFromTypedArray(buffer, data, usage);
      if (persist) {
        buffer.persistentData = new Uint8Array(new Uint8Array(data));
      }
    } else {
      check$1.raise('invalid buffer data');
    }
  }

  function destroy (buffer) {
    stats.bufferCount--;

    for (var i = 0; i < attributeState.state.length; ++i) {
      var record = attributeState.state[i];
      if (record.buffer === buffer) {
        gl.disableVertexAttribArray(i);
        record.buffer = null;
      }
    }

    var handle = buffer.buffer;
    check$1(handle, 'buffer must not be deleted already');
    gl.deleteBuffer(handle);
    buffer.buffer = null;
    delete bufferSet[buffer.id];
  }

  function createBuffer (options, type, deferInit, persistent) {
    stats.bufferCount++;

    var buffer = new REGLBuffer(type);
    bufferSet[buffer.id] = buffer;

    function reglBuffer (options) {
      var usage = GL_STATIC_DRAW;
      var data = null;
      var byteLength = 0;
      var dtype = 0;
      var dimension = 1;
      if (Array.isArray(options) ||
          isTypedArray(options) ||
          isNDArrayLike(options) ||
          options instanceof ArrayBuffer) {
        data = options;
      } else if (typeof options === 'number') {
        byteLength = options | 0;
      } else if (options) {
        check$1.type(
          options, 'object',
          'buffer arguments must be an object, a number or an array');

        if ('data' in options) {
          check$1(
            data === null ||
            Array.isArray(data) ||
            isTypedArray(data) ||
            isNDArrayLike(data),
            'invalid data for buffer');
          data = options.data;
        }

        if ('usage' in options) {
          check$1.parameter(options.usage, usageTypes, 'invalid buffer usage');
          usage = usageTypes[options.usage];
        }

        if ('type' in options) {
          check$1.parameter(options.type, glTypes, 'invalid buffer type');
          dtype = glTypes[options.type];
        }

        if ('dimension' in options) {
          check$1.type(options.dimension, 'number', 'invalid dimension');
          dimension = options.dimension | 0;
        }

        if ('length' in options) {
          check$1.nni(byteLength, 'buffer length must be a nonnegative integer');
          byteLength = options.length | 0;
        }
      }

      buffer.bind();
      if (!data) {
        // #475
        if (byteLength) gl.bufferData(buffer.type, byteLength, usage);
        buffer.dtype = dtype || GL_UNSIGNED_BYTE$3;
        buffer.usage = usage;
        buffer.dimension = dimension;
        buffer.byteLength = byteLength;
      } else {
        initBufferFromData(buffer, data, usage, dtype, dimension, persistent);
      }

      if (config.profile) {
        buffer.stats.size = buffer.byteLength * DTYPES_SIZES[buffer.dtype];
      }

      return reglBuffer
    }

    function setSubData (data, offset) {
      check$1(offset + data.byteLength <= buffer.byteLength,
        'invalid buffer subdata call, buffer is too small. ' + ' Can\'t write data of size ' + data.byteLength + ' starting from offset ' + offset + ' to a buffer of size ' + buffer.byteLength);

      gl.bufferSubData(buffer.type, offset, data);
    }

    function subdata (data, offset_) {
      var offset = (offset_ || 0) | 0;
      var shape;
      buffer.bind();
      if (isTypedArray(data) || data instanceof ArrayBuffer) {
        setSubData(data, offset);
      } else if (Array.isArray(data)) {
        if (data.length > 0) {
          if (typeof data[0] === 'number') {
            var converted = pool.allocType(buffer.dtype, data.length);
            copyArray(converted, data);
            setSubData(converted, offset);
            pool.freeType(converted);
          } else if (Array.isArray(data[0]) || isTypedArray(data[0])) {
            shape = arrayShape(data);
            var flatData = arrayFlatten(data, shape, buffer.dtype);
            setSubData(flatData, offset);
            pool.freeType(flatData);
          } else {
            check$1.raise('invalid buffer data');
          }
        }
      } else if (isNDArrayLike(data)) {
        shape = data.shape;
        var stride = data.stride;

        var shapeX = 0;
        var shapeY = 0;
        var strideX = 0;
        var strideY = 0;
        if (shape.length === 1) {
          shapeX = shape[0];
          shapeY = 1;
          strideX = stride[0];
          strideY = 0;
        } else if (shape.length === 2) {
          shapeX = shape[0];
          shapeY = shape[1];
          strideX = stride[0];
          strideY = stride[1];
        } else {
          check$1.raise('invalid shape');
        }
        var dtype = Array.isArray(data.data)
          ? buffer.dtype
          : typedArrayCode(data.data);

        var transposeData = pool.allocType(dtype, shapeX * shapeY);
        transpose(transposeData,
          data.data,
          shapeX, shapeY,
          strideX, strideY,
          data.offset);
        setSubData(transposeData, offset);
        pool.freeType(transposeData);
      } else {
        check$1.raise('invalid data for buffer subdata');
      }
      return reglBuffer
    }

    if (!deferInit) {
      reglBuffer(options);
    }

    reglBuffer._reglType = 'buffer';
    reglBuffer._buffer = buffer;
    reglBuffer.subdata = subdata;
    if (config.profile) {
      reglBuffer.stats = buffer.stats;
    }
    reglBuffer.destroy = function () { destroy(buffer); };

    return reglBuffer
  }

  function restoreBuffers () {
    values(bufferSet).forEach(function (buffer) {
      buffer.buffer = gl.createBuffer();
      gl.bindBuffer(buffer.type, buffer.buffer);
      gl.bufferData(
        buffer.type, buffer.persistentData || buffer.byteLength, buffer.usage);
    });
  }

  if (config.profile) {
    stats.getTotalBufferSize = function () {
      var total = 0;
      // TODO: Right now, the streams are not part of the total count.
      Object.keys(bufferSet).forEach(function (key) {
        total += bufferSet[key].stats.size;
      });
      return total
    };
  }

  return {
    create: createBuffer,

    createStream: createStream,
    destroyStream: destroyStream,

    clear: function () {
      values(bufferSet).forEach(destroy);
      streamPool.forEach(destroy);
    },

    getBuffer: function (wrapper) {
      if (wrapper && wrapper._buffer instanceof REGLBuffer) {
        return wrapper._buffer
      }
      return null
    },

    restore: restoreBuffers,

    _initBuffer: initBufferFromData
  }
}

var points = 0;
var point = 0;
var lines = 1;
var line = 1;
var triangles = 4;
var triangle = 4;
var primTypes = {
	points: points,
	point: point,
	lines: lines,
	line: line,
	triangles: triangles,
	triangle: triangle,
	"line loop": 2,
	"line strip": 3,
	"triangle strip": 5,
	"triangle fan": 6
};

var GL_POINTS = 0;
var GL_LINES = 1;
var GL_TRIANGLES = 4;

var GL_BYTE$2 = 5120;
var GL_UNSIGNED_BYTE$4 = 5121;
var GL_SHORT$2 = 5122;
var GL_UNSIGNED_SHORT$2 = 5123;
var GL_INT$2 = 5124;
var GL_UNSIGNED_INT$2 = 5125;

var GL_ELEMENT_ARRAY_BUFFER = 34963;

var GL_STREAM_DRAW$1 = 0x88E0;
var GL_STATIC_DRAW$1 = 0x88E4;

function wrapElementsState (gl, extensions, bufferState, stats) {
  var elementSet = {};
  var elementCount = 0;

  var elementTypes = {
    'uint8': GL_UNSIGNED_BYTE$4,
    'uint16': GL_UNSIGNED_SHORT$2
  };

  if (extensions.oes_element_index_uint) {
    elementTypes.uint32 = GL_UNSIGNED_INT$2;
  }

  function REGLElementBuffer (buffer) {
    this.id = elementCount++;
    elementSet[this.id] = this;
    this.buffer = buffer;
    this.primType = GL_TRIANGLES;
    this.vertCount = 0;
    this.type = 0;
  }

  REGLElementBuffer.prototype.bind = function () {
    this.buffer.bind();
  };

  var bufferPool = [];

  function createElementStream (data) {
    var result = bufferPool.pop();
    if (!result) {
      result = new REGLElementBuffer(bufferState.create(
        null,
        GL_ELEMENT_ARRAY_BUFFER,
        true,
        false)._buffer);
    }
    initElements(result, data, GL_STREAM_DRAW$1, -1, -1, 0, 0);
    return result
  }

  function destroyElementStream (elements) {
    bufferPool.push(elements);
  }

  function initElements (
    elements,
    data,
    usage,
    prim,
    count,
    byteLength,
    type) {
    elements.buffer.bind();
    if (data) {
      var predictedType = type;
      if (!type && (
          !isTypedArray(data) ||
         (isNDArrayLike(data) && !isTypedArray(data.data)))) {
        predictedType = extensions.oes_element_index_uint
          ? GL_UNSIGNED_INT$2
          : GL_UNSIGNED_SHORT$2;
      }
      bufferState._initBuffer(
        elements.buffer,
        data,
        usage,
        predictedType,
        3);
    } else {
      gl.bufferData(GL_ELEMENT_ARRAY_BUFFER, byteLength, usage);
      elements.buffer.dtype = dtype || GL_UNSIGNED_BYTE$4;
      elements.buffer.usage = usage;
      elements.buffer.dimension = 3;
      elements.buffer.byteLength = byteLength;
    }

    var dtype = type;
    if (!type) {
      switch (elements.buffer.dtype) {
        case GL_UNSIGNED_BYTE$4:
        case GL_BYTE$2:
          dtype = GL_UNSIGNED_BYTE$4;
          break

        case GL_UNSIGNED_SHORT$2:
        case GL_SHORT$2:
          dtype = GL_UNSIGNED_SHORT$2;
          break

        case GL_UNSIGNED_INT$2:
        case GL_INT$2:
          dtype = GL_UNSIGNED_INT$2;
          break

        default:
          check$1.raise('unsupported type for element array');
      }
      elements.buffer.dtype = dtype;
    }
    elements.type = dtype;

    // Check oes_element_index_uint extension
    check$1(
      dtype !== GL_UNSIGNED_INT$2 ||
      !!extensions.oes_element_index_uint,
      '32 bit element buffers not supported, enable oes_element_index_uint first');

    // try to guess default primitive type and arguments
    var vertCount = count;
    if (vertCount < 0) {
      vertCount = elements.buffer.byteLength;
      if (dtype === GL_UNSIGNED_SHORT$2) {
        vertCount >>= 1;
      } else if (dtype === GL_UNSIGNED_INT$2) {
        vertCount >>= 2;
      }
    }
    elements.vertCount = vertCount;

    // try to guess primitive type from cell dimension
    var primType = prim;
    if (prim < 0) {
      primType = GL_TRIANGLES;
      var dimension = elements.buffer.dimension;
      if (dimension === 1) primType = GL_POINTS;
      if (dimension === 2) primType = GL_LINES;
      if (dimension === 3) primType = GL_TRIANGLES;
    }
    elements.primType = primType;
  }

  function destroyElements (elements) {
    stats.elementsCount--;

    check$1(elements.buffer !== null, 'must not double destroy elements');
    delete elementSet[elements.id];
    elements.buffer.destroy();
    elements.buffer = null;
  }

  function createElements (options, persistent) {
    var buffer = bufferState.create(null, GL_ELEMENT_ARRAY_BUFFER, true);
    var elements = new REGLElementBuffer(buffer._buffer);
    stats.elementsCount++;

    function reglElements (options) {
      if (!options) {
        buffer();
        elements.primType = GL_TRIANGLES;
        elements.vertCount = 0;
        elements.type = GL_UNSIGNED_BYTE$4;
      } else if (typeof options === 'number') {
        buffer(options);
        elements.primType = GL_TRIANGLES;
        elements.vertCount = options | 0;
        elements.type = GL_UNSIGNED_BYTE$4;
      } else {
        var data = null;
        var usage = GL_STATIC_DRAW$1;
        var primType = -1;
        var vertCount = -1;
        var byteLength = 0;
        var dtype = 0;
        if (Array.isArray(options) ||
            isTypedArray(options) ||
            isNDArrayLike(options)) {
          data = options;
        } else {
          check$1.type(options, 'object', 'invalid arguments for elements');
          if ('data' in options) {
            data = options.data;
            check$1(
                Array.isArray(data) ||
                isTypedArray(data) ||
                isNDArrayLike(data),
                'invalid data for element buffer');
          }
          if ('usage' in options) {
            check$1.parameter(
              options.usage,
              usageTypes,
              'invalid element buffer usage');
            usage = usageTypes[options.usage];
          }
          if ('primitive' in options) {
            check$1.parameter(
              options.primitive,
              primTypes,
              'invalid element buffer primitive');
            primType = primTypes[options.primitive];
          }
          if ('count' in options) {
            check$1(
              typeof options.count === 'number' && options.count >= 0,
              'invalid vertex count for elements');
            vertCount = options.count | 0;
          }
          if ('type' in options) {
            check$1.parameter(
              options.type,
              elementTypes,
              'invalid buffer type');
            dtype = elementTypes[options.type];
          }
          if ('length' in options) {
            byteLength = options.length | 0;
          } else {
            byteLength = vertCount;
            if (dtype === GL_UNSIGNED_SHORT$2 || dtype === GL_SHORT$2) {
              byteLength *= 2;
            } else if (dtype === GL_UNSIGNED_INT$2 || dtype === GL_INT$2) {
              byteLength *= 4;
            }
          }
        }
        initElements(
          elements,
          data,
          usage,
          primType,
          vertCount,
          byteLength,
          dtype);
      }

      return reglElements
    }

    reglElements(options);

    reglElements._reglType = 'elements';
    reglElements._elements = elements;
    reglElements.subdata = function (data, offset) {
      buffer.subdata(data, offset);
      return reglElements
    };
    reglElements.destroy = function () {
      destroyElements(elements);
    };

    return reglElements
  }

  return {
    create: createElements,
    createStream: createElementStream,
    destroyStream: destroyElementStream,
    getElements: function (elements) {
      if (typeof elements === 'function' &&
          elements._elements instanceof REGLElementBuffer) {
        return elements._elements
      }
      return null
    },
    clear: function () {
      values(elementSet).forEach(destroyElements);
    }
  }
}

var FLOAT = new Float32Array(1);
var INT = new Uint32Array(FLOAT.buffer);

var GL_UNSIGNED_SHORT$4 = 5123;

function convertToHalfFloat (array) {
  var ushorts = pool.allocType(GL_UNSIGNED_SHORT$4, array.length);

  for (var i = 0; i < array.length; ++i) {
    if (isNaN(array[i])) {
      ushorts[i] = 0xffff;
    } else if (array[i] === Infinity) {
      ushorts[i] = 0x7c00;
    } else if (array[i] === -Infinity) {
      ushorts[i] = 0xfc00;
    } else {
      FLOAT[0] = array[i];
      var x = INT[0];

      var sgn = (x >>> 31) << 15;
      var exp = ((x << 1) >>> 24) - 127;
      var frac = (x >> 13) & ((1 << 10) - 1);

      if (exp < -24) {
        // round non-representable denormals to 0
        ushorts[i] = sgn;
      } else if (exp < -14) {
        // handle denormals
        var s = -14 - exp;
        ushorts[i] = sgn + ((frac + (1 << 10)) >> s);
      } else if (exp > 15) {
        // round overflow to +/- Infinity
        ushorts[i] = sgn + 0x7c00;
      } else {
        // otherwise convert directly
        ushorts[i] = sgn + ((exp + 15) << 10) + frac;
      }
    }
  }

  return ushorts
}

function isArrayLike (s) {
  return Array.isArray(s) || isTypedArray(s)
}

var isPow2$1 = function (v) {
  return !(v & (v - 1)) && (!!v)
};

var GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;

var GL_TEXTURE_2D$1 = 0x0DE1;
var GL_TEXTURE_CUBE_MAP$1 = 0x8513;
var GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 = 0x8515;

var GL_RGBA$1 = 0x1908;
var GL_ALPHA = 0x1906;
var GL_RGB = 0x1907;
var GL_LUMINANCE = 0x1909;
var GL_LUMINANCE_ALPHA = 0x190A;

var GL_RGBA4 = 0x8056;
var GL_RGB5_A1 = 0x8057;
var GL_RGB565 = 0x8D62;

var GL_UNSIGNED_SHORT_4_4_4_4$1 = 0x8033;
var GL_UNSIGNED_SHORT_5_5_5_1$1 = 0x8034;
var GL_UNSIGNED_SHORT_5_6_5$1 = 0x8363;
var GL_UNSIGNED_INT_24_8_WEBGL$1 = 0x84FA;

var GL_DEPTH_COMPONENT = 0x1902;
var GL_DEPTH_STENCIL = 0x84F9;

var GL_SRGB_EXT = 0x8C40;
var GL_SRGB_ALPHA_EXT = 0x8C42;

var GL_HALF_FLOAT_OES$1 = 0x8D61;

var GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
var GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
var GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
var GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;

var GL_COMPRESSED_RGB_ATC_WEBGL = 0x8C92;
var GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL = 0x8C93;
var GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL = 0x87EE;

var GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00;
var GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01;
var GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02;
var GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03;

var GL_COMPRESSED_RGB_ETC1_WEBGL = 0x8D64;

var GL_UNSIGNED_BYTE$5 = 0x1401;
var GL_UNSIGNED_SHORT$3 = 0x1403;
var GL_UNSIGNED_INT$3 = 0x1405;
var GL_FLOAT$4 = 0x1406;

var GL_TEXTURE_WRAP_S = 0x2802;
var GL_TEXTURE_WRAP_T = 0x2803;

var GL_REPEAT = 0x2901;
var GL_CLAMP_TO_EDGE$1 = 0x812F;
var GL_MIRRORED_REPEAT = 0x8370;

var GL_TEXTURE_MAG_FILTER = 0x2800;
var GL_TEXTURE_MIN_FILTER = 0x2801;

var GL_NEAREST$1 = 0x2600;
var GL_LINEAR = 0x2601;
var GL_NEAREST_MIPMAP_NEAREST$1 = 0x2700;
var GL_LINEAR_MIPMAP_NEAREST$1 = 0x2701;
var GL_NEAREST_MIPMAP_LINEAR$1 = 0x2702;
var GL_LINEAR_MIPMAP_LINEAR$1 = 0x2703;

var GL_GENERATE_MIPMAP_HINT = 0x8192;
var GL_DONT_CARE = 0x1100;
var GL_FASTEST = 0x1101;
var GL_NICEST = 0x1102;

var GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;

var GL_UNPACK_ALIGNMENT = 0x0CF5;
var GL_UNPACK_FLIP_Y_WEBGL = 0x9240;
var GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241;
var GL_UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;

var GL_BROWSER_DEFAULT_WEBGL = 0x9244;

var GL_TEXTURE0$1 = 0x84C0;

var MIPMAP_FILTERS = [
  GL_NEAREST_MIPMAP_NEAREST$1,
  GL_NEAREST_MIPMAP_LINEAR$1,
  GL_LINEAR_MIPMAP_NEAREST$1,
  GL_LINEAR_MIPMAP_LINEAR$1
];

var CHANNELS_FORMAT = [
  0,
  GL_LUMINANCE,
  GL_LUMINANCE_ALPHA,
  GL_RGB,
  GL_RGBA$1
];

var FORMAT_CHANNELS = {};
FORMAT_CHANNELS[GL_LUMINANCE] =
FORMAT_CHANNELS[GL_ALPHA] =
FORMAT_CHANNELS[GL_DEPTH_COMPONENT] = 1;
FORMAT_CHANNELS[GL_DEPTH_STENCIL] =
FORMAT_CHANNELS[GL_LUMINANCE_ALPHA] = 2;
FORMAT_CHANNELS[GL_RGB] =
FORMAT_CHANNELS[GL_SRGB_EXT] = 3;
FORMAT_CHANNELS[GL_RGBA$1] =
FORMAT_CHANNELS[GL_SRGB_ALPHA_EXT] = 4;

function objectName (str) {
  return '[object ' + str + ']'
}

var CANVAS_CLASS = objectName('HTMLCanvasElement');
var CONTEXT2D_CLASS = objectName('CanvasRenderingContext2D');
var BITMAP_CLASS = objectName('ImageBitmap');
var IMAGE_CLASS = objectName('HTMLImageElement');
var VIDEO_CLASS = objectName('HTMLVideoElement');

var PIXEL_CLASSES = Object.keys(arrayTypes).concat([
  CANVAS_CLASS,
  CONTEXT2D_CLASS,
  BITMAP_CLASS,
  IMAGE_CLASS,
  VIDEO_CLASS
]);

// for every texture type, store
// the size in bytes.
var TYPE_SIZES = [];
TYPE_SIZES[GL_UNSIGNED_BYTE$5] = 1;
TYPE_SIZES[GL_FLOAT$4] = 4;
TYPE_SIZES[GL_HALF_FLOAT_OES$1] = 2;

TYPE_SIZES[GL_UNSIGNED_SHORT$3] = 2;
TYPE_SIZES[GL_UNSIGNED_INT$3] = 4;

var FORMAT_SIZES_SPECIAL = [];
FORMAT_SIZES_SPECIAL[GL_RGBA4] = 2;
FORMAT_SIZES_SPECIAL[GL_RGB5_A1] = 2;
FORMAT_SIZES_SPECIAL[GL_RGB565] = 2;
FORMAT_SIZES_SPECIAL[GL_DEPTH_STENCIL] = 4;

FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_S3TC_DXT1_EXT] = 0.5;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT1_EXT] = 0.5;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT3_EXT] = 1;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT5_EXT] = 1;

FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_ATC_WEBGL] = 0.5;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL] = 1;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL] = 1;

FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG] = 0.5;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG] = 0.25;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG] = 0.5;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG] = 0.25;

FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_ETC1_WEBGL] = 0.5;

function isNumericArray (arr) {
  return (
    Array.isArray(arr) &&
    (arr.length === 0 ||
    typeof arr[0] === 'number'))
}

function isRectArray (arr) {
  if (!Array.isArray(arr)) {
    return false
  }
  var width = arr.length;
  if (width === 0 || !isArrayLike(arr[0])) {
    return false
  }
  return true
}

function classString (x) {
  return Object.prototype.toString.call(x)
}

function isCanvasElement (object) {
  return classString(object) === CANVAS_CLASS
}

function isContext2D (object) {
  return classString(object) === CONTEXT2D_CLASS
}

function isBitmap (object) {
  return classString(object) === BITMAP_CLASS
}

function isImageElement (object) {
  return classString(object) === IMAGE_CLASS
}

function isVideoElement (object) {
  return classString(object) === VIDEO_CLASS
}

function isPixelData (object) {
  if (!object) {
    return false
  }
  var className = classString(object);
  if (PIXEL_CLASSES.indexOf(className) >= 0) {
    return true
  }
  return (
    isNumericArray(object) ||
    isRectArray(object) ||
    isNDArrayLike(object))
}

function typedArrayCode$1 (data) {
  return arrayTypes[Object.prototype.toString.call(data)] | 0
}

function convertData (result, data) {
  var n = data.length;
  switch (result.type) {
    case GL_UNSIGNED_BYTE$5:
    case GL_UNSIGNED_SHORT$3:
    case GL_UNSIGNED_INT$3:
    case GL_FLOAT$4:
      var converted = pool.allocType(result.type, n);
      converted.set(data);
      result.data = converted;
      break

    case GL_HALF_FLOAT_OES$1:
      result.data = convertToHalfFloat(data);
      break

    default:
      check$1.raise('unsupported texture type, must specify a typed array');
  }
}

function preConvert (image, n) {
  return pool.allocType(
    image.type === GL_HALF_FLOAT_OES$1
      ? GL_FLOAT$4
      : image.type, n)
}

function postConvert (image, data) {
  if (image.type === GL_HALF_FLOAT_OES$1) {
    image.data = convertToHalfFloat(data);
    pool.freeType(data);
  } else {
    image.data = data;
  }
}

function transposeData (image, array, strideX, strideY, strideC, offset) {
  var w = image.width;
  var h = image.height;
  var c = image.channels;
  var n = w * h * c;
  var data = preConvert(image, n);

  var p = 0;
  for (var i = 0; i < h; ++i) {
    for (var j = 0; j < w; ++j) {
      for (var k = 0; k < c; ++k) {
        data[p++] = array[strideX * j + strideY * i + strideC * k + offset];
      }
    }
  }

  postConvert(image, data);
}

function getTextureSize (format, type, width, height, isMipmap, isCube) {
  var s;
  if (typeof FORMAT_SIZES_SPECIAL[format] !== 'undefined') {
    // we have a special array for dealing with weird color formats such as RGB5A1
    s = FORMAT_SIZES_SPECIAL[format];
  } else {
    s = FORMAT_CHANNELS[format] * TYPE_SIZES[type];
  }

  if (isCube) {
    s *= 6;
  }

  if (isMipmap) {
    // compute the total size of all the mipmaps.
    var total = 0;

    var w = width;
    while (w >= 1) {
      // we can only use mipmaps on a square image,
      // so we can simply use the width and ignore the height:
      total += s * w * w;
      w /= 2;
    }
    return total
  } else {
    return s * width * height
  }
}

function createTextureSet (
  gl, extensions, limits, reglPoll, contextState, stats, config) {
  // -------------------------------------------------------
  // Initialize constants and parameter tables here
  // -------------------------------------------------------
  var mipmapHint = {
    "don't care": GL_DONT_CARE,
    'dont care': GL_DONT_CARE,
    'nice': GL_NICEST,
    'fast': GL_FASTEST
  };

  var wrapModes = {
    'repeat': GL_REPEAT,
    'clamp': GL_CLAMP_TO_EDGE$1,
    'mirror': GL_MIRRORED_REPEAT
  };

  var magFilters = {
    'nearest': GL_NEAREST$1,
    'linear': GL_LINEAR
  };

  var minFilters = extend({
    'mipmap': GL_LINEAR_MIPMAP_LINEAR$1,
    'nearest mipmap nearest': GL_NEAREST_MIPMAP_NEAREST$1,
    'linear mipmap nearest': GL_LINEAR_MIPMAP_NEAREST$1,
    'nearest mipmap linear': GL_NEAREST_MIPMAP_LINEAR$1,
    'linear mipmap linear': GL_LINEAR_MIPMAP_LINEAR$1
  }, magFilters);

  var colorSpace = {
    'none': 0,
    'browser': GL_BROWSER_DEFAULT_WEBGL
  };

  var textureTypes = {
    'uint8': GL_UNSIGNED_BYTE$5,
    'rgba4': GL_UNSIGNED_SHORT_4_4_4_4$1,
    'rgb565': GL_UNSIGNED_SHORT_5_6_5$1,
    'rgb5 a1': GL_UNSIGNED_SHORT_5_5_5_1$1
  };

  var textureFormats = {
    'alpha': GL_ALPHA,
    'luminance': GL_LUMINANCE,
    'luminance alpha': GL_LUMINANCE_ALPHA,
    'rgb': GL_RGB,
    'rgba': GL_RGBA$1,
    'rgba4': GL_RGBA4,
    'rgb5 a1': GL_RGB5_A1,
    'rgb565': GL_RGB565
  };

  var compressedTextureFormats = {};

  if (extensions.ext_srgb) {
    textureFormats.srgb = GL_SRGB_EXT;
    textureFormats.srgba = GL_SRGB_ALPHA_EXT;
  }

  if (extensions.oes_texture_float) {
    textureTypes.float32 = textureTypes.float = GL_FLOAT$4;
  }

  if (extensions.oes_texture_half_float) {
    textureTypes['float16'] = textureTypes['half float'] = GL_HALF_FLOAT_OES$1;
  }

  if (extensions.webgl_depth_texture) {
    extend(textureFormats, {
      'depth': GL_DEPTH_COMPONENT,
      'depth stencil': GL_DEPTH_STENCIL
    });

    extend(textureTypes, {
      'uint16': GL_UNSIGNED_SHORT$3,
      'uint32': GL_UNSIGNED_INT$3,
      'depth stencil': GL_UNSIGNED_INT_24_8_WEBGL$1
    });
  }

  if (extensions.webgl_compressed_texture_s3tc) {
    extend(compressedTextureFormats, {
      'rgb s3tc dxt1': GL_COMPRESSED_RGB_S3TC_DXT1_EXT,
      'rgba s3tc dxt1': GL_COMPRESSED_RGBA_S3TC_DXT1_EXT,
      'rgba s3tc dxt3': GL_COMPRESSED_RGBA_S3TC_DXT3_EXT,
      'rgba s3tc dxt5': GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
    });
  }

  if (extensions.webgl_compressed_texture_atc) {
    extend(compressedTextureFormats, {
      'rgb atc': GL_COMPRESSED_RGB_ATC_WEBGL,
      'rgba atc explicit alpha': GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL,
      'rgba atc interpolated alpha': GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL
    });
  }

  if (extensions.webgl_compressed_texture_pvrtc) {
    extend(compressedTextureFormats, {
      'rgb pvrtc 4bppv1': GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG,
      'rgb pvrtc 2bppv1': GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG,
      'rgba pvrtc 4bppv1': GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,
      'rgba pvrtc 2bppv1': GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
    });
  }

  if (extensions.webgl_compressed_texture_etc1) {
    compressedTextureFormats['rgb etc1'] = GL_COMPRESSED_RGB_ETC1_WEBGL;
  }

  // Copy over all texture formats
  var supportedCompressedFormats = Array.prototype.slice.call(
    gl.getParameter(GL_COMPRESSED_TEXTURE_FORMATS));
  Object.keys(compressedTextureFormats).forEach(function (name) {
    var format = compressedTextureFormats[name];
    if (supportedCompressedFormats.indexOf(format) >= 0) {
      textureFormats[name] = format;
    }
  });

  var supportedFormats = Object.keys(textureFormats);
  limits.textureFormats = supportedFormats;

  // associate with every format string its
  // corresponding GL-value.
  var textureFormatsInvert = [];
  Object.keys(textureFormats).forEach(function (key) {
    var val = textureFormats[key];
    textureFormatsInvert[val] = key;
  });

  // associate with every type string its
  // corresponding GL-value.
  var textureTypesInvert = [];
  Object.keys(textureTypes).forEach(function (key) {
    var val = textureTypes[key];
    textureTypesInvert[val] = key;
  });

  var magFiltersInvert = [];
  Object.keys(magFilters).forEach(function (key) {
    var val = magFilters[key];
    magFiltersInvert[val] = key;
  });

  var minFiltersInvert = [];
  Object.keys(minFilters).forEach(function (key) {
    var val = minFilters[key];
    minFiltersInvert[val] = key;
  });

  var wrapModesInvert = [];
  Object.keys(wrapModes).forEach(function (key) {
    var val = wrapModes[key];
    wrapModesInvert[val] = key;
  });

  // colorFormats[] gives the format (channels) associated to an
  // internalformat
  var colorFormats = supportedFormats.reduce(function (color, key) {
    var glenum = textureFormats[key];
    if (glenum === GL_LUMINANCE ||
        glenum === GL_ALPHA ||
        glenum === GL_LUMINANCE ||
        glenum === GL_LUMINANCE_ALPHA ||
        glenum === GL_DEPTH_COMPONENT ||
        glenum === GL_DEPTH_STENCIL) {
      color[glenum] = glenum;
    } else if (glenum === GL_RGB5_A1 || key.indexOf('rgba') >= 0) {
      color[glenum] = GL_RGBA$1;
    } else {
      color[glenum] = GL_RGB;
    }
    return color
  }, {});

  function TexFlags () {
    // format info
    this.internalformat = GL_RGBA$1;
    this.format = GL_RGBA$1;
    this.type = GL_UNSIGNED_BYTE$5;
    this.compressed = false;

    // pixel storage
    this.premultiplyAlpha = false;
    this.flipY = false;
    this.unpackAlignment = 1;
    this.colorSpace = GL_BROWSER_DEFAULT_WEBGL;

    // shape info
    this.width = 0;
    this.height = 0;
    this.channels = 0;
  }

  function copyFlags (result, other) {
    result.internalformat = other.internalformat;
    result.format = other.format;
    result.type = other.type;
    result.compressed = other.compressed;

    result.premultiplyAlpha = other.premultiplyAlpha;
    result.flipY = other.flipY;
    result.unpackAlignment = other.unpackAlignment;
    result.colorSpace = other.colorSpace;

    result.width = other.width;
    result.height = other.height;
    result.channels = other.channels;
  }

  function parseFlags (flags, options) {
    if (typeof options !== 'object' || !options) {
      return
    }

    if ('premultiplyAlpha' in options) {
      check$1.type(options.premultiplyAlpha, 'boolean',
        'invalid premultiplyAlpha');
      flags.premultiplyAlpha = options.premultiplyAlpha;
    }

    if ('flipY' in options) {
      check$1.type(options.flipY, 'boolean',
        'invalid texture flip');
      flags.flipY = options.flipY;
    }

    if ('alignment' in options) {
      check$1.oneOf(options.alignment, [1, 2, 4, 8],
        'invalid texture unpack alignment');
      flags.unpackAlignment = options.alignment;
    }

    if ('colorSpace' in options) {
      check$1.parameter(options.colorSpace, colorSpace,
        'invalid colorSpace');
      flags.colorSpace = colorSpace[options.colorSpace];
    }

    if ('type' in options) {
      var type = options.type;
      check$1(extensions.oes_texture_float ||
        !(type === 'float' || type === 'float32'),
        'you must enable the OES_texture_float extension in order to use floating point textures.');
      check$1(extensions.oes_texture_half_float ||
        !(type === 'half float' || type === 'float16'),
        'you must enable the OES_texture_half_float extension in order to use 16-bit floating point textures.');
      check$1(extensions.webgl_depth_texture ||
        !(type === 'uint16' || type === 'uint32' || type === 'depth stencil'),
        'you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures.');
      check$1.parameter(type, textureTypes,
        'invalid texture type');
      flags.type = textureTypes[type];
    }

    var w = flags.width;
    var h = flags.height;
    var c = flags.channels;
    var hasChannels = false;
    if ('shape' in options) {
      check$1(Array.isArray(options.shape) && options.shape.length >= 2,
        'shape must be an array');
      w = options.shape[0];
      h = options.shape[1];
      if (options.shape.length === 3) {
        c = options.shape[2];
        check$1(c > 0 && c <= 4, 'invalid number of channels');
        hasChannels = true;
      }
      check$1(w >= 0 && w <= limits.maxTextureSize, 'invalid width');
      check$1(h >= 0 && h <= limits.maxTextureSize, 'invalid height');
    } else {
      if ('radius' in options) {
        w = h = options.radius;
        check$1(w >= 0 && w <= limits.maxTextureSize, 'invalid radius');
      }
      if ('width' in options) {
        w = options.width;
        check$1(w >= 0 && w <= limits.maxTextureSize, 'invalid width');
      }
      if ('height' in options) {
        h = options.height;
        check$1(h >= 0 && h <= limits.maxTextureSize, 'invalid height');
      }
      if ('channels' in options) {
        c = options.channels;
        check$1(c > 0 && c <= 4, 'invalid number of channels');
        hasChannels = true;
      }
    }
    flags.width = w | 0;
    flags.height = h | 0;
    flags.channels = c | 0;

    var hasFormat = false;
    if ('format' in options) {
      var formatStr = options.format;
      check$1(extensions.webgl_depth_texture ||
        !(formatStr === 'depth' || formatStr === 'depth stencil'),
        'you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures.');
      check$1.parameter(formatStr, textureFormats,
        'invalid texture format');
      var internalformat = flags.internalformat = textureFormats[formatStr];
      flags.format = colorFormats[internalformat];
      if (formatStr in textureTypes) {
        if (!('type' in options)) {
          flags.type = textureTypes[formatStr];
        }
      }
      if (formatStr in compressedTextureFormats) {
        flags.compressed = true;
      }
      hasFormat = true;
    }

    // Reconcile channels and format
    if (!hasChannels && hasFormat) {
      flags.channels = FORMAT_CHANNELS[flags.format];
    } else if (hasChannels && !hasFormat) {
      if (flags.channels !== CHANNELS_FORMAT[flags.format]) {
        flags.format = flags.internalformat = CHANNELS_FORMAT[flags.channels];
      }
    } else if (hasFormat && hasChannels) {
      check$1(
        flags.channels === FORMAT_CHANNELS[flags.format],
        'number of channels inconsistent with specified format');
    }
  }

  function setFlags (flags) {
    gl.pixelStorei(GL_UNPACK_FLIP_Y_WEBGL, flags.flipY);
    gl.pixelStorei(GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL, flags.premultiplyAlpha);
    gl.pixelStorei(GL_UNPACK_COLORSPACE_CONVERSION_WEBGL, flags.colorSpace);
    gl.pixelStorei(GL_UNPACK_ALIGNMENT, flags.unpackAlignment);
  }

  // -------------------------------------------------------
  // Tex image data
  // -------------------------------------------------------
  function TexImage () {
    TexFlags.call(this);

    this.xOffset = 0;
    this.yOffset = 0;

    // data
    this.data = null;
    this.needsFree = false;

    // html element
    this.element = null;

    // copyTexImage info
    this.needsCopy = false;
  }

  function parseImage (image, options) {
    var data = null;
    if (isPixelData(options)) {
      data = options;
    } else if (options) {
      check$1.type(options, 'object', 'invalid pixel data type');
      parseFlags(image, options);
      if ('x' in options) {
        image.xOffset = options.x | 0;
      }
      if ('y' in options) {
        image.yOffset = options.y | 0;
      }
      if (isPixelData(options.data)) {
        data = options.data;
      }
    }

    check$1(
      !image.compressed ||
      data instanceof Uint8Array,
      'compressed texture data must be stored in a uint8array');

    if (options.copy) {
      check$1(!data, 'can not specify copy and data field for the same texture');
      var viewW = contextState.viewportWidth;
      var viewH = contextState.viewportHeight;
      image.width = image.width || (viewW - image.xOffset);
      image.height = image.height || (viewH - image.yOffset);
      image.needsCopy = true;
      check$1(image.xOffset >= 0 && image.xOffset < viewW &&
            image.yOffset >= 0 && image.yOffset < viewH &&
            image.width > 0 && image.width <= viewW &&
            image.height > 0 && image.height <= viewH,
            'copy texture read out of bounds');
    } else if (!data) {
      image.width = image.width || 1;
      image.height = image.height || 1;
      image.channels = image.channels || 4;
    } else if (isTypedArray(data)) {
      image.channels = image.channels || 4;
      image.data = data;
      if (!('type' in options) && image.type === GL_UNSIGNED_BYTE$5) {
        image.type = typedArrayCode$1(data);
      }
    } else if (isNumericArray(data)) {
      image.channels = image.channels || 4;
      convertData(image, data);
      image.alignment = 1;
      image.needsFree = true;
    } else if (isNDArrayLike(data)) {
      var array = data.data;
      if (!Array.isArray(array) && image.type === GL_UNSIGNED_BYTE$5) {
        image.type = typedArrayCode$1(array);
      }
      var shape = data.shape;
      var stride = data.stride;
      var shapeX, shapeY, shapeC, strideX, strideY, strideC;
      if (shape.length === 3) {
        shapeC = shape[2];
        strideC = stride[2];
      } else {
        check$1(shape.length === 2, 'invalid ndarray pixel data, must be 2 or 3D');
        shapeC = 1;
        strideC = 1;
      }
      shapeX = shape[0];
      shapeY = shape[1];
      strideX = stride[0];
      strideY = stride[1];
      image.alignment = 1;
      image.width = shapeX;
      image.height = shapeY;
      image.channels = shapeC;
      image.format = image.internalformat = CHANNELS_FORMAT[shapeC];
      image.needsFree = true;
      transposeData(image, array, strideX, strideY, strideC, data.offset);
    } else if (isCanvasElement(data) || isContext2D(data)) {
      if (isCanvasElement(data)) {
        image.element = data;
      } else {
        image.element = data.canvas;
      }
      image.width = image.element.width;
      image.height = image.element.height;
      image.channels = 4;
    } else if (isBitmap(data)) {
      image.element = data;
      image.width = data.width;
      image.height = data.height;
      image.channels = 4;
    } else if (isImageElement(data)) {
      image.element = data;
      image.width = data.naturalWidth;
      image.height = data.naturalHeight;
      image.channels = 4;
    } else if (isVideoElement(data)) {
      image.element = data;
      image.width = data.videoWidth;
      image.height = data.videoHeight;
      image.channels = 4;
    } else if (isRectArray(data)) {
      var w = image.width || data[0].length;
      var h = image.height || data.length;
      var c = image.channels;
      if (isArrayLike(data[0][0])) {
        c = c || data[0][0].length;
      } else {
        c = c || 1;
      }
      var arrayShape = flattenUtils.shape(data);
      var n = 1;
      for (var dd = 0; dd < arrayShape.length; ++dd) {
        n *= arrayShape[dd];
      }
      var allocData = preConvert(image, n);
      flattenUtils.flatten(data, arrayShape, '', allocData);
      postConvert(image, allocData);
      image.alignment = 1;
      image.width = w;
      image.height = h;
      image.channels = c;
      image.format = image.internalformat = CHANNELS_FORMAT[c];
      image.needsFree = true;
    }

    if (image.type === GL_FLOAT$4) {
      check$1(limits.extensions.indexOf('oes_texture_float') >= 0,
        'oes_texture_float extension not enabled');
    } else if (image.type === GL_HALF_FLOAT_OES$1) {
      check$1(limits.extensions.indexOf('oes_texture_half_float') >= 0,
        'oes_texture_half_float extension not enabled');
    }

    // do compressed texture  validation here.
  }

  function setImage (info, target, miplevel) {
    var element = info.element;
    var data = info.data;
    var internalformat = info.internalformat;
    var format = info.format;
    var type = info.type;
    var width = info.width;
    var height = info.height;
    var channels = info.channels;

    setFlags(info);

    if (element) {
      gl.texImage2D(target, miplevel, format, format, type, element);
    } else if (info.compressed) {
      gl.compressedTexImage2D(target, miplevel, internalformat, width, height, 0, data);
    } else if (info.needsCopy) {
      reglPoll();
      gl.copyTexImage2D(
        target, miplevel, format, info.xOffset, info.yOffset, width, height, 0);
    } else {
      var nullData = !data;
      if (nullData) {
        data = pool.zero.allocType(type, width * height * channels);
      }

      gl.texImage2D(target, miplevel, format, width, height, 0, format, type, data);

      if (nullData && data) {
        pool.zero.freeType(data);
      }
    }
  }

  function setSubImage (info, target, x, y, miplevel) {
    var element = info.element;
    var data = info.data;
    var internalformat = info.internalformat;
    var format = info.format;
    var type = info.type;
    var width = info.width;
    var height = info.height;

    setFlags(info);

    if (element) {
      gl.texSubImage2D(
        target, miplevel, x, y, format, type, element);
    } else if (info.compressed) {
      gl.compressedTexSubImage2D(
        target, miplevel, x, y, internalformat, width, height, data);
    } else if (info.needsCopy) {
      reglPoll();
      gl.copyTexSubImage2D(
        target, miplevel, x, y, info.xOffset, info.yOffset, width, height);
    } else {
      gl.texSubImage2D(
        target, miplevel, x, y, width, height, format, type, data);
    }
  }

  // texImage pool
  var imagePool = [];

  function allocImage () {
    return imagePool.pop() || new TexImage()
  }

  function freeImage (image) {
    if (image.needsFree) {
      pool.freeType(image.data);
    }
    TexImage.call(image);
    imagePool.push(image);
  }

  // -------------------------------------------------------
  // Mip map
  // -------------------------------------------------------
  function MipMap () {
    TexFlags.call(this);

    this.genMipmaps = false;
    this.mipmapHint = GL_DONT_CARE;
    this.mipmask = 0;
    this.images = Array(16);
  }

  function parseMipMapFromShape (mipmap, width, height) {
    var img = mipmap.images[0] = allocImage();
    mipmap.mipmask = 1;
    img.width = mipmap.width = width;
    img.height = mipmap.height = height;
    img.channels = mipmap.channels = 4;
  }

  function parseMipMapFromObject (mipmap, options) {
    var imgData = null;
    if (isPixelData(options)) {
      imgData = mipmap.images[0] = allocImage();
      copyFlags(imgData, mipmap);
      parseImage(imgData, options);
      mipmap.mipmask = 1;
    } else {
      parseFlags(mipmap, options);
      if (Array.isArray(options.mipmap)) {
        var mipData = options.mipmap;
        for (var i = 0; i < mipData.length; ++i) {
          imgData = mipmap.images[i] = allocImage();
          copyFlags(imgData, mipmap);
          imgData.width >>= i;
          imgData.height >>= i;
          parseImage(imgData, mipData[i]);
          mipmap.mipmask |= (1 << i);
        }
      } else {
        imgData = mipmap.images[0] = allocImage();
        copyFlags(imgData, mipmap);
        parseImage(imgData, options);
        mipmap.mipmask = 1;
      }
    }
    copyFlags(mipmap, mipmap.images[0]);

    // For textures of the compressed format WEBGL_compressed_texture_s3tc
    // we must have that
    //
    // "When level equals zero width and height must be a multiple of 4.
    // When level is greater than 0 width and height must be 0, 1, 2 or a multiple of 4. "
    //
    // but we do not yet support having multiple mipmap levels for compressed textures,
    // so we only test for level zero.

    if (mipmap.compressed &&
        (mipmap.internalformat === GL_COMPRESSED_RGB_S3TC_DXT1_EXT) ||
        (mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT1_EXT) ||
        (mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT3_EXT) ||
        (mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT5_EXT)) {
      check$1(mipmap.width % 4 === 0 &&
            mipmap.height % 4 === 0,
            'for compressed texture formats, mipmap level 0 must have width and height that are a multiple of 4');
    }
  }

  function setMipMap (mipmap, target) {
    var images = mipmap.images;
    for (var i = 0; i < images.length; ++i) {
      if (!images[i]) {
        return
      }
      setImage(images[i], target, i);
    }
  }

  var mipPool = [];

  function allocMipMap () {
    var result = mipPool.pop() || new MipMap();
    TexFlags.call(result);
    result.mipmask = 0;
    for (var i = 0; i < 16; ++i) {
      result.images[i] = null;
    }
    return result
  }

  function freeMipMap (mipmap) {
    var images = mipmap.images;
    for (var i = 0; i < images.length; ++i) {
      if (images[i]) {
        freeImage(images[i]);
      }
      images[i] = null;
    }
    mipPool.push(mipmap);
  }

  // -------------------------------------------------------
  // Tex info
  // -------------------------------------------------------
  function TexInfo () {
    this.minFilter = GL_NEAREST$1;
    this.magFilter = GL_NEAREST$1;

    this.wrapS = GL_CLAMP_TO_EDGE$1;
    this.wrapT = GL_CLAMP_TO_EDGE$1;

    this.anisotropic = 1;

    this.genMipmaps = false;
    this.mipmapHint = GL_DONT_CARE;
  }

  function parseTexInfo (info, options) {
    if ('min' in options) {
      var minFilter = options.min;
      check$1.parameter(minFilter, minFilters);
      info.minFilter = minFilters[minFilter];
      if (MIPMAP_FILTERS.indexOf(info.minFilter) >= 0 && !('faces' in options)) {
        info.genMipmaps = true;
      }
    }

    if ('mag' in options) {
      var magFilter = options.mag;
      check$1.parameter(magFilter, magFilters);
      info.magFilter = magFilters[magFilter];
    }

    var wrapS = info.wrapS;
    var wrapT = info.wrapT;
    if ('wrap' in options) {
      var wrap = options.wrap;
      if (typeof wrap === 'string') {
        check$1.parameter(wrap, wrapModes);
        wrapS = wrapT = wrapModes[wrap];
      } else if (Array.isArray(wrap)) {
        check$1.parameter(wrap[0], wrapModes);
        check$1.parameter(wrap[1], wrapModes);
        wrapS = wrapModes[wrap[0]];
        wrapT = wrapModes[wrap[1]];
      }
    } else {
      if ('wrapS' in options) {
        var optWrapS = options.wrapS;
        check$1.parameter(optWrapS, wrapModes);
        wrapS = wrapModes[optWrapS];
      }
      if ('wrapT' in options) {
        var optWrapT = options.wrapT;
        check$1.parameter(optWrapT, wrapModes);
        wrapT = wrapModes[optWrapT];
      }
    }
    info.wrapS = wrapS;
    info.wrapT = wrapT;

    if ('anisotropic' in options) {
      var anisotropic = options.anisotropic;
      check$1(typeof anisotropic === 'number' &&
         anisotropic >= 1 && anisotropic <= limits.maxAnisotropic,
        'aniso samples must be between 1 and ');
      info.anisotropic = options.anisotropic;
    }

    if ('mipmap' in options) {
      var hasMipMap = false;
      switch (typeof options.mipmap) {
        case 'string':
          check$1.parameter(options.mipmap, mipmapHint,
            'invalid mipmap hint');
          info.mipmapHint = mipmapHint[options.mipmap];
          info.genMipmaps = true;
          hasMipMap = true;
          break

        case 'boolean':
          hasMipMap = info.genMipmaps = options.mipmap;
          break

        case 'object':
          check$1(Array.isArray(options.mipmap), 'invalid mipmap type');
          info.genMipmaps = false;
          hasMipMap = true;
          break

        default:
          check$1.raise('invalid mipmap type');
      }
      if (hasMipMap && !('min' in options)) {
        info.minFilter = GL_NEAREST_MIPMAP_NEAREST$1;
      }
    }
  }

  function setTexInfo (info, target) {
    gl.texParameteri(target, GL_TEXTURE_MIN_FILTER, info.minFilter);
    gl.texParameteri(target, GL_TEXTURE_MAG_FILTER, info.magFilter);
    gl.texParameteri(target, GL_TEXTURE_WRAP_S, info.wrapS);
    gl.texParameteri(target, GL_TEXTURE_WRAP_T, info.wrapT);
    if (extensions.ext_texture_filter_anisotropic) {
      gl.texParameteri(target, GL_TEXTURE_MAX_ANISOTROPY_EXT, info.anisotropic);
    }
    if (info.genMipmaps) {
      gl.hint(GL_GENERATE_MIPMAP_HINT, info.mipmapHint);
      gl.generateMipmap(target);
    }
  }

  // -------------------------------------------------------
  // Full texture object
  // -------------------------------------------------------
  var textureCount = 0;
  var textureSet = {};
  var numTexUnits = limits.maxTextureUnits;
  var textureUnits = Array(numTexUnits).map(function () {
    return null
  });

  function REGLTexture (target) {
    TexFlags.call(this);
    this.mipmask = 0;
    this.internalformat = GL_RGBA$1;

    this.id = textureCount++;

    this.refCount = 1;

    this.target = target;
    this.texture = gl.createTexture();

    this.unit = -1;
    this.bindCount = 0;

    this.texInfo = new TexInfo();

    if (config.profile) {
      this.stats = {size: 0};
    }
  }

  function tempBind (texture) {
    gl.activeTexture(GL_TEXTURE0$1);
    gl.bindTexture(texture.target, texture.texture);
  }

  function tempRestore () {
    var prev = textureUnits[0];
    if (prev) {
      gl.bindTexture(prev.target, prev.texture);
    } else {
      gl.bindTexture(GL_TEXTURE_2D$1, null);
    }
  }

  function destroy (texture) {
    var handle = texture.texture;
    check$1(handle, 'must not double destroy texture');
    var unit = texture.unit;
    var target = texture.target;
    if (unit >= 0) {
      gl.activeTexture(GL_TEXTURE0$1 + unit);
      gl.bindTexture(target, null);
      textureUnits[unit] = null;
    }
    gl.deleteTexture(handle);
    texture.texture = null;
    texture.params = null;
    texture.pixels = null;
    texture.refCount = 0;
    delete textureSet[texture.id];
    stats.textureCount--;
  }

  extend(REGLTexture.prototype, {
    bind: function () {
      var texture = this;
      texture.bindCount += 1;
      var unit = texture.unit;
      if (unit < 0) {
        for (var i = 0; i < numTexUnits; ++i) {
          var other = textureUnits[i];
          if (other) {
            if (other.bindCount > 0) {
              continue
            }
            other.unit = -1;
          }
          textureUnits[i] = texture;
          unit = i;
          break
        }
        if (unit >= numTexUnits) {
          check$1.raise('insufficient number of texture units');
        }
        if (config.profile && stats.maxTextureUnits < (unit + 1)) {
          stats.maxTextureUnits = unit + 1; // +1, since the units are zero-based
        }
        texture.unit = unit;
        gl.activeTexture(GL_TEXTURE0$1 + unit);
        gl.bindTexture(texture.target, texture.texture);
      }
      return unit
    },

    unbind: function () {
      this.bindCount -= 1;
    },

    decRef: function () {
      if (--this.refCount <= 0) {
        destroy(this);
      }
    }
  });

  function createTexture2D (a, b) {
    var texture = new REGLTexture(GL_TEXTURE_2D$1);
    textureSet[texture.id] = texture;
    stats.textureCount++;

    function reglTexture2D (a, b) {
      var texInfo = texture.texInfo;
      TexInfo.call(texInfo);
      var mipData = allocMipMap();

      if (typeof a === 'number') {
        if (typeof b === 'number') {
          parseMipMapFromShape(mipData, a | 0, b | 0);
        } else {
          parseMipMapFromShape(mipData, a | 0, a | 0);
        }
      } else if (a) {
        check$1.type(a, 'object', 'invalid arguments to regl.texture');
        parseTexInfo(texInfo, a);
        parseMipMapFromObject(mipData, a);
      } else {
        // empty textures get assigned a default shape of 1x1
        parseMipMapFromShape(mipData, 1, 1);
      }

      if (texInfo.genMipmaps) {
        mipData.mipmask = (mipData.width << 1) - 1;
      }
      texture.mipmask = mipData.mipmask;

      copyFlags(texture, mipData);

      check$1.texture2D(texInfo, mipData, limits);
      texture.internalformat = mipData.internalformat;

      reglTexture2D.width = mipData.width;
      reglTexture2D.height = mipData.height;

      tempBind(texture);
      setMipMap(mipData, GL_TEXTURE_2D$1);
      setTexInfo(texInfo, GL_TEXTURE_2D$1);
      tempRestore();

      freeMipMap(mipData);

      if (config.profile) {
        texture.stats.size = getTextureSize(
          texture.internalformat,
          texture.type,
          mipData.width,
          mipData.height,
          texInfo.genMipmaps,
          false);
      }
      reglTexture2D.format = textureFormatsInvert[texture.internalformat];
      reglTexture2D.type = textureTypesInvert[texture.type];

      reglTexture2D.mag = magFiltersInvert[texInfo.magFilter];
      reglTexture2D.min = minFiltersInvert[texInfo.minFilter];

      reglTexture2D.wrapS = wrapModesInvert[texInfo.wrapS];
      reglTexture2D.wrapT = wrapModesInvert[texInfo.wrapT];

      return reglTexture2D
    }

    function subimage (image, x_, y_, level_) {
      check$1(!!image, 'must specify image data');

      var x = x_ | 0;
      var y = y_ | 0;
      var level = level_ | 0;

      var imageData = allocImage();
      copyFlags(imageData, texture);
      imageData.width = 0;
      imageData.height = 0;
      parseImage(imageData, image);
      imageData.width = imageData.width || ((texture.width >> level) - x);
      imageData.height = imageData.height || ((texture.height >> level) - y);

      check$1(
        texture.type === imageData.type &&
        texture.format === imageData.format &&
        texture.internalformat === imageData.internalformat,
        'incompatible format for texture.subimage');
      check$1(
        x >= 0 && y >= 0 &&
        x + imageData.width <= texture.width &&
        y + imageData.height <= texture.height,
        'texture.subimage write out of bounds');
      check$1(
        texture.mipmask & (1 << level),
        'missing mipmap data');
      check$1(
        imageData.data || imageData.element || imageData.needsCopy,
        'missing image data');

      tempBind(texture);
      setSubImage(imageData, GL_TEXTURE_2D$1, x, y, level);
      tempRestore();

      freeImage(imageData);

      return reglTexture2D
    }

    function resize (w_, h_) {
      var w = w_ | 0;
      var h = (h_ | 0) || w;
      if (w === texture.width && h === texture.height) {
        return reglTexture2D
      }

      reglTexture2D.width = texture.width = w;
      reglTexture2D.height = texture.height = h;

      tempBind(texture);

      var data;
      var channels = texture.channels;
      var type = texture.type;

      for (var i = 0; texture.mipmask >> i; ++i) {
        var _w = w >> i;
        var _h = h >> i;
        if (!_w || !_h) break
        data = pool.zero.allocType(type, _w * _h * channels);
        gl.texImage2D(
          GL_TEXTURE_2D$1,
          i,
          texture.format,
          _w,
          _h,
          0,
          texture.format,
          texture.type,
          data);
        if (data) pool.zero.freeType(data);
      }
      tempRestore();

      // also, recompute the texture size.
      if (config.profile) {
        texture.stats.size = getTextureSize(
          texture.internalformat,
          texture.type,
          w,
          h,
          false,
          false);
      }

      return reglTexture2D
    }

    reglTexture2D(a, b);

    reglTexture2D.subimage = subimage;
    reglTexture2D.resize = resize;
    reglTexture2D._reglType = 'texture2d';
    reglTexture2D._texture = texture;
    if (config.profile) {
      reglTexture2D.stats = texture.stats;
    }
    reglTexture2D.destroy = function () {
      texture.decRef();
    };

    return reglTexture2D
  }

  function createTextureCube (a0, a1, a2, a3, a4, a5) {
    var texture = new REGLTexture(GL_TEXTURE_CUBE_MAP$1);
    textureSet[texture.id] = texture;
    stats.cubeCount++;

    var faces = new Array(6);

    function reglTextureCube (a0, a1, a2, a3, a4, a5) {
      var i;
      var texInfo = texture.texInfo;
      TexInfo.call(texInfo);
      for (i = 0; i < 6; ++i) {
        faces[i] = allocMipMap();
      }

      if (typeof a0 === 'number' || !a0) {
        var s = (a0 | 0) || 1;
        for (i = 0; i < 6; ++i) {
          parseMipMapFromShape(faces[i], s, s);
        }
      } else if (typeof a0 === 'object') {
        if (a1) {
          parseMipMapFromObject(faces[0], a0);
          parseMipMapFromObject(faces[1], a1);
          parseMipMapFromObject(faces[2], a2);
          parseMipMapFromObject(faces[3], a3);
          parseMipMapFromObject(faces[4], a4);
          parseMipMapFromObject(faces[5], a5);
        } else {
          parseTexInfo(texInfo, a0);
          parseFlags(texture, a0);
          if ('faces' in a0) {
            var face_input = a0.faces;
            check$1(Array.isArray(face_input) && face_input.length === 6,
              'cube faces must be a length 6 array');
            for (i = 0; i < 6; ++i) {
              check$1(typeof face_input[i] === 'object' && !!face_input[i],
                'invalid input for cube map face');
              copyFlags(faces[i], texture);
              parseMipMapFromObject(faces[i], face_input[i]);
            }
          } else {
            for (i = 0; i < 6; ++i) {
              parseMipMapFromObject(faces[i], a0);
            }
          }
        }
      } else {
        check$1.raise('invalid arguments to cube map');
      }

      copyFlags(texture, faces[0]);

      if (!limits.npotTextureCube) {
        check$1(isPow2$1(texture.width) && isPow2$1(texture.height), 'your browser does not support non power or two texture dimensions');
      }

      if (texInfo.genMipmaps) {
        texture.mipmask = (faces[0].width << 1) - 1;
      } else {
        texture.mipmask = faces[0].mipmask;
      }

      check$1.textureCube(texture, texInfo, faces, limits);
      texture.internalformat = faces[0].internalformat;

      reglTextureCube.width = faces[0].width;
      reglTextureCube.height = faces[0].height;

      tempBind(texture);
      for (i = 0; i < 6; ++i) {
        setMipMap(faces[i], GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + i);
      }
      setTexInfo(texInfo, GL_TEXTURE_CUBE_MAP$1);
      tempRestore();

      if (config.profile) {
        texture.stats.size = getTextureSize(
          texture.internalformat,
          texture.type,
          reglTextureCube.width,
          reglTextureCube.height,
          texInfo.genMipmaps,
          true);
      }

      reglTextureCube.format = textureFormatsInvert[texture.internalformat];
      reglTextureCube.type = textureTypesInvert[texture.type];

      reglTextureCube.mag = magFiltersInvert[texInfo.magFilter];
      reglTextureCube.min = minFiltersInvert[texInfo.minFilter];

      reglTextureCube.wrapS = wrapModesInvert[texInfo.wrapS];
      reglTextureCube.wrapT = wrapModesInvert[texInfo.wrapT];

      for (i = 0; i < 6; ++i) {
        freeMipMap(faces[i]);
      }

      return reglTextureCube
    }

    function subimage (face, image, x_, y_, level_) {
      check$1(!!image, 'must specify image data');
      check$1(typeof face === 'number' && face === (face | 0) &&
        face >= 0 && face < 6, 'invalid face');

      var x = x_ | 0;
      var y = y_ | 0;
      var level = level_ | 0;

      var imageData = allocImage();
      copyFlags(imageData, texture);
      imageData.width = 0;
      imageData.height = 0;
      parseImage(imageData, image);
      imageData.width = imageData.width || ((texture.width >> level) - x);
      imageData.height = imageData.height || ((texture.height >> level) - y);

      check$1(
        texture.type === imageData.type &&
        texture.format === imageData.format &&
        texture.internalformat === imageData.internalformat,
        'incompatible format for texture.subimage');
      check$1(
        x >= 0 && y >= 0 &&
        x + imageData.width <= texture.width &&
        y + imageData.height <= texture.height,
        'texture.subimage write out of bounds');
      check$1(
        texture.mipmask & (1 << level),
        'missing mipmap data');
      check$1(
        imageData.data || imageData.element || imageData.needsCopy,
        'missing image data');

      tempBind(texture);
      setSubImage(imageData, GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + face, x, y, level);
      tempRestore();

      freeImage(imageData);

      return reglTextureCube
    }

    function resize (radius_) {
      var radius = radius_ | 0;
      if (radius === texture.width) {
        return
      }

      reglTextureCube.width = texture.width = radius;
      reglTextureCube.height = texture.height = radius;

      tempBind(texture);
      for (var i = 0; i < 6; ++i) {
        for (var j = 0; texture.mipmask >> j; ++j) {
          gl.texImage2D(
            GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + i,
            j,
            texture.format,
            radius >> j,
            radius >> j,
            0,
            texture.format,
            texture.type,
            null);
        }
      }
      tempRestore();

      if (config.profile) {
        texture.stats.size = getTextureSize(
          texture.internalformat,
          texture.type,
          reglTextureCube.width,
          reglTextureCube.height,
          false,
          true);
      }

      return reglTextureCube
    }

    reglTextureCube(a0, a1, a2, a3, a4, a5);

    reglTextureCube.subimage = subimage;
    reglTextureCube.resize = resize;
    reglTextureCube._reglType = 'textureCube';
    reglTextureCube._texture = texture;
    if (config.profile) {
      reglTextureCube.stats = texture.stats;
    }
    reglTextureCube.destroy = function () {
      texture.decRef();
    };

    return reglTextureCube
  }

  // Called when regl is destroyed
  function destroyTextures () {
    for (var i = 0; i < numTexUnits; ++i) {
      gl.activeTexture(GL_TEXTURE0$1 + i);
      gl.bindTexture(GL_TEXTURE_2D$1, null);
      textureUnits[i] = null;
    }
    values(textureSet).forEach(destroy);

    stats.cubeCount = 0;
    stats.textureCount = 0;
  }

  if (config.profile) {
    stats.getTotalTextureSize = function () {
      var total = 0;
      Object.keys(textureSet).forEach(function (key) {
        total += textureSet[key].stats.size;
      });
      return total
    };
  }

  function restoreTextures () {
    for (var i = 0; i < numTexUnits; ++i) {
      var tex = textureUnits[i];
      if (tex) {
        tex.bindCount = 0;
        tex.unit = -1;
        textureUnits[i] = null;
      }
    }

    values(textureSet).forEach(function (texture) {
      texture.texture = gl.createTexture();
      gl.bindTexture(texture.target, texture.texture);
      for (var i = 0; i < 32; ++i) {
        if ((texture.mipmask & (1 << i)) === 0) {
          continue
        }
        if (texture.target === GL_TEXTURE_2D$1) {
          gl.texImage2D(GL_TEXTURE_2D$1,
            i,
            texture.internalformat,
            texture.width >> i,
            texture.height >> i,
            0,
            texture.internalformat,
            texture.type,
            null);
        } else {
          for (var j = 0; j < 6; ++j) {
            gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + j,
              i,
              texture.internalformat,
              texture.width >> i,
              texture.height >> i,
              0,
              texture.internalformat,
              texture.type,
              null);
          }
        }
      }
      setTexInfo(texture.texInfo, texture.target);
    });
  }

  return {
    create2D: createTexture2D,
    createCube: createTextureCube,
    clear: destroyTextures,
    getTexture: function (wrapper) {
      return null
    },
    restore: restoreTextures
  }
}

var GL_RENDERBUFFER = 0x8D41;

var GL_RGBA4$1 = 0x8056;
var GL_RGB5_A1$1 = 0x8057;
var GL_RGB565$1 = 0x8D62;
var GL_DEPTH_COMPONENT16 = 0x81A5;
var GL_STENCIL_INDEX8 = 0x8D48;
var GL_DEPTH_STENCIL$1 = 0x84F9;

var GL_SRGB8_ALPHA8_EXT = 0x8C43;

var GL_RGBA32F_EXT = 0x8814;

var GL_RGBA16F_EXT = 0x881A;
var GL_RGB16F_EXT = 0x881B;

var FORMAT_SIZES = [];

FORMAT_SIZES[GL_RGBA4$1] = 2;
FORMAT_SIZES[GL_RGB5_A1$1] = 2;
FORMAT_SIZES[GL_RGB565$1] = 2;

FORMAT_SIZES[GL_DEPTH_COMPONENT16] = 2;
FORMAT_SIZES[GL_STENCIL_INDEX8] = 1;
FORMAT_SIZES[GL_DEPTH_STENCIL$1] = 4;

FORMAT_SIZES[GL_SRGB8_ALPHA8_EXT] = 4;
FORMAT_SIZES[GL_RGBA32F_EXT] = 16;
FORMAT_SIZES[GL_RGBA16F_EXT] = 8;
FORMAT_SIZES[GL_RGB16F_EXT] = 6;

function getRenderbufferSize (format, width, height) {
  return FORMAT_SIZES[format] * width * height
}

var wrapRenderbuffers = function (gl, extensions, limits, stats, config) {
  var formatTypes = {
    'rgba4': GL_RGBA4$1,
    'rgb565': GL_RGB565$1,
    'rgb5 a1': GL_RGB5_A1$1,
    'depth': GL_DEPTH_COMPONENT16,
    'stencil': GL_STENCIL_INDEX8,
    'depth stencil': GL_DEPTH_STENCIL$1
  };

  if (extensions.ext_srgb) {
    formatTypes['srgba'] = GL_SRGB8_ALPHA8_EXT;
  }

  if (extensions.ext_color_buffer_half_float) {
    formatTypes['rgba16f'] = GL_RGBA16F_EXT;
    formatTypes['rgb16f'] = GL_RGB16F_EXT;
  }

  if (extensions.webgl_color_buffer_float) {
    formatTypes['rgba32f'] = GL_RGBA32F_EXT;
  }

  var formatTypesInvert = [];
  Object.keys(formatTypes).forEach(function (key) {
    var val = formatTypes[key];
    formatTypesInvert[val] = key;
  });

  var renderbufferCount = 0;
  var renderbufferSet = {};

  function REGLRenderbuffer (renderbuffer) {
    this.id = renderbufferCount++;
    this.refCount = 1;

    this.renderbuffer = renderbuffer;

    this.format = GL_RGBA4$1;
    this.width = 0;
    this.height = 0;

    if (config.profile) {
      this.stats = {size: 0};
    }
  }

  REGLRenderbuffer.prototype.decRef = function () {
    if (--this.refCount <= 0) {
      destroy(this);
    }
  };

  function destroy (rb) {
    var handle = rb.renderbuffer;
    check$1(handle, 'must not double destroy renderbuffer');
    gl.bindRenderbuffer(GL_RENDERBUFFER, null);
    gl.deleteRenderbuffer(handle);
    rb.renderbuffer = null;
    rb.refCount = 0;
    delete renderbufferSet[rb.id];
    stats.renderbufferCount--;
  }

  function createRenderbuffer (a, b) {
    var renderbuffer = new REGLRenderbuffer(gl.createRenderbuffer());
    renderbufferSet[renderbuffer.id] = renderbuffer;
    stats.renderbufferCount++;

    function reglRenderbuffer (a, b) {
      var w = 0;
      var h = 0;
      var format = GL_RGBA4$1;

      if (typeof a === 'object' && a) {
        var options = a;
        if ('shape' in options) {
          var shape = options.shape;
          check$1(Array.isArray(shape) && shape.length >= 2,
            'invalid renderbuffer shape');
          w = shape[0] | 0;
          h = shape[1] | 0;
        } else {
          if ('radius' in options) {
            w = h = options.radius | 0;
          }
          if ('width' in options) {
            w = options.width | 0;
          }
          if ('height' in options) {
            h = options.height | 0;
          }
        }
        if ('format' in options) {
          check$1.parameter(options.format, formatTypes,
            'invalid renderbuffer format');
          format = formatTypes[options.format];
        }
      } else if (typeof a === 'number') {
        w = a | 0;
        if (typeof b === 'number') {
          h = b | 0;
        } else {
          h = w;
        }
      } else if (!a) {
        w = h = 1;
      } else {
        check$1.raise('invalid arguments to renderbuffer constructor');
      }

      // check shape
      check$1(
        w > 0 && h > 0 &&
        w <= limits.maxRenderbufferSize && h <= limits.maxRenderbufferSize,
        'invalid renderbuffer size');

      if (w === renderbuffer.width &&
          h === renderbuffer.height &&
          format === renderbuffer.format) {
        return
      }

      reglRenderbuffer.width = renderbuffer.width = w;
      reglRenderbuffer.height = renderbuffer.height = h;
      renderbuffer.format = format;

      gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.renderbuffer);
      gl.renderbufferStorage(GL_RENDERBUFFER, format, w, h);

      check$1(
        gl.getError() === 0,
        'invalid render buffer format');

      if (config.profile) {
        renderbuffer.stats.size = getRenderbufferSize(renderbuffer.format, renderbuffer.width, renderbuffer.height);
      }
      reglRenderbuffer.format = formatTypesInvert[renderbuffer.format];

      return reglRenderbuffer
    }

    function resize (w_, h_) {
      var w = w_ | 0;
      var h = (h_ | 0) || w;

      if (w === renderbuffer.width && h === renderbuffer.height) {
        return reglRenderbuffer
      }

      // check shape
      check$1(
        w > 0 && h > 0 &&
        w <= limits.maxRenderbufferSize && h <= limits.maxRenderbufferSize,
        'invalid renderbuffer size');

      reglRenderbuffer.width = renderbuffer.width = w;
      reglRenderbuffer.height = renderbuffer.height = h;

      gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.renderbuffer);
      gl.renderbufferStorage(GL_RENDERBUFFER, renderbuffer.format, w, h);

      check$1(
        gl.getError() === 0,
        'invalid render buffer format');

      // also, recompute size.
      if (config.profile) {
        renderbuffer.stats.size = getRenderbufferSize(
          renderbuffer.format, renderbuffer.width, renderbuffer.height);
      }

      return reglRenderbuffer
    }

    reglRenderbuffer(a, b);

    reglRenderbuffer.resize = resize;
    reglRenderbuffer._reglType = 'renderbuffer';
    reglRenderbuffer._renderbuffer = renderbuffer;
    if (config.profile) {
      reglRenderbuffer.stats = renderbuffer.stats;
    }
    reglRenderbuffer.destroy = function () {
      renderbuffer.decRef();
    };

    return reglRenderbuffer
  }

  if (config.profile) {
    stats.getTotalRenderbufferSize = function () {
      var total = 0;
      Object.keys(renderbufferSet).forEach(function (key) {
        total += renderbufferSet[key].stats.size;
      });
      return total
    };
  }

  function restoreRenderbuffers () {
    values(renderbufferSet).forEach(function (rb) {
      rb.renderbuffer = gl.createRenderbuffer();
      gl.bindRenderbuffer(GL_RENDERBUFFER, rb.renderbuffer);
      gl.renderbufferStorage(GL_RENDERBUFFER, rb.format, rb.width, rb.height);
    });
    gl.bindRenderbuffer(GL_RENDERBUFFER, null);
  }

  return {
    create: createRenderbuffer,
    clear: function () {
      values(renderbufferSet).forEach(destroy);
    },
    restore: restoreRenderbuffers
  }
};

// We store these constants so that the minifier can inline them
var GL_FRAMEBUFFER$1 = 0x8D40;
var GL_RENDERBUFFER$1 = 0x8D41;

var GL_TEXTURE_2D$2 = 0x0DE1;
var GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 = 0x8515;

var GL_COLOR_ATTACHMENT0$1 = 0x8CE0;
var GL_DEPTH_ATTACHMENT = 0x8D00;
var GL_STENCIL_ATTACHMENT = 0x8D20;
var GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;

var GL_FRAMEBUFFER_COMPLETE$1 = 0x8CD5;
var GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
var GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
var GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;
var GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;

var GL_HALF_FLOAT_OES$2 = 0x8D61;
var GL_UNSIGNED_BYTE$6 = 0x1401;
var GL_FLOAT$5 = 0x1406;

var GL_RGB$1 = 0x1907;
var GL_RGBA$2 = 0x1908;

var GL_DEPTH_COMPONENT$1 = 0x1902;

var colorTextureFormatEnums = [
  GL_RGB$1,
  GL_RGBA$2
];

// for every texture format, store
// the number of channels
var textureFormatChannels = [];
textureFormatChannels[GL_RGBA$2] = 4;
textureFormatChannels[GL_RGB$1] = 3;

// for every texture type, store
// the size in bytes.
var textureTypeSizes = [];
textureTypeSizes[GL_UNSIGNED_BYTE$6] = 1;
textureTypeSizes[GL_FLOAT$5] = 4;
textureTypeSizes[GL_HALF_FLOAT_OES$2] = 2;

var GL_RGBA4$2 = 0x8056;
var GL_RGB5_A1$2 = 0x8057;
var GL_RGB565$2 = 0x8D62;
var GL_DEPTH_COMPONENT16$1 = 0x81A5;
var GL_STENCIL_INDEX8$1 = 0x8D48;
var GL_DEPTH_STENCIL$2 = 0x84F9;

var GL_SRGB8_ALPHA8_EXT$1 = 0x8C43;

var GL_RGBA32F_EXT$1 = 0x8814;

var GL_RGBA16F_EXT$1 = 0x881A;
var GL_RGB16F_EXT$1 = 0x881B;

var colorRenderbufferFormatEnums = [
  GL_RGBA4$2,
  GL_RGB5_A1$2,
  GL_RGB565$2,
  GL_SRGB8_ALPHA8_EXT$1,
  GL_RGBA16F_EXT$1,
  GL_RGB16F_EXT$1,
  GL_RGBA32F_EXT$1
];

var statusCode = {};
statusCode[GL_FRAMEBUFFER_COMPLETE$1] = 'complete';
statusCode[GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT] = 'incomplete attachment';
statusCode[GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS] = 'incomplete dimensions';
statusCode[GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT] = 'incomplete, missing attachment';
statusCode[GL_FRAMEBUFFER_UNSUPPORTED] = 'unsupported';

function wrapFBOState (
  gl,
  extensions,
  limits,
  textureState,
  renderbufferState,
  stats) {
  var framebufferState = {
    cur: null,
    next: null,
    dirty: false,
    setFBO: null
  };

  var colorTextureFormats = ['rgba'];
  var colorRenderbufferFormats = ['rgba4', 'rgb565', 'rgb5 a1'];

  if (extensions.ext_srgb) {
    colorRenderbufferFormats.push('srgba');
  }

  if (extensions.ext_color_buffer_half_float) {
    colorRenderbufferFormats.push('rgba16f', 'rgb16f');
  }

  if (extensions.webgl_color_buffer_float) {
    colorRenderbufferFormats.push('rgba32f');
  }

  var colorTypes = ['uint8'];
  if (extensions.oes_texture_half_float) {
    colorTypes.push('half float', 'float16');
  }
  if (extensions.oes_texture_float) {
    colorTypes.push('float', 'float32');
  }

  function FramebufferAttachment (target, texture, renderbuffer) {
    this.target = target;
    this.texture = texture;
    this.renderbuffer = renderbuffer;

    var w = 0;
    var h = 0;
    if (texture) {
      w = texture.width;
      h = texture.height;
    } else if (renderbuffer) {
      w = renderbuffer.width;
      h = renderbuffer.height;
    }
    this.width = w;
    this.height = h;
  }

  function decRef (attachment) {
    if (attachment) {
      if (attachment.texture) {
        attachment.texture._texture.decRef();
      }
      if (attachment.renderbuffer) {
        attachment.renderbuffer._renderbuffer.decRef();
      }
    }
  }

  function incRefAndCheckShape (attachment, width, height) {
    if (!attachment) {
      return
    }
    if (attachment.texture) {
      var texture = attachment.texture._texture;
      var tw = Math.max(1, texture.width);
      var th = Math.max(1, texture.height);
      check$1(tw === width && th === height,
        'inconsistent width/height for supplied texture');
      texture.refCount += 1;
    } else {
      var renderbuffer = attachment.renderbuffer._renderbuffer;
      check$1(
        renderbuffer.width === width && renderbuffer.height === height,
        'inconsistent width/height for renderbuffer');
      renderbuffer.refCount += 1;
    }
  }

  function attach (location, attachment) {
    if (attachment) {
      if (attachment.texture) {
        gl.framebufferTexture2D(
          GL_FRAMEBUFFER$1,
          location,
          attachment.target,
          attachment.texture._texture.texture,
          0);
      } else {
        gl.framebufferRenderbuffer(
          GL_FRAMEBUFFER$1,
          location,
          GL_RENDERBUFFER$1,
          attachment.renderbuffer._renderbuffer.renderbuffer);
      }
    }
  }

  function parseAttachment (attachment) {
    var target = GL_TEXTURE_2D$2;
    var texture = null;
    var renderbuffer = null;

    var data = attachment;
    if (typeof attachment === 'object') {
      data = attachment.data;
      if ('target' in attachment) {
        target = attachment.target | 0;
      }
    }

    check$1.type(data, 'function', 'invalid attachment data');

    var type = data._reglType;
    if (type === 'texture2d') {
      texture = data;
      check$1(target === GL_TEXTURE_2D$2);
    } else if (type === 'textureCube') {
      texture = data;
      check$1(
        target >= GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 &&
        target < GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 + 6,
        'invalid cube map target');
    } else if (type === 'renderbuffer') {
      renderbuffer = data;
      target = GL_RENDERBUFFER$1;
    } else {
      check$1.raise('invalid regl object for attachment');
    }

    return new FramebufferAttachment(target, texture, renderbuffer)
  }

  function allocAttachment (
    width,
    height,
    isTexture,
    format,
    type) {
    if (isTexture) {
      var texture = textureState.create2D({
        width: width,
        height: height,
        format: format,
        type: type
      });
      texture._texture.refCount = 0;
      return new FramebufferAttachment(GL_TEXTURE_2D$2, texture, null)
    } else {
      var rb = renderbufferState.create({
        width: width,
        height: height,
        format: format
      });
      rb._renderbuffer.refCount = 0;
      return new FramebufferAttachment(GL_RENDERBUFFER$1, null, rb)
    }
  }

  function unwrapAttachment (attachment) {
    return attachment && (attachment.texture || attachment.renderbuffer)
  }

  function resizeAttachment (attachment, w, h) {
    if (attachment) {
      if (attachment.texture) {
        attachment.texture.resize(w, h);
      } else if (attachment.renderbuffer) {
        attachment.renderbuffer.resize(w, h);
      }
      attachment.width = w;
      attachment.height = h;
    }
  }

  var framebufferCount = 0;
  var framebufferSet = {};

  function REGLFramebuffer () {
    this.id = framebufferCount++;
    framebufferSet[this.id] = this;

    this.framebuffer = gl.createFramebuffer();
    this.width = 0;
    this.height = 0;

    this.colorAttachments = [];
    this.depthAttachment = null;
    this.stencilAttachment = null;
    this.depthStencilAttachment = null;
  }

  function decFBORefs (framebuffer) {
    framebuffer.colorAttachments.forEach(decRef);
    decRef(framebuffer.depthAttachment);
    decRef(framebuffer.stencilAttachment);
    decRef(framebuffer.depthStencilAttachment);
  }

  function destroy (framebuffer) {
    var handle = framebuffer.framebuffer;
    check$1(handle, 'must not double destroy framebuffer');
    gl.deleteFramebuffer(handle);
    framebuffer.framebuffer = null;
    stats.framebufferCount--;
    delete framebufferSet[framebuffer.id];
  }

  function updateFramebuffer (framebuffer) {
    var i;

    gl.bindFramebuffer(GL_FRAMEBUFFER$1, framebuffer.framebuffer);
    var colorAttachments = framebuffer.colorAttachments;
    for (i = 0; i < colorAttachments.length; ++i) {
      attach(GL_COLOR_ATTACHMENT0$1 + i, colorAttachments[i]);
    }
    for (i = colorAttachments.length; i < limits.maxColorAttachments; ++i) {
      gl.framebufferTexture2D(
        GL_FRAMEBUFFER$1,
        GL_COLOR_ATTACHMENT0$1 + i,
        GL_TEXTURE_2D$2,
        null,
        0);
    }

    gl.framebufferTexture2D(
      GL_FRAMEBUFFER$1,
      GL_DEPTH_STENCIL_ATTACHMENT,
      GL_TEXTURE_2D$2,
      null,
      0);
    gl.framebufferTexture2D(
      GL_FRAMEBUFFER$1,
      GL_DEPTH_ATTACHMENT,
      GL_TEXTURE_2D$2,
      null,
      0);
    gl.framebufferTexture2D(
      GL_FRAMEBUFFER$1,
      GL_STENCIL_ATTACHMENT,
      GL_TEXTURE_2D$2,
      null,
      0);

    attach(GL_DEPTH_ATTACHMENT, framebuffer.depthAttachment);
    attach(GL_STENCIL_ATTACHMENT, framebuffer.stencilAttachment);
    attach(GL_DEPTH_STENCIL_ATTACHMENT, framebuffer.depthStencilAttachment);

    // Check status code
    var status = gl.checkFramebufferStatus(GL_FRAMEBUFFER$1);
    if (!gl.isContextLost() && status !== GL_FRAMEBUFFER_COMPLETE$1) {
      check$1.raise('framebuffer configuration not supported, status = ' +
        statusCode[status]);
    }

    gl.bindFramebuffer(GL_FRAMEBUFFER$1, framebufferState.next ? framebufferState.next.framebuffer : null);
    framebufferState.cur = framebufferState.next;

    // FIXME: Clear error code here.  This is a work around for a bug in
    // headless-gl
    gl.getError();
  }

  function createFBO (a0, a1) {
    var framebuffer = new REGLFramebuffer();
    stats.framebufferCount++;

    function reglFramebuffer (a, b) {
      var i;

      check$1(framebufferState.next !== framebuffer,
        'can not update framebuffer which is currently in use');

      var width = 0;
      var height = 0;

      var needsDepth = true;
      var needsStencil = true;

      var colorBuffer = null;
      var colorTexture = true;
      var colorFormat = 'rgba';
      var colorType = 'uint8';
      var colorCount = 1;

      var depthBuffer = null;
      var stencilBuffer = null;
      var depthStencilBuffer = null;
      var depthStencilTexture = false;

      if (typeof a === 'number') {
        width = a | 0;
        height = (b | 0) || width;
      } else if (!a) {
        width = height = 1;
      } else {
        check$1.type(a, 'object', 'invalid arguments for framebuffer');
        var options = a;

        if ('shape' in options) {
          var shape = options.shape;
          check$1(Array.isArray(shape) && shape.length >= 2,
            'invalid shape for framebuffer');
          width = shape[0];
          height = shape[1];
        } else {
          if ('radius' in options) {
            width = height = options.radius;
          }
          if ('width' in options) {
            width = options.width;
          }
          if ('height' in options) {
            height = options.height;
          }
        }

        if ('color' in options ||
            'colors' in options) {
          colorBuffer =
            options.color ||
            options.colors;
          if (Array.isArray(colorBuffer)) {
            check$1(
              colorBuffer.length === 1 || extensions.webgl_draw_buffers,
              'multiple render targets not supported');
          }
        }

        if (!colorBuffer) {
          if ('colorCount' in options) {
            colorCount = options.colorCount | 0;
            check$1(colorCount > 0, 'invalid color buffer count');
          }

          if ('colorTexture' in options) {
            colorTexture = !!options.colorTexture;
            colorFormat = 'rgba4';
          }

          if ('colorType' in options) {
            colorType = options.colorType;
            if (!colorTexture) {
              if (colorType === 'half float' || colorType === 'float16') {
                check$1(extensions.ext_color_buffer_half_float,
                  'you must enable EXT_color_buffer_half_float to use 16-bit render buffers');
                colorFormat = 'rgba16f';
              } else if (colorType === 'float' || colorType === 'float32') {
                check$1(extensions.webgl_color_buffer_float,
                  'you must enable WEBGL_color_buffer_float in order to use 32-bit floating point renderbuffers');
                colorFormat = 'rgba32f';
              }
            } else {
              check$1(extensions.oes_texture_float ||
                !(colorType === 'float' || colorType === 'float32'),
                'you must enable OES_texture_float in order to use floating point framebuffer objects');
              check$1(extensions.oes_texture_half_float ||
                !(colorType === 'half float' || colorType === 'float16'),
                'you must enable OES_texture_half_float in order to use 16-bit floating point framebuffer objects');
            }
            check$1.oneOf(colorType, colorTypes, 'invalid color type');
          }

          if ('colorFormat' in options) {
            colorFormat = options.colorFormat;
            if (colorTextureFormats.indexOf(colorFormat) >= 0) {
              colorTexture = true;
            } else if (colorRenderbufferFormats.indexOf(colorFormat) >= 0) {
              colorTexture = false;
            } else {
              if (colorTexture) {
                check$1.oneOf(
                  options.colorFormat, colorTextureFormats,
                  'invalid color format for texture');
              } else {
                check$1.oneOf(
                  options.colorFormat, colorRenderbufferFormats,
                  'invalid color format for renderbuffer');
              }
            }
          }
        }

        if ('depthTexture' in options || 'depthStencilTexture' in options) {
          depthStencilTexture = !!(options.depthTexture ||
            options.depthStencilTexture);
          check$1(!depthStencilTexture || extensions.webgl_depth_texture,
            'webgl_depth_texture extension not supported');
        }

        if ('depth' in options) {
          if (typeof options.depth === 'boolean') {
            needsDepth = options.depth;
          } else {
            depthBuffer = options.depth;
            needsStencil = false;
          }
        }

        if ('stencil' in options) {
          if (typeof options.stencil === 'boolean') {
            needsStencil = options.stencil;
          } else {
            stencilBuffer = options.stencil;
            needsDepth = false;
          }
        }

        if ('depthStencil' in options) {
          if (typeof options.depthStencil === 'boolean') {
            needsDepth = needsStencil = options.depthStencil;
          } else {
            depthStencilBuffer = options.depthStencil;
            needsDepth = false;
            needsStencil = false;
          }
        }
      }

      // parse attachments
      var colorAttachments = null;
      var depthAttachment = null;
      var stencilAttachment = null;
      var depthStencilAttachment = null;

      // Set up color attachments
      if (Array.isArray(colorBuffer)) {
        colorAttachments = colorBuffer.map(parseAttachment);
      } else if (colorBuffer) {
        colorAttachments = [parseAttachment(colorBuffer)];
      } else {
        colorAttachments = new Array(colorCount);
        for (i = 0; i < colorCount; ++i) {
          colorAttachments[i] = allocAttachment(
            width,
            height,
            colorTexture,
            colorFormat,
            colorType);
        }
      }

      check$1(extensions.webgl_draw_buffers || colorAttachments.length <= 1,
        'you must enable the WEBGL_draw_buffers extension in order to use multiple color buffers.');
      check$1(colorAttachments.length <= limits.maxColorAttachments,
        'too many color attachments, not supported');

      width = width || colorAttachments[0].width;
      height = height || colorAttachments[0].height;

      if (depthBuffer) {
        depthAttachment = parseAttachment(depthBuffer);
      } else if (needsDepth && !needsStencil) {
        depthAttachment = allocAttachment(
          width,
          height,
          depthStencilTexture,
          'depth',
          'uint32');
      }

      if (stencilBuffer) {
        stencilAttachment = parseAttachment(stencilBuffer);
      } else if (needsStencil && !needsDepth) {
        stencilAttachment = allocAttachment(
          width,
          height,
          false,
          'stencil',
          'uint8');
      }

      if (depthStencilBuffer) {
        depthStencilAttachment = parseAttachment(depthStencilBuffer);
      } else if (!depthBuffer && !stencilBuffer && needsStencil && needsDepth) {
        depthStencilAttachment = allocAttachment(
          width,
          height,
          depthStencilTexture,
          'depth stencil',
          'depth stencil');
      }

      check$1(
        (!!depthBuffer) + (!!stencilBuffer) + (!!depthStencilBuffer) <= 1,
        'invalid framebuffer configuration, can specify exactly one depth/stencil attachment');

      var commonColorAttachmentSize = null;

      for (i = 0; i < colorAttachments.length; ++i) {
        incRefAndCheckShape(colorAttachments[i], width, height);
        check$1(!colorAttachments[i] ||
          (colorAttachments[i].texture &&
            colorTextureFormatEnums.indexOf(colorAttachments[i].texture._texture.format) >= 0) ||
          (colorAttachments[i].renderbuffer &&
            colorRenderbufferFormatEnums.indexOf(colorAttachments[i].renderbuffer._renderbuffer.format) >= 0),
          'framebuffer color attachment ' + i + ' is invalid');

        if (colorAttachments[i] && colorAttachments[i].texture) {
          var colorAttachmentSize =
              textureFormatChannels[colorAttachments[i].texture._texture.format] *
              textureTypeSizes[colorAttachments[i].texture._texture.type];

          if (commonColorAttachmentSize === null) {
            commonColorAttachmentSize = colorAttachmentSize;
          } else {
            // We need to make sure that all color attachments have the same number of bitplanes
            // (that is, the same numer of bits per pixel)
            // This is required by the GLES2.0 standard. See the beginning of Chapter 4 in that document.
            check$1(commonColorAttachmentSize === colorAttachmentSize,
                  'all color attachments much have the same number of bits per pixel.');
          }
        }
      }
      incRefAndCheckShape(depthAttachment, width, height);
      check$1(!depthAttachment ||
        (depthAttachment.texture &&
          depthAttachment.texture._texture.format === GL_DEPTH_COMPONENT$1) ||
        (depthAttachment.renderbuffer &&
          depthAttachment.renderbuffer._renderbuffer.format === GL_DEPTH_COMPONENT16$1),
        'invalid depth attachment for framebuffer object');
      incRefAndCheckShape(stencilAttachment, width, height);
      check$1(!stencilAttachment ||
        (stencilAttachment.renderbuffer &&
          stencilAttachment.renderbuffer._renderbuffer.format === GL_STENCIL_INDEX8$1),
        'invalid stencil attachment for framebuffer object');
      incRefAndCheckShape(depthStencilAttachment, width, height);
      check$1(!depthStencilAttachment ||
        (depthStencilAttachment.texture &&
          depthStencilAttachment.texture._texture.format === GL_DEPTH_STENCIL$2) ||
        (depthStencilAttachment.renderbuffer &&
          depthStencilAttachment.renderbuffer._renderbuffer.format === GL_DEPTH_STENCIL$2),
        'invalid depth-stencil attachment for framebuffer object');

      // decrement references
      decFBORefs(framebuffer);

      framebuffer.width = width;
      framebuffer.height = height;

      framebuffer.colorAttachments = colorAttachments;
      framebuffer.depthAttachment = depthAttachment;
      framebuffer.stencilAttachment = stencilAttachment;
      framebuffer.depthStencilAttachment = depthStencilAttachment;

      reglFramebuffer.color = colorAttachments.map(unwrapAttachment);
      reglFramebuffer.depth = unwrapAttachment(depthAttachment);
      reglFramebuffer.stencil = unwrapAttachment(stencilAttachment);
      reglFramebuffer.depthStencil = unwrapAttachment(depthStencilAttachment);

      reglFramebuffer.width = framebuffer.width;
      reglFramebuffer.height = framebuffer.height;

      updateFramebuffer(framebuffer);

      return reglFramebuffer
    }

    function resize (w_, h_) {
      check$1(framebufferState.next !== framebuffer,
        'can not resize a framebuffer which is currently in use');

      var w = Math.max(w_ | 0, 1);
      var h = Math.max((h_ | 0) || w, 1);
      if (w === framebuffer.width && h === framebuffer.height) {
        return reglFramebuffer
      }

      // resize all buffers
      var colorAttachments = framebuffer.colorAttachments;
      for (var i = 0; i < colorAttachments.length; ++i) {
        resizeAttachment(colorAttachments[i], w, h);
      }
      resizeAttachment(framebuffer.depthAttachment, w, h);
      resizeAttachment(framebuffer.stencilAttachment, w, h);
      resizeAttachment(framebuffer.depthStencilAttachment, w, h);

      framebuffer.width = reglFramebuffer.width = w;
      framebuffer.height = reglFramebuffer.height = h;

      updateFramebuffer(framebuffer);

      return reglFramebuffer
    }

    reglFramebuffer(a0, a1);

    return extend(reglFramebuffer, {
      resize: resize,
      _reglType: 'framebuffer',
      _framebuffer: framebuffer,
      destroy: function () {
        destroy(framebuffer);
        decFBORefs(framebuffer);
      },
      use: function (block) {
        framebufferState.setFBO({
          framebuffer: reglFramebuffer
        }, block);
      }
    })
  }

  function createCubeFBO (options) {
    var faces = Array(6);

    function reglFramebufferCube (a) {
      var i;

      check$1(faces.indexOf(framebufferState.next) < 0,
        'can not update framebuffer which is currently in use');

      var params = {
        color: null
      };

      var radius = 0;

      var colorBuffer = null;
      var colorFormat = 'rgba';
      var colorType = 'uint8';
      var colorCount = 1;

      if (typeof a === 'number') {
        radius = a | 0;
      } else if (!a) {
        radius = 1;
      } else {
        check$1.type(a, 'object', 'invalid arguments for framebuffer');
        var options = a;

        if ('shape' in options) {
          var shape = options.shape;
          check$1(
            Array.isArray(shape) && shape.length >= 2,
            'invalid shape for framebuffer');
          check$1(
            shape[0] === shape[1],
            'cube framebuffer must be square');
          radius = shape[0];
        } else {
          if ('radius' in options) {
            radius = options.radius | 0;
          }
          if ('width' in options) {
            radius = options.width | 0;
            if ('height' in options) {
              check$1(options.height === radius, 'must be square');
            }
          } else if ('height' in options) {
            radius = options.height | 0;
          }
        }

        if ('color' in options ||
            'colors' in options) {
          colorBuffer =
            options.color ||
            options.colors;
          if (Array.isArray(colorBuffer)) {
            check$1(
              colorBuffer.length === 1 || extensions.webgl_draw_buffers,
              'multiple render targets not supported');
          }
        }

        if (!colorBuffer) {
          if ('colorCount' in options) {
            colorCount = options.colorCount | 0;
            check$1(colorCount > 0, 'invalid color buffer count');
          }

          if ('colorType' in options) {
            check$1.oneOf(
              options.colorType, colorTypes,
              'invalid color type');
            colorType = options.colorType;
          }

          if ('colorFormat' in options) {
            colorFormat = options.colorFormat;
            check$1.oneOf(
              options.colorFormat, colorTextureFormats,
              'invalid color format for texture');
          }
        }

        if ('depth' in options) {
          params.depth = options.depth;
        }

        if ('stencil' in options) {
          params.stencil = options.stencil;
        }

        if ('depthStencil' in options) {
          params.depthStencil = options.depthStencil;
        }
      }

      var colorCubes;
      if (colorBuffer) {
        if (Array.isArray(colorBuffer)) {
          colorCubes = [];
          for (i = 0; i < colorBuffer.length; ++i) {
            colorCubes[i] = colorBuffer[i];
          }
        } else {
          colorCubes = [ colorBuffer ];
        }
      } else {
        colorCubes = Array(colorCount);
        var cubeMapParams = {
          radius: radius,
          format: colorFormat,
          type: colorType
        };
        for (i = 0; i < colorCount; ++i) {
          colorCubes[i] = textureState.createCube(cubeMapParams);
        }
      }

      // Check color cubes
      params.color = Array(colorCubes.length);
      for (i = 0; i < colorCubes.length; ++i) {
        var cube = colorCubes[i];
        check$1(
          typeof cube === 'function' && cube._reglType === 'textureCube',
          'invalid cube map');
        radius = radius || cube.width;
        check$1(
          cube.width === radius && cube.height === radius,
          'invalid cube map shape');
        params.color[i] = {
          target: GL_TEXTURE_CUBE_MAP_POSITIVE_X$2,
          data: colorCubes[i]
        };
      }

      for (i = 0; i < 6; ++i) {
        for (var j = 0; j < colorCubes.length; ++j) {
          params.color[j].target = GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 + i;
        }
        // reuse depth-stencil attachments across all cube maps
        if (i > 0) {
          params.depth = faces[0].depth;
          params.stencil = faces[0].stencil;
          params.depthStencil = faces[0].depthStencil;
        }
        if (faces[i]) {
          (faces[i])(params);
        } else {
          faces[i] = createFBO(params);
        }
      }

      return extend(reglFramebufferCube, {
        width: radius,
        height: radius,
        color: colorCubes
      })
    }

    function resize (radius_) {
      var i;
      var radius = radius_ | 0;
      check$1(radius > 0 && radius <= limits.maxCubeMapSize,
        'invalid radius for cube fbo');

      if (radius === reglFramebufferCube.width) {
        return reglFramebufferCube
      }

      var colors = reglFramebufferCube.color;
      for (i = 0; i < colors.length; ++i) {
        colors[i].resize(radius);
      }

      for (i = 0; i < 6; ++i) {
        faces[i].resize(radius);
      }

      reglFramebufferCube.width = reglFramebufferCube.height = radius;

      return reglFramebufferCube
    }

    reglFramebufferCube(options);

    return extend(reglFramebufferCube, {
      faces: faces,
      resize: resize,
      _reglType: 'framebufferCube',
      destroy: function () {
        faces.forEach(function (f) {
          f.destroy();
        });
      }
    })
  }

  function restoreFramebuffers () {
    framebufferState.cur = null;
    framebufferState.next = null;
    framebufferState.dirty = true;
    values(framebufferSet).forEach(function (fb) {
      fb.framebuffer = gl.createFramebuffer();
      updateFramebuffer(fb);
    });
  }

  return extend(framebufferState, {
    getFramebuffer: function (object) {
      if (typeof object === 'function' && object._reglType === 'framebuffer') {
        var fbo = object._framebuffer;
        if (fbo instanceof REGLFramebuffer) {
          return fbo
        }
      }
      return null
    },
    create: createFBO,
    createCube: createCubeFBO,
    clear: function () {
      values(framebufferSet).forEach(destroy);
    },
    restore: restoreFramebuffers
  })
}

var GL_FLOAT$6 = 5126;

function AttributeRecord () {
  this.state = 0;

  this.x = 0.0;
  this.y = 0.0;
  this.z = 0.0;
  this.w = 0.0;

  this.buffer = null;
  this.size = 0;
  this.normalized = false;
  this.type = GL_FLOAT$6;
  this.offset = 0;
  this.stride = 0;
  this.divisor = 0;
}

function wrapAttributeState (
  gl,
  extensions,
  limits,
  stringStore) {
  var NUM_ATTRIBUTES = limits.maxAttributes;
  var attributeBindings = new Array(NUM_ATTRIBUTES);
  for (var i = 0; i < NUM_ATTRIBUTES; ++i) {
    attributeBindings[i] = new AttributeRecord();
  }

  return {
    Record: AttributeRecord,
    scope: {},
    state: attributeBindings
  }
}

var GL_FRAGMENT_SHADER = 35632;
var GL_VERTEX_SHADER = 35633;

var GL_ACTIVE_UNIFORMS = 0x8B86;
var GL_ACTIVE_ATTRIBUTES = 0x8B89;

function wrapShaderState (gl, stringStore, stats, config) {
  // ===================================================
  // glsl compilation and linking
  // ===================================================
  var fragShaders = {};
  var vertShaders = {};

  function ActiveInfo (name, id, location, info) {
    this.name = name;
    this.id = id;
    this.location = location;
    this.info = info;
  }

  function insertActiveInfo (list, info) {
    for (var i = 0; i < list.length; ++i) {
      if (list[i].id === info.id) {
        list[i].location = info.location;
        return
      }
    }
    list.push(info);
  }

  function getShader (type, id, command) {
    var cache = type === GL_FRAGMENT_SHADER ? fragShaders : vertShaders;
    var shader = cache[id];

    if (!shader) {
      var source = stringStore.str(id);
      shader = gl.createShader(type);
      gl.shaderSource(shader, source);
      gl.compileShader(shader);
      check$1.shaderError(gl, shader, source, type, command);
      cache[id] = shader;
    }

    return shader
  }

  // ===================================================
  // program linking
  // ===================================================
  var programCache = {};
  var programList = [];

  var PROGRAM_COUNTER = 0;

  function REGLProgram (fragId, vertId) {
    this.id = PROGRAM_COUNTER++;
    this.fragId = fragId;
    this.vertId = vertId;
    this.program = null;
    this.uniforms = [];
    this.attributes = [];

    if (config.profile) {
      this.stats = {
        uniformsCount: 0,
        attributesCount: 0
      };
    }
  }

  function linkProgram (desc, command) {
    var i, info;

    // -------------------------------
    // compile & link
    // -------------------------------
    var fragShader = getShader(GL_FRAGMENT_SHADER, desc.fragId);
    var vertShader = getShader(GL_VERTEX_SHADER, desc.vertId);

    var program = desc.program = gl.createProgram();
    gl.attachShader(program, fragShader);
    gl.attachShader(program, vertShader);
    gl.linkProgram(program);
    check$1.linkError(
      gl,
      program,
      stringStore.str(desc.fragId),
      stringStore.str(desc.vertId),
      command);

    // -------------------------------
    // grab uniforms
    // -------------------------------
    var numUniforms = gl.getProgramParameter(program, GL_ACTIVE_UNIFORMS);
    if (config.profile) {
      desc.stats.uniformsCount = numUniforms;
    }
    var uniforms = desc.uniforms;
    for (i = 0; i < numUniforms; ++i) {
      info = gl.getActiveUniform(program, i);
      if (info) {
        if (info.size > 1) {
          for (var j = 0; j < info.size; ++j) {
            var name = info.name.replace('[0]', '[' + j + ']');
            insertActiveInfo(uniforms, new ActiveInfo(
              name,
              stringStore.id(name),
              gl.getUniformLocation(program, name),
              info));
          }
        } else {
          insertActiveInfo(uniforms, new ActiveInfo(
            info.name,
            stringStore.id(info.name),
            gl.getUniformLocation(program, info.name),
            info));
        }
      }
    }

    // -------------------------------
    // grab attributes
    // -------------------------------
    var numAttributes = gl.getProgramParameter(program, GL_ACTIVE_ATTRIBUTES);
    if (config.profile) {
      desc.stats.attributesCount = numAttributes;
    }

    var attributes = desc.attributes;
    for (i = 0; i < numAttributes; ++i) {
      info = gl.getActiveAttrib(program, i);
      if (info) {
        insertActiveInfo(attributes, new ActiveInfo(
          info.name,
          stringStore.id(info.name),
          gl.getAttribLocation(program, info.name),
          info));
      }
    }
  }

  if (config.profile) {
    stats.getMaxUniformsCount = function () {
      var m = 0;
      programList.forEach(function (desc) {
        if (desc.stats.uniformsCount > m) {
          m = desc.stats.uniformsCount;
        }
      });
      return m
    };

    stats.getMaxAttributesCount = function () {
      var m = 0;
      programList.forEach(function (desc) {
        if (desc.stats.attributesCount > m) {
          m = desc.stats.attributesCount;
        }
      });
      return m
    };
  }

  function restoreShaders () {
    fragShaders = {};
    vertShaders = {};
    for (var i = 0; i < programList.length; ++i) {
      linkProgram(programList[i]);
    }
  }

  return {
    clear: function () {
      var deleteShader = gl.deleteShader.bind(gl);
      values(fragShaders).forEach(deleteShader);
      fragShaders = {};
      values(vertShaders).forEach(deleteShader);
      vertShaders = {};

      programList.forEach(function (desc) {
        gl.deleteProgram(desc.program);
      });
      programList.length = 0;
      programCache = {};

      stats.shaderCount = 0;
    },

    program: function (vertId, fragId, command) {
      check$1.command(vertId >= 0, 'missing vertex shader', command);
      check$1.command(fragId >= 0, 'missing fragment shader', command);

      var cache = programCache[fragId];
      if (!cache) {
        cache = programCache[fragId] = {};
      }
      var program = cache[vertId];
      if (!program) {
        program = new REGLProgram(fragId, vertId);
        stats.shaderCount++;

        linkProgram(program, command);
        cache[vertId] = program;
        programList.push(program);
      }
      return program
    },

    restore: restoreShaders,

    shader: getShader,

    frag: -1,
    vert: -1
  }
}

var GL_RGBA$3 = 6408;
var GL_UNSIGNED_BYTE$7 = 5121;
var GL_PACK_ALIGNMENT = 0x0D05;
var GL_FLOAT$7 = 0x1406; // 5126

function wrapReadPixels (
  gl,
  framebufferState,
  reglPoll,
  context,
  glAttributes,
  extensions,
  limits) {
  function readPixelsImpl (input) {
    var type;
    if (framebufferState.next === null) {
      check$1(
        glAttributes.preserveDrawingBuffer,
        'you must create a webgl context with "preserveDrawingBuffer":true in order to read pixels from the drawing buffer');
      type = GL_UNSIGNED_BYTE$7;
    } else {
      check$1(
        framebufferState.next.colorAttachments[0].texture !== null,
          'You cannot read from a renderbuffer');
      type = framebufferState.next.colorAttachments[0].texture._texture.type;

      if (extensions.oes_texture_float) {
        check$1(
          type === GL_UNSIGNED_BYTE$7 || type === GL_FLOAT$7,
          'Reading from a framebuffer is only allowed for the types \'uint8\' and \'float\'');

        if (type === GL_FLOAT$7) {
          check$1(limits.readFloat, 'Reading \'float\' values is not permitted in your browser. For a fallback, please see: https://www.npmjs.com/package/glsl-read-float');
        }
      } else {
        check$1(
          type === GL_UNSIGNED_BYTE$7,
          'Reading from a framebuffer is only allowed for the type \'uint8\'');
      }
    }

    var x = 0;
    var y = 0;
    var width = context.framebufferWidth;
    var height = context.framebufferHeight;
    var data = null;

    if (isTypedArray(input)) {
      data = input;
    } else if (input) {
      check$1.type(input, 'object', 'invalid arguments to regl.read()');
      x = input.x | 0;
      y = input.y | 0;
      check$1(
        x >= 0 && x < context.framebufferWidth,
        'invalid x offset for regl.read');
      check$1(
        y >= 0 && y < context.framebufferHeight,
        'invalid y offset for regl.read');
      width = (input.width || (context.framebufferWidth - x)) | 0;
      height = (input.height || (context.framebufferHeight - y)) | 0;
      data = input.data || null;
    }

    // sanity check input.data
    if (data) {
      if (type === GL_UNSIGNED_BYTE$7) {
        check$1(
          data instanceof Uint8Array,
          'buffer must be \'Uint8Array\' when reading from a framebuffer of type \'uint8\'');
      } else if (type === GL_FLOAT$7) {
        check$1(
          data instanceof Float32Array,
          'buffer must be \'Float32Array\' when reading from a framebuffer of type \'float\'');
      }
    }

    check$1(
      width > 0 && width + x <= context.framebufferWidth,
      'invalid width for read pixels');
    check$1(
      height > 0 && height + y <= context.framebufferHeight,
      'invalid height for read pixels');

    // Update WebGL state
    reglPoll();

    // Compute size
    var size = width * height * 4;

    // Allocate data
    if (!data) {
      if (type === GL_UNSIGNED_BYTE$7) {
        data = new Uint8Array(size);
      } else if (type === GL_FLOAT$7) {
        data = data || new Float32Array(size);
      }
    }

    // Type check
    check$1.isTypedArray(data, 'data buffer for regl.read() must be a typedarray');
    check$1(data.byteLength >= size, 'data buffer for regl.read() too small');

    // Run read pixels
    gl.pixelStorei(GL_PACK_ALIGNMENT, 4);
    gl.readPixels(x, y, width, height, GL_RGBA$3,
                  type,
                  data);

    return data
  }

  function readPixelsFBO (options) {
    var result;
    framebufferState.setFBO({
      framebuffer: options.framebuffer
    }, function () {
      result = readPixelsImpl(options);
    });
    return result
  }

  function readPixels (options) {
    if (!options || !('framebuffer' in options)) {
      return readPixelsImpl(options)
    } else {
      return readPixelsFBO(options)
    }
  }

  return readPixels
}

function slice (x) {
  return Array.prototype.slice.call(x)
}

function join (x) {
  return slice(x).join('')
}

function createEnvironment () {
  // Unique variable id counter
  var varCounter = 0;

  // Linked values are passed from this scope into the generated code block
  // Calling link() passes a value into the generated scope and returns
  // the variable name which it is bound to
  var linkedNames = [];
  var linkedValues = [];
  function link (value) {
    for (var i = 0; i < linkedValues.length; ++i) {
      if (linkedValues[i] === value) {
        return linkedNames[i]
      }
    }

    var name = 'g' + (varCounter++);
    linkedNames.push(name);
    linkedValues.push(value);
    return name
  }

  // create a code block
  function block () {
    var code = [];
    function push () {
      code.push.apply(code, slice(arguments));
    }

    var vars = [];
    function def () {
      var name = 'v' + (varCounter++);
      vars.push(name);

      if (arguments.length > 0) {
        code.push(name, '=');
        code.push.apply(code, slice(arguments));
        code.push(';');
      }

      return name
    }

    return extend(push, {
      def: def,
      toString: function () {
        return join([
          (vars.length > 0 ? 'var ' + vars.join(',') + ';' : ''),
          join(code)
        ])
      }
    })
  }

  function scope () {
    var entry = block();
    var exit = block();

    var entryToString = entry.toString;
    var exitToString = exit.toString;

    function save (object, prop) {
      exit(object, prop, '=', entry.def(object, prop), ';');
    }

    return extend(function () {
      entry.apply(entry, slice(arguments));
    }, {
      def: entry.def,
      entry: entry,
      exit: exit,
      save: save,
      set: function (object, prop, value) {
        save(object, prop);
        entry(object, prop, '=', value, ';');
      },
      toString: function () {
        return entryToString() + exitToString()
      }
    })
  }

  function conditional () {
    var pred = join(arguments);
    var thenBlock = scope();
    var elseBlock = scope();

    var thenToString = thenBlock.toString;
    var elseToString = elseBlock.toString;

    return extend(thenBlock, {
      then: function () {
        thenBlock.apply(thenBlock, slice(arguments));
        return this
      },
      else: function () {
        elseBlock.apply(elseBlock, slice(arguments));
        return this
      },
      toString: function () {
        var elseClause = elseToString();
        if (elseClause) {
          elseClause = 'else{' + elseClause + '}';
        }
        return join([
          'if(', pred, '){',
          thenToString(),
          '}', elseClause
        ])
      }
    })
  }

  // procedure list
  var globalBlock = block();
  var procedures = {};
  function proc (name, count) {
    var args = [];
    function arg () {
      var name = 'a' + args.length;
      args.push(name);
      return name
    }

    count = count || 0;
    for (var i = 0; i < count; ++i) {
      arg();
    }

    var body = scope();
    var bodyToString = body.toString;

    var result = procedures[name] = extend(body, {
      arg: arg,
      toString: function () {
        return join([
          'function(', args.join(), '){',
          bodyToString(),
          '}'
        ])
      }
    });

    return result
  }

  function compile () {
    var code = ['"use strict";',
      globalBlock,
      'return {'];
    Object.keys(procedures).forEach(function (name) {
      code.push('"', name, '":', procedures[name].toString(), ',');
    });
    code.push('}');
    var src = join(code)
      .replace(/;/g, ';\n')
      .replace(/}/g, '}\n')
      .replace(/{/g, '{\n');
    var proc = Function.apply(null, linkedNames.concat(src));
    return proc.apply(null, linkedValues)
  }

  return {
    global: globalBlock,
    link: link,
    block: block,
    proc: proc,
    scope: scope,
    cond: conditional,
    compile: compile
  }
}

// "cute" names for vector components
var CUTE_COMPONENTS = 'xyzw'.split('');

var GL_UNSIGNED_BYTE$8 = 5121;

var ATTRIB_STATE_POINTER = 1;
var ATTRIB_STATE_CONSTANT = 2;

var DYN_FUNC$1 = 0;
var DYN_PROP$1 = 1;
var DYN_CONTEXT$1 = 2;
var DYN_STATE$1 = 3;
var DYN_THUNK = 4;

var S_DITHER = 'dither';
var S_BLEND_ENABLE = 'blend.enable';
var S_BLEND_COLOR = 'blend.color';
var S_BLEND_EQUATION = 'blend.equation';
var S_BLEND_FUNC = 'blend.func';
var S_DEPTH_ENABLE = 'depth.enable';
var S_DEPTH_FUNC = 'depth.func';
var S_DEPTH_RANGE = 'depth.range';
var S_DEPTH_MASK = 'depth.mask';
var S_COLOR_MASK = 'colorMask';
var S_CULL_ENABLE = 'cull.enable';
var S_CULL_FACE = 'cull.face';
var S_FRONT_FACE = 'frontFace';
var S_LINE_WIDTH = 'lineWidth';
var S_POLYGON_OFFSET_ENABLE = 'polygonOffset.enable';
var S_POLYGON_OFFSET_OFFSET = 'polygonOffset.offset';
var S_SAMPLE_ALPHA = 'sample.alpha';
var S_SAMPLE_ENABLE = 'sample.enable';
var S_SAMPLE_COVERAGE = 'sample.coverage';
var S_STENCIL_ENABLE = 'stencil.enable';
var S_STENCIL_MASK = 'stencil.mask';
var S_STENCIL_FUNC = 'stencil.func';
var S_STENCIL_OPFRONT = 'stencil.opFront';
var S_STENCIL_OPBACK = 'stencil.opBack';
var S_SCISSOR_ENABLE = 'scissor.enable';
var S_SCISSOR_BOX = 'scissor.box';
var S_VIEWPORT = 'viewport';

var S_PROFILE = 'profile';

var S_FRAMEBUFFER = 'framebuffer';
var S_VERT = 'vert';
var S_FRAG = 'frag';
var S_ELEMENTS = 'elements';
var S_PRIMITIVE = 'primitive';
var S_COUNT = 'count';
var S_OFFSET = 'offset';
var S_INSTANCES = 'instances';

var SUFFIX_WIDTH = 'Width';
var SUFFIX_HEIGHT = 'Height';

var S_FRAMEBUFFER_WIDTH = S_FRAMEBUFFER + SUFFIX_WIDTH;
var S_FRAMEBUFFER_HEIGHT = S_FRAMEBUFFER + SUFFIX_HEIGHT;
var S_VIEWPORT_WIDTH = S_VIEWPORT + SUFFIX_WIDTH;
var S_VIEWPORT_HEIGHT = S_VIEWPORT + SUFFIX_HEIGHT;
var S_DRAWINGBUFFER = 'drawingBuffer';
var S_DRAWINGBUFFER_WIDTH = S_DRAWINGBUFFER + SUFFIX_WIDTH;
var S_DRAWINGBUFFER_HEIGHT = S_DRAWINGBUFFER + SUFFIX_HEIGHT;

var NESTED_OPTIONS = [
  S_BLEND_FUNC,
  S_BLEND_EQUATION,
  S_STENCIL_FUNC,
  S_STENCIL_OPFRONT,
  S_STENCIL_OPBACK,
  S_SAMPLE_COVERAGE,
  S_VIEWPORT,
  S_SCISSOR_BOX,
  S_POLYGON_OFFSET_OFFSET
];

var GL_ARRAY_BUFFER$1 = 34962;
var GL_ELEMENT_ARRAY_BUFFER$1 = 34963;

var GL_FRAGMENT_SHADER$1 = 35632;
var GL_VERTEX_SHADER$1 = 35633;

var GL_TEXTURE_2D$3 = 0x0DE1;
var GL_TEXTURE_CUBE_MAP$2 = 0x8513;

var GL_CULL_FACE = 0x0B44;
var GL_BLEND = 0x0BE2;
var GL_DITHER = 0x0BD0;
var GL_STENCIL_TEST = 0x0B90;
var GL_DEPTH_TEST = 0x0B71;
var GL_SCISSOR_TEST = 0x0C11;
var GL_POLYGON_OFFSET_FILL = 0x8037;
var GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
var GL_SAMPLE_COVERAGE = 0x80A0;

var GL_FLOAT$8 = 5126;
var GL_FLOAT_VEC2 = 35664;
var GL_FLOAT_VEC3 = 35665;
var GL_FLOAT_VEC4 = 35666;
var GL_INT$3 = 5124;
var GL_INT_VEC2 = 35667;
var GL_INT_VEC3 = 35668;
var GL_INT_VEC4 = 35669;
var GL_BOOL = 35670;
var GL_BOOL_VEC2 = 35671;
var GL_BOOL_VEC3 = 35672;
var GL_BOOL_VEC4 = 35673;
var GL_FLOAT_MAT2 = 35674;
var GL_FLOAT_MAT3 = 35675;
var GL_FLOAT_MAT4 = 35676;
var GL_SAMPLER_2D = 35678;
var GL_SAMPLER_CUBE = 35680;

var GL_TRIANGLES$1 = 4;

var GL_FRONT = 1028;
var GL_BACK = 1029;
var GL_CW = 0x0900;
var GL_CCW = 0x0901;
var GL_MIN_EXT = 0x8007;
var GL_MAX_EXT = 0x8008;
var GL_ALWAYS = 519;
var GL_KEEP = 7680;
var GL_ZERO = 0;
var GL_ONE = 1;
var GL_FUNC_ADD = 0x8006;
var GL_LESS = 513;

var GL_FRAMEBUFFER$2 = 0x8D40;
var GL_COLOR_ATTACHMENT0$2 = 0x8CE0;

var blendFuncs = {
  '0': 0,
  '1': 1,
  'zero': 0,
  'one': 1,
  'src color': 768,
  'one minus src color': 769,
  'src alpha': 770,
  'one minus src alpha': 771,
  'dst color': 774,
  'one minus dst color': 775,
  'dst alpha': 772,
  'one minus dst alpha': 773,
  'constant color': 32769,
  'one minus constant color': 32770,
  'constant alpha': 32771,
  'one minus constant alpha': 32772,
  'src alpha saturate': 776
};

// There are invalid values for srcRGB and dstRGB. See:
// https://www.khronos.org/registry/webgl/specs/1.0/#6.13
// https://github.com/KhronosGroup/WebGL/blob/0d3201f5f7ec3c0060bc1f04077461541f1987b9/conformance-suites/1.0.3/conformance/misc/webgl-specific.html#L56
var invalidBlendCombinations = [
  'constant color, constant alpha',
  'one minus constant color, constant alpha',
  'constant color, one minus constant alpha',
  'one minus constant color, one minus constant alpha',
  'constant alpha, constant color',
  'constant alpha, one minus constant color',
  'one minus constant alpha, constant color',
  'one minus constant alpha, one minus constant color'
];

var compareFuncs = {
  'never': 512,
  'less': 513,
  '<': 513,
  'equal': 514,
  '=': 514,
  '==': 514,
  '===': 514,
  'lequal': 515,
  '<=': 515,
  'greater': 516,
  '>': 516,
  'notequal': 517,
  '!=': 517,
  '!==': 517,
  'gequal': 518,
  '>=': 518,
  'always': 519
};

var stencilOps = {
  '0': 0,
  'zero': 0,
  'keep': 7680,
  'replace': 7681,
  'increment': 7682,
  'decrement': 7683,
  'increment wrap': 34055,
  'decrement wrap': 34056,
  'invert': 5386
};

var shaderType = {
  'frag': GL_FRAGMENT_SHADER$1,
  'vert': GL_VERTEX_SHADER$1
};

var orientationType = {
  'cw': GL_CW,
  'ccw': GL_CCW
};

function isBufferArgs (x) {
  return Array.isArray(x) ||
    isTypedArray(x) ||
    isNDArrayLike(x)
}

// Make sure viewport is processed first
function sortState (state) {
  return state.sort(function (a, b) {
    if (a === S_VIEWPORT) {
      return -1
    } else if (b === S_VIEWPORT) {
      return 1
    }
    return (a < b) ? -1 : 1
  })
}

function Declaration (thisDep, contextDep, propDep, append) {
  this.thisDep = thisDep;
  this.contextDep = contextDep;
  this.propDep = propDep;
  this.append = append;
}

function isStatic (decl) {
  return decl && !(decl.thisDep || decl.contextDep || decl.propDep)
}

function createStaticDecl (append) {
  return new Declaration(false, false, false, append)
}

function createDynamicDecl (dyn, append) {
  var type = dyn.type;
  if (type === DYN_FUNC$1) {
    var numArgs = dyn.data.length;
    return new Declaration(
      true,
      numArgs >= 1,
      numArgs >= 2,
      append)
  } else if (type === DYN_THUNK) {
    var data = dyn.data;
    return new Declaration(
      data.thisDep,
      data.contextDep,
      data.propDep,
      append)
  } else {
    return new Declaration(
      type === DYN_STATE$1,
      type === DYN_CONTEXT$1,
      type === DYN_PROP$1,
      append)
  }
}

var SCOPE_DECL = new Declaration(false, false, false, function () {});

function reglCore (
  gl,
  stringStore,
  extensions,
  limits,
  bufferState,
  elementState,
  textureState,
  framebufferState,
  uniformState,
  attributeState,
  shaderState,
  drawState,
  contextState,
  timer,
  config) {
  var AttributeRecord = attributeState.Record;

  var blendEquations = {
    'add': 32774,
    'subtract': 32778,
    'reverse subtract': 32779
  };
  if (extensions.ext_blend_minmax) {
    blendEquations.min = GL_MIN_EXT;
    blendEquations.max = GL_MAX_EXT;
  }

  var extInstancing = extensions.angle_instanced_arrays;
  var extDrawBuffers = extensions.webgl_draw_buffers;

  // ===================================================
  // ===================================================
  // WEBGL STATE
  // ===================================================
  // ===================================================
  var currentState = {
    dirty: true,
    profile: config.profile
  };
  var nextState = {};
  var GL_STATE_NAMES = [];
  var GL_FLAGS = {};
  var GL_VARIABLES = {};

  function propName (name) {
    return name.replace('.', '_')
  }

  function stateFlag (sname, cap, init) {
    var name = propName(sname);
    GL_STATE_NAMES.push(sname);
    nextState[name] = currentState[name] = !!init;
    GL_FLAGS[name] = cap;
  }

  function stateVariable (sname, func, init) {
    var name = propName(sname);
    GL_STATE_NAMES.push(sname);
    if (Array.isArray(init)) {
      currentState[name] = init.slice();
      nextState[name] = init.slice();
    } else {
      currentState[name] = nextState[name] = init;
    }
    GL_VARIABLES[name] = func;
  }

  // Dithering
  stateFlag(S_DITHER, GL_DITHER);

  // Blending
  stateFlag(S_BLEND_ENABLE, GL_BLEND);
  stateVariable(S_BLEND_COLOR, 'blendColor', [0, 0, 0, 0]);
  stateVariable(S_BLEND_EQUATION, 'blendEquationSeparate',
    [GL_FUNC_ADD, GL_FUNC_ADD]);
  stateVariable(S_BLEND_FUNC, 'blendFuncSeparate',
    [GL_ONE, GL_ZERO, GL_ONE, GL_ZERO]);

  // Depth
  stateFlag(S_DEPTH_ENABLE, GL_DEPTH_TEST, true);
  stateVariable(S_DEPTH_FUNC, 'depthFunc', GL_LESS);
  stateVariable(S_DEPTH_RANGE, 'depthRange', [0, 1]);
  stateVariable(S_DEPTH_MASK, 'depthMask', true);

  // Color mask
  stateVariable(S_COLOR_MASK, S_COLOR_MASK, [true, true, true, true]);

  // Face culling
  stateFlag(S_CULL_ENABLE, GL_CULL_FACE);
  stateVariable(S_CULL_FACE, 'cullFace', GL_BACK);

  // Front face orientation
  stateVariable(S_FRONT_FACE, S_FRONT_FACE, GL_CCW);

  // Line width
  stateVariable(S_LINE_WIDTH, S_LINE_WIDTH, 1);

  // Polygon offset
  stateFlag(S_POLYGON_OFFSET_ENABLE, GL_POLYGON_OFFSET_FILL);
  stateVariable(S_POLYGON_OFFSET_OFFSET, 'polygonOffset', [0, 0]);

  // Sample coverage
  stateFlag(S_SAMPLE_ALPHA, GL_SAMPLE_ALPHA_TO_COVERAGE);
  stateFlag(S_SAMPLE_ENABLE, GL_SAMPLE_COVERAGE);
  stateVariable(S_SAMPLE_COVERAGE, 'sampleCoverage', [1, false]);

  // Stencil
  stateFlag(S_STENCIL_ENABLE, GL_STENCIL_TEST);
  stateVariable(S_STENCIL_MASK, 'stencilMask', -1);
  stateVariable(S_STENCIL_FUNC, 'stencilFunc', [GL_ALWAYS, 0, -1]);
  stateVariable(S_STENCIL_OPFRONT, 'stencilOpSeparate',
    [GL_FRONT, GL_KEEP, GL_KEEP, GL_KEEP]);
  stateVariable(S_STENCIL_OPBACK, 'stencilOpSeparate',
    [GL_BACK, GL_KEEP, GL_KEEP, GL_KEEP]);

  // Scissor
  stateFlag(S_SCISSOR_ENABLE, GL_SCISSOR_TEST);
  stateVariable(S_SCISSOR_BOX, 'scissor',
    [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]);

  // Viewport
  stateVariable(S_VIEWPORT, S_VIEWPORT,
    [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]);

  // ===================================================
  // ===================================================
  // ENVIRONMENT
  // ===================================================
  // ===================================================
  var sharedState = {
    gl: gl,
    context: contextState,
    strings: stringStore,
    next: nextState,
    current: currentState,
    draw: drawState,
    elements: elementState,
    buffer: bufferState,
    shader: shaderState,
    attributes: attributeState.state,
    uniforms: uniformState,
    framebuffer: framebufferState,
    extensions: extensions,

    timer: timer,
    isBufferArgs: isBufferArgs
  };

  var sharedConstants = {
    primTypes: primTypes,
    compareFuncs: compareFuncs,
    blendFuncs: blendFuncs,
    blendEquations: blendEquations,
    stencilOps: stencilOps,
    glTypes: glTypes,
    orientationType: orientationType
  };

  check$1.optional(function () {
    sharedState.isArrayLike = isArrayLike;
  });

  if (extDrawBuffers) {
    sharedConstants.backBuffer = [GL_BACK];
    sharedConstants.drawBuffer = loop(limits.maxDrawbuffers, function (i) {
      if (i === 0) {
        return [0]
      }
      return loop(i, function (j) {
        return GL_COLOR_ATTACHMENT0$2 + j
      })
    });
  }

  var drawCallCounter = 0;
  function createREGLEnvironment () {
    var env = createEnvironment();
    var link = env.link;
    var global = env.global;
    env.id = drawCallCounter++;

    env.batchId = '0';

    // link shared state
    var SHARED = link(sharedState);
    var shared = env.shared = {
      props: 'a0'
    };
    Object.keys(sharedState).forEach(function (prop) {
      shared[prop] = global.def(SHARED, '.', prop);
    });

    // Inject runtime assertion stuff for debug builds
    check$1.optional(function () {
      env.CHECK = link(check$1);
      env.commandStr = check$1.guessCommand();
      env.command = link(env.commandStr);
      env.assert = function (block, pred, message) {
        block(
          'if(!(', pred, '))',
          this.CHECK, '.commandRaise(', link(message), ',', this.command, ');');
      };

      sharedConstants.invalidBlendCombinations = invalidBlendCombinations;
    });

    // Copy GL state variables over
    var nextVars = env.next = {};
    var currentVars = env.current = {};
    Object.keys(GL_VARIABLES).forEach(function (variable) {
      if (Array.isArray(currentState[variable])) {
        nextVars[variable] = global.def(shared.next, '.', variable);
        currentVars[variable] = global.def(shared.current, '.', variable);
      }
    });

    // Initialize shared constants
    var constants = env.constants = {};
    Object.keys(sharedConstants).forEach(function (name) {
      constants[name] = global.def(JSON.stringify(sharedConstants[name]));
    });

    // Helper function for calling a block
    env.invoke = function (block, x) {
      switch (x.type) {
        case DYN_FUNC$1:
          var argList = [
            'this',
            shared.context,
            shared.props,
            env.batchId
          ];
          return block.def(
            link(x.data), '.call(',
              argList.slice(0, Math.max(x.data.length + 1, 4)),
             ')')
        case DYN_PROP$1:
          return block.def(shared.props, x.data)
        case DYN_CONTEXT$1:
          return block.def(shared.context, x.data)
        case DYN_STATE$1:
          return block.def('this', x.data)
        case DYN_THUNK:
          x.data.append(env, block);
          return x.data.ref
      }
    };

    env.attribCache = {};

    var scopeAttribs = {};
    env.scopeAttrib = function (name) {
      var id = stringStore.id(name);
      if (id in scopeAttribs) {
        return scopeAttribs[id]
      }
      var binding = attributeState.scope[id];
      if (!binding) {
        binding = attributeState.scope[id] = new AttributeRecord();
      }
      var result = scopeAttribs[id] = link(binding);
      return result
    };

    return env
  }

  // ===================================================
  // ===================================================
  // PARSING
  // ===================================================
  // ===================================================
  function parseProfile (options) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    var profileEnable;
    if (S_PROFILE in staticOptions) {
      var value = !!staticOptions[S_PROFILE];
      profileEnable = createStaticDecl(function (env, scope) {
        return value
      });
      profileEnable.enable = value;
    } else if (S_PROFILE in dynamicOptions) {
      var dyn = dynamicOptions[S_PROFILE];
      profileEnable = createDynamicDecl(dyn, function (env, scope) {
        return env.invoke(scope, dyn)
      });
    }

    return profileEnable
  }

  function parseFramebuffer (options, env) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    if (S_FRAMEBUFFER in staticOptions) {
      var framebuffer = staticOptions[S_FRAMEBUFFER];
      if (framebuffer) {
        framebuffer = framebufferState.getFramebuffer(framebuffer);
        check$1.command(framebuffer, 'invalid framebuffer object');
        return createStaticDecl(function (env, block) {
          var FRAMEBUFFER = env.link(framebuffer);
          var shared = env.shared;
          block.set(
            shared.framebuffer,
            '.next',
            FRAMEBUFFER);
          var CONTEXT = shared.context;
          block.set(
            CONTEXT,
            '.' + S_FRAMEBUFFER_WIDTH,
            FRAMEBUFFER + '.width');
          block.set(
            CONTEXT,
            '.' + S_FRAMEBUFFER_HEIGHT,
            FRAMEBUFFER + '.height');
          return FRAMEBUFFER
        })
      } else {
        return createStaticDecl(function (env, scope) {
          var shared = env.shared;
          scope.set(
            shared.framebuffer,
            '.next',
            'null');
          var CONTEXT = shared.context;
          scope.set(
            CONTEXT,
            '.' + S_FRAMEBUFFER_WIDTH,
            CONTEXT + '.' + S_DRAWINGBUFFER_WIDTH);
          scope.set(
            CONTEXT,
            '.' + S_FRAMEBUFFER_HEIGHT,
            CONTEXT + '.' + S_DRAWINGBUFFER_HEIGHT);
          return 'null'
        })
      }
    } else if (S_FRAMEBUFFER in dynamicOptions) {
      var dyn = dynamicOptions[S_FRAMEBUFFER];
      return createDynamicDecl(dyn, function (env, scope) {
        var FRAMEBUFFER_FUNC = env.invoke(scope, dyn);
        var shared = env.shared;
        var FRAMEBUFFER_STATE = shared.framebuffer;
        var FRAMEBUFFER = scope.def(
          FRAMEBUFFER_STATE, '.getFramebuffer(', FRAMEBUFFER_FUNC, ')');

        check$1.optional(function () {
          env.assert(scope,
            '!' + FRAMEBUFFER_FUNC + '||' + FRAMEBUFFER,
            'invalid framebuffer object');
        });

        scope.set(
          FRAMEBUFFER_STATE,
          '.next',
          FRAMEBUFFER);
        var CONTEXT = shared.context;
        scope.set(
          CONTEXT,
          '.' + S_FRAMEBUFFER_WIDTH,
          FRAMEBUFFER + '?' + FRAMEBUFFER + '.width:' +
          CONTEXT + '.' + S_DRAWINGBUFFER_WIDTH);
        scope.set(
          CONTEXT,
          '.' + S_FRAMEBUFFER_HEIGHT,
          FRAMEBUFFER +
          '?' + FRAMEBUFFER + '.height:' +
          CONTEXT + '.' + S_DRAWINGBUFFER_HEIGHT);
        return FRAMEBUFFER
      })
    } else {
      return null
    }
  }

  function parseViewportScissor (options, framebuffer, env) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    function parseBox (param) {
      if (param in staticOptions) {
        var box = staticOptions[param];
        check$1.commandType(box, 'object', 'invalid ' + param, env.commandStr);

        var isStatic = true;
        var x = box.x | 0;
        var y = box.y | 0;
        var w, h;
        if ('width' in box) {
          w = box.width | 0;
          check$1.command(w >= 0, 'invalid ' + param, env.commandStr);
        } else {
          isStatic = false;
        }
        if ('height' in box) {
          h = box.height | 0;
          check$1.command(h >= 0, 'invalid ' + param, env.commandStr);
        } else {
          isStatic = false;
        }

        return new Declaration(
          !isStatic && framebuffer && framebuffer.thisDep,
          !isStatic && framebuffer && framebuffer.contextDep,
          !isStatic && framebuffer && framebuffer.propDep,
          function (env, scope) {
            var CONTEXT = env.shared.context;
            var BOX_W = w;
            if (!('width' in box)) {
              BOX_W = scope.def(CONTEXT, '.', S_FRAMEBUFFER_WIDTH, '-', x);
            }
            var BOX_H = h;
            if (!('height' in box)) {
              BOX_H = scope.def(CONTEXT, '.', S_FRAMEBUFFER_HEIGHT, '-', y);
            }
            return [x, y, BOX_W, BOX_H]
          })
      } else if (param in dynamicOptions) {
        var dynBox = dynamicOptions[param];
        var result = createDynamicDecl(dynBox, function (env, scope) {
          var BOX = env.invoke(scope, dynBox);

          check$1.optional(function () {
            env.assert(scope,
              BOX + '&&typeof ' + BOX + '==="object"',
              'invalid ' + param);
          });

          var CONTEXT = env.shared.context;
          var BOX_X = scope.def(BOX, '.x|0');
          var BOX_Y = scope.def(BOX, '.y|0');
          var BOX_W = scope.def(
            '"width" in ', BOX, '?', BOX, '.width|0:',
            '(', CONTEXT, '.', S_FRAMEBUFFER_WIDTH, '-', BOX_X, ')');
          var BOX_H = scope.def(
            '"height" in ', BOX, '?', BOX, '.height|0:',
            '(', CONTEXT, '.', S_FRAMEBUFFER_HEIGHT, '-', BOX_Y, ')');

          check$1.optional(function () {
            env.assert(scope,
              BOX_W + '>=0&&' +
              BOX_H + '>=0',
              'invalid ' + param);
          });

          return [BOX_X, BOX_Y, BOX_W, BOX_H]
        });
        if (framebuffer) {
          result.thisDep = result.thisDep || framebuffer.thisDep;
          result.contextDep = result.contextDep || framebuffer.contextDep;
          result.propDep = result.propDep || framebuffer.propDep;
        }
        return result
      } else if (framebuffer) {
        return new Declaration(
          framebuffer.thisDep,
          framebuffer.contextDep,
          framebuffer.propDep,
          function (env, scope) {
            var CONTEXT = env.shared.context;
            return [
              0, 0,
              scope.def(CONTEXT, '.', S_FRAMEBUFFER_WIDTH),
              scope.def(CONTEXT, '.', S_FRAMEBUFFER_HEIGHT)]
          })
      } else {
        return null
      }
    }

    var viewport = parseBox(S_VIEWPORT);

    if (viewport) {
      var prevViewport = viewport;
      viewport = new Declaration(
        viewport.thisDep,
        viewport.contextDep,
        viewport.propDep,
        function (env, scope) {
          var VIEWPORT = prevViewport.append(env, scope);
          var CONTEXT = env.shared.context;
          scope.set(
            CONTEXT,
            '.' + S_VIEWPORT_WIDTH,
            VIEWPORT[2]);
          scope.set(
            CONTEXT,
            '.' + S_VIEWPORT_HEIGHT,
            VIEWPORT[3]);
          return VIEWPORT
        });
    }

    return {
      viewport: viewport,
      scissor_box: parseBox(S_SCISSOR_BOX)
    }
  }

  function parseProgram (options) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    function parseShader (name) {
      if (name in staticOptions) {
        var id = stringStore.id(staticOptions[name]);
        check$1.optional(function () {
          shaderState.shader(shaderType[name], id, check$1.guessCommand());
        });
        var result = createStaticDecl(function () {
          return id
        });
        result.id = id;
        return result
      } else if (name in dynamicOptions) {
        var dyn = dynamicOptions[name];
        return createDynamicDecl(dyn, function (env, scope) {
          var str = env.invoke(scope, dyn);
          var id = scope.def(env.shared.strings, '.id(', str, ')');
          check$1.optional(function () {
            scope(
              env.shared.shader, '.shader(',
              shaderType[name], ',',
              id, ',',
              env.command, ');');
          });
          return id
        })
      }
      return null
    }

    var frag = parseShader(S_FRAG);
    var vert = parseShader(S_VERT);

    var program = null;
    var progVar;
    if (isStatic(frag) && isStatic(vert)) {
      program = shaderState.program(vert.id, frag.id);
      progVar = createStaticDecl(function (env, scope) {
        return env.link(program)
      });
    } else {
      progVar = new Declaration(
        (frag && frag.thisDep) || (vert && vert.thisDep),
        (frag && frag.contextDep) || (vert && vert.contextDep),
        (frag && frag.propDep) || (vert && vert.propDep),
        function (env, scope) {
          var SHADER_STATE = env.shared.shader;
          var fragId;
          if (frag) {
            fragId = frag.append(env, scope);
          } else {
            fragId = scope.def(SHADER_STATE, '.', S_FRAG);
          }
          var vertId;
          if (vert) {
            vertId = vert.append(env, scope);
          } else {
            vertId = scope.def(SHADER_STATE, '.', S_VERT);
          }
          var progDef = SHADER_STATE + '.program(' + vertId + ',' + fragId;
          check$1.optional(function () {
            progDef += ',' + env.command;
          });
          return scope.def(progDef + ')')
        });
    }

    return {
      frag: frag,
      vert: vert,
      progVar: progVar,
      program: program
    }
  }

  function parseDraw (options, env) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    function parseElements () {
      if (S_ELEMENTS in staticOptions) {
        var elements = staticOptions[S_ELEMENTS];
        if (isBufferArgs(elements)) {
          elements = elementState.getElements(elementState.create(elements, true));
        } else if (elements) {
          elements = elementState.getElements(elements);
          check$1.command(elements, 'invalid elements', env.commandStr);
        }
        var result = createStaticDecl(function (env, scope) {
          if (elements) {
            var result = env.link(elements);
            env.ELEMENTS = result;
            return result
          }
          env.ELEMENTS = null;
          return null
        });
        result.value = elements;
        return result
      } else if (S_ELEMENTS in dynamicOptions) {
        var dyn = dynamicOptions[S_ELEMENTS];
        return createDynamicDecl(dyn, function (env, scope) {
          var shared = env.shared;

          var IS_BUFFER_ARGS = shared.isBufferArgs;
          var ELEMENT_STATE = shared.elements;

          var elementDefn = env.invoke(scope, dyn);
          var elements = scope.def('null');
          var elementStream = scope.def(IS_BUFFER_ARGS, '(', elementDefn, ')');

          var ifte = env.cond(elementStream)
            .then(elements, '=', ELEMENT_STATE, '.createStream(', elementDefn, ');')
            .else(elements, '=', ELEMENT_STATE, '.getElements(', elementDefn, ');');

          check$1.optional(function () {
            env.assert(ifte.else,
              '!' + elementDefn + '||' + elements,
              'invalid elements');
          });

          scope.entry(ifte);
          scope.exit(
            env.cond(elementStream)
              .then(ELEMENT_STATE, '.destroyStream(', elements, ');'));

          env.ELEMENTS = elements;

          return elements
        })
      }

      return null
    }

    var elements = parseElements();

    function parsePrimitive () {
      if (S_PRIMITIVE in staticOptions) {
        var primitive = staticOptions[S_PRIMITIVE];
        check$1.commandParameter(primitive, primTypes, 'invalid primitve', env.commandStr);
        return createStaticDecl(function (env, scope) {
          return primTypes[primitive]
        })
      } else if (S_PRIMITIVE in dynamicOptions) {
        var dynPrimitive = dynamicOptions[S_PRIMITIVE];
        return createDynamicDecl(dynPrimitive, function (env, scope) {
          var PRIM_TYPES = env.constants.primTypes;
          var prim = env.invoke(scope, dynPrimitive);
          check$1.optional(function () {
            env.assert(scope,
              prim + ' in ' + PRIM_TYPES,
              'invalid primitive, must be one of ' + Object.keys(primTypes));
          });
          return scope.def(PRIM_TYPES, '[', prim, ']')
        })
      } else if (elements) {
        if (isStatic(elements)) {
          if (elements.value) {
            return createStaticDecl(function (env, scope) {
              return scope.def(env.ELEMENTS, '.primType')
            })
          } else {
            return createStaticDecl(function () {
              return GL_TRIANGLES$1
            })
          }
        } else {
          return new Declaration(
            elements.thisDep,
            elements.contextDep,
            elements.propDep,
            function (env, scope) {
              var elements = env.ELEMENTS;
              return scope.def(elements, '?', elements, '.primType:', GL_TRIANGLES$1)
            })
        }
      }
      return null
    }

    function parseParam (param, isOffset) {
      if (param in staticOptions) {
        var value = staticOptions[param] | 0;
        check$1.command(!isOffset || value >= 0, 'invalid ' + param, env.commandStr);
        return createStaticDecl(function (env, scope) {
          if (isOffset) {
            env.OFFSET = value;
          }
          return value
        })
      } else if (param in dynamicOptions) {
        var dynValue = dynamicOptions[param];
        return createDynamicDecl(dynValue, function (env, scope) {
          var result = env.invoke(scope, dynValue);
          if (isOffset) {
            env.OFFSET = result;
            check$1.optional(function () {
              env.assert(scope,
                result + '>=0',
                'invalid ' + param);
            });
          }
          return result
        })
      } else if (isOffset && elements) {
        return createStaticDecl(function (env, scope) {
          env.OFFSET = '0';
          return 0
        })
      }
      return null
    }

    var OFFSET = parseParam(S_OFFSET, true);

    function parseVertCount () {
      if (S_COUNT in staticOptions) {
        var count = staticOptions[S_COUNT] | 0;
        check$1.command(
          typeof count === 'number' && count >= 0, 'invalid vertex count', env.commandStr);
        return createStaticDecl(function () {
          return count
        })
      } else if (S_COUNT in dynamicOptions) {
        var dynCount = dynamicOptions[S_COUNT];
        return createDynamicDecl(dynCount, function (env, scope) {
          var result = env.invoke(scope, dynCount);
          check$1.optional(function () {
            env.assert(scope,
              'typeof ' + result + '==="number"&&' +
              result + '>=0&&' +
              result + '===(' + result + '|0)',
              'invalid vertex count');
          });
          return result
        })
      } else if (elements) {
        if (isStatic(elements)) {
          if (elements) {
            if (OFFSET) {
              return new Declaration(
                OFFSET.thisDep,
                OFFSET.contextDep,
                OFFSET.propDep,
                function (env, scope) {
                  var result = scope.def(
                    env.ELEMENTS, '.vertCount-', env.OFFSET);

                  check$1.optional(function () {
                    env.assert(scope,
                      result + '>=0',
                      'invalid vertex offset/element buffer too small');
                  });

                  return result
                })
            } else {
              return createStaticDecl(function (env, scope) {
                return scope.def(env.ELEMENTS, '.vertCount')
              })
            }
          } else {
            var result = createStaticDecl(function () {
              return -1
            });
            check$1.optional(function () {
              result.MISSING = true;
            });
            return result
          }
        } else {
          var variable = new Declaration(
            elements.thisDep || OFFSET.thisDep,
            elements.contextDep || OFFSET.contextDep,
            elements.propDep || OFFSET.propDep,
            function (env, scope) {
              var elements = env.ELEMENTS;
              if (env.OFFSET) {
                return scope.def(elements, '?', elements, '.vertCount-',
                  env.OFFSET, ':-1')
              }
              return scope.def(elements, '?', elements, '.vertCount:-1')
            });
          check$1.optional(function () {
            variable.DYNAMIC = true;
          });
          return variable
        }
      }
      return null
    }

    return {
      elements: elements,
      primitive: parsePrimitive(),
      count: parseVertCount(),
      instances: parseParam(S_INSTANCES, false),
      offset: OFFSET
    }
  }

  function parseGLState (options, env) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    var STATE = {};

    GL_STATE_NAMES.forEach(function (prop) {
      var param = propName(prop);

      function parseParam (parseStatic, parseDynamic) {
        if (prop in staticOptions) {
          var value = parseStatic(staticOptions[prop]);
          STATE[param] = createStaticDecl(function () {
            return value
          });
        } else if (prop in dynamicOptions) {
          var dyn = dynamicOptions[prop];
          STATE[param] = createDynamicDecl(dyn, function (env, scope) {
            return parseDynamic(env, scope, env.invoke(scope, dyn))
          });
        }
      }

      switch (prop) {
        case S_CULL_ENABLE:
        case S_BLEND_ENABLE:
        case S_DITHER:
        case S_STENCIL_ENABLE:
        case S_DEPTH_ENABLE:
        case S_SCISSOR_ENABLE:
        case S_POLYGON_OFFSET_ENABLE:
        case S_SAMPLE_ALPHA:
        case S_SAMPLE_ENABLE:
        case S_DEPTH_MASK:
          return parseParam(
            function (value) {
              check$1.commandType(value, 'boolean', prop, env.commandStr);
              return value
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  'typeof ' + value + '==="boolean"',
                  'invalid flag ' + prop, env.commandStr);
              });
              return value
            })

        case S_DEPTH_FUNC:
          return parseParam(
            function (value) {
              check$1.commandParameter(value, compareFuncs, 'invalid ' + prop, env.commandStr);
              return compareFuncs[value]
            },
            function (env, scope, value) {
              var COMPARE_FUNCS = env.constants.compareFuncs;
              check$1.optional(function () {
                env.assert(scope,
                  value + ' in ' + COMPARE_FUNCS,
                  'invalid ' + prop + ', must be one of ' + Object.keys(compareFuncs));
              });
              return scope.def(COMPARE_FUNCS, '[', value, ']')
            })

        case S_DEPTH_RANGE:
          return parseParam(
            function (value) {
              check$1.command(
                isArrayLike(value) &&
                value.length === 2 &&
                typeof value[0] === 'number' &&
                typeof value[1] === 'number' &&
                value[0] <= value[1],
                'depth range is 2d array',
                env.commandStr);
              return value
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  env.shared.isArrayLike + '(' + value + ')&&' +
                  value + '.length===2&&' +
                  'typeof ' + value + '[0]==="number"&&' +
                  'typeof ' + value + '[1]==="number"&&' +
                  value + '[0]<=' + value + '[1]',
                  'depth range must be a 2d array');
              });

              var Z_NEAR = scope.def('+', value, '[0]');
              var Z_FAR = scope.def('+', value, '[1]');
              return [Z_NEAR, Z_FAR]
            })

        case S_BLEND_FUNC:
          return parseParam(
            function (value) {
              check$1.commandType(value, 'object', 'blend.func', env.commandStr);
              var srcRGB = ('srcRGB' in value ? value.srcRGB : value.src);
              var srcAlpha = ('srcAlpha' in value ? value.srcAlpha : value.src);
              var dstRGB = ('dstRGB' in value ? value.dstRGB : value.dst);
              var dstAlpha = ('dstAlpha' in value ? value.dstAlpha : value.dst);
              check$1.commandParameter(srcRGB, blendFuncs, param + '.srcRGB', env.commandStr);
              check$1.commandParameter(srcAlpha, blendFuncs, param + '.srcAlpha', env.commandStr);
              check$1.commandParameter(dstRGB, blendFuncs, param + '.dstRGB', env.commandStr);
              check$1.commandParameter(dstAlpha, blendFuncs, param + '.dstAlpha', env.commandStr);

              check$1.command(
                (invalidBlendCombinations.indexOf(srcRGB + ', ' + dstRGB) === -1),
                'unallowed blending combination (srcRGB, dstRGB) = (' + srcRGB + ', ' + dstRGB + ')', env.commandStr);

              return [
                blendFuncs[srcRGB],
                blendFuncs[dstRGB],
                blendFuncs[srcAlpha],
                blendFuncs[dstAlpha]
              ]
            },
            function (env, scope, value) {
              var BLEND_FUNCS = env.constants.blendFuncs;

              check$1.optional(function () {
                env.assert(scope,
                  value + '&&typeof ' + value + '==="object"',
                  'invalid blend func, must be an object');
              });

              function read (prefix, suffix) {
                var func = scope.def(
                  '"', prefix, suffix, '" in ', value,
                  '?', value, '.', prefix, suffix,
                  ':', value, '.', prefix);

                check$1.optional(function () {
                  env.assert(scope,
                    func + ' in ' + BLEND_FUNCS,
                    'invalid ' + prop + '.' + prefix + suffix + ', must be one of ' + Object.keys(blendFuncs));
                });

                return func
              }

              var srcRGB = read('src', 'RGB');
              var dstRGB = read('dst', 'RGB');

              check$1.optional(function () {
                var INVALID_BLEND_COMBINATIONS = env.constants.invalidBlendCombinations;

                env.assert(scope,
                           INVALID_BLEND_COMBINATIONS +
                           '.indexOf(' + srcRGB + '+", "+' + dstRGB + ') === -1 ',
                           'unallowed blending combination for (srcRGB, dstRGB)'
                          );
              });

              var SRC_RGB = scope.def(BLEND_FUNCS, '[', srcRGB, ']');
              var SRC_ALPHA = scope.def(BLEND_FUNCS, '[', read('src', 'Alpha'), ']');
              var DST_RGB = scope.def(BLEND_FUNCS, '[', dstRGB, ']');
              var DST_ALPHA = scope.def(BLEND_FUNCS, '[', read('dst', 'Alpha'), ']');

              return [SRC_RGB, DST_RGB, SRC_ALPHA, DST_ALPHA]
            })

        case S_BLEND_EQUATION:
          return parseParam(
            function (value) {
              if (typeof value === 'string') {
                check$1.commandParameter(value, blendEquations, 'invalid ' + prop, env.commandStr);
                return [
                  blendEquations[value],
                  blendEquations[value]
                ]
              } else if (typeof value === 'object') {
                check$1.commandParameter(
                  value.rgb, blendEquations, prop + '.rgb', env.commandStr);
                check$1.commandParameter(
                  value.alpha, blendEquations, prop + '.alpha', env.commandStr);
                return [
                  blendEquations[value.rgb],
                  blendEquations[value.alpha]
                ]
              } else {
                check$1.commandRaise('invalid blend.equation', env.commandStr);
              }
            },
            function (env, scope, value) {
              var BLEND_EQUATIONS = env.constants.blendEquations;

              var RGB = scope.def();
              var ALPHA = scope.def();

              var ifte = env.cond('typeof ', value, '==="string"');

              check$1.optional(function () {
                function checkProp (block, name, value) {
                  env.assert(block,
                    value + ' in ' + BLEND_EQUATIONS,
                    'invalid ' + name + ', must be one of ' + Object.keys(blendEquations));
                }
                checkProp(ifte.then, prop, value);

                env.assert(ifte.else,
                  value + '&&typeof ' + value + '==="object"',
                  'invalid ' + prop);
                checkProp(ifte.else, prop + '.rgb', value + '.rgb');
                checkProp(ifte.else, prop + '.alpha', value + '.alpha');
              });

              ifte.then(
                RGB, '=', ALPHA, '=', BLEND_EQUATIONS, '[', value, '];');
              ifte.else(
                RGB, '=', BLEND_EQUATIONS, '[', value, '.rgb];',
                ALPHA, '=', BLEND_EQUATIONS, '[', value, '.alpha];');

              scope(ifte);

              return [RGB, ALPHA]
            })

        case S_BLEND_COLOR:
          return parseParam(
            function (value) {
              check$1.command(
                isArrayLike(value) &&
                value.length === 4,
                'blend.color must be a 4d array', env.commandStr);
              return loop(4, function (i) {
                return +value[i]
              })
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  env.shared.isArrayLike + '(' + value + ')&&' +
                  value + '.length===4',
                  'blend.color must be a 4d array');
              });
              return loop(4, function (i) {
                return scope.def('+', value, '[', i, ']')
              })
            })

        case S_STENCIL_MASK:
          return parseParam(
            function (value) {
              check$1.commandType(value, 'number', param, env.commandStr);
              return value | 0
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  'typeof ' + value + '==="number"',
                  'invalid stencil.mask');
              });
              return scope.def(value, '|0')
            })

        case S_STENCIL_FUNC:
          return parseParam(
            function (value) {
              check$1.commandType(value, 'object', param, env.commandStr);
              var cmp = value.cmp || 'keep';
              var ref = value.ref || 0;
              var mask = 'mask' in value ? value.mask : -1;
              check$1.commandParameter(cmp, compareFuncs, prop + '.cmp', env.commandStr);
              check$1.commandType(ref, 'number', prop + '.ref', env.commandStr);
              check$1.commandType(mask, 'number', prop + '.mask', env.commandStr);
              return [
                compareFuncs[cmp],
                ref,
                mask
              ]
            },
            function (env, scope, value) {
              var COMPARE_FUNCS = env.constants.compareFuncs;
              check$1.optional(function () {
                function assert () {
                  env.assert(scope,
                    Array.prototype.join.call(arguments, ''),
                    'invalid stencil.func');
                }
                assert(value + '&&typeof ', value, '==="object"');
                assert('!("cmp" in ', value, ')||(',
                  value, '.cmp in ', COMPARE_FUNCS, ')');
              });
              var cmp = scope.def(
                '"cmp" in ', value,
                '?', COMPARE_FUNCS, '[', value, '.cmp]',
                ':', GL_KEEP);
              var ref = scope.def(value, '.ref|0');
              var mask = scope.def(
                '"mask" in ', value,
                '?', value, '.mask|0:-1');
              return [cmp, ref, mask]
            })

        case S_STENCIL_OPFRONT:
        case S_STENCIL_OPBACK:
          return parseParam(
            function (value) {
              check$1.commandType(value, 'object', param, env.commandStr);
              var fail = value.fail || 'keep';
              var zfail = value.zfail || 'keep';
              var zpass = value.zpass || 'keep';
              check$1.commandParameter(fail, stencilOps, prop + '.fail', env.commandStr);
              check$1.commandParameter(zfail, stencilOps, prop + '.zfail', env.commandStr);
              check$1.commandParameter(zpass, stencilOps, prop + '.zpass', env.commandStr);
              return [
                prop === S_STENCIL_OPBACK ? GL_BACK : GL_FRONT,
                stencilOps[fail],
                stencilOps[zfail],
                stencilOps[zpass]
              ]
            },
            function (env, scope, value) {
              var STENCIL_OPS = env.constants.stencilOps;

              check$1.optional(function () {
                env.assert(scope,
                  value + '&&typeof ' + value + '==="object"',
                  'invalid ' + prop);
              });

              function read (name) {
                check$1.optional(function () {
                  env.assert(scope,
                    '!("' + name + '" in ' + value + ')||' +
                    '(' + value + '.' + name + ' in ' + STENCIL_OPS + ')',
                    'invalid ' + prop + '.' + name + ', must be one of ' + Object.keys(stencilOps));
                });

                return scope.def(
                  '"', name, '" in ', value,
                  '?', STENCIL_OPS, '[', value, '.', name, ']:',
                  GL_KEEP)
              }

              return [
                prop === S_STENCIL_OPBACK ? GL_BACK : GL_FRONT,
                read('fail'),
                read('zfail'),
                read('zpass')
              ]
            })

        case S_POLYGON_OFFSET_OFFSET:
          return parseParam(
            function (value) {
              check$1.commandType(value, 'object', param, env.commandStr);
              var factor = value.factor | 0;
              var units = value.units | 0;
              check$1.commandType(factor, 'number', param + '.factor', env.commandStr);
              check$1.commandType(units, 'number', param + '.units', env.commandStr);
              return [factor, units]
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  value + '&&typeof ' + value + '==="object"',
                  'invalid ' + prop);
              });

              var FACTOR = scope.def(value, '.factor|0');
              var UNITS = scope.def(value, '.units|0');

              return [FACTOR, UNITS]
            })

        case S_CULL_FACE:
          return parseParam(
            function (value) {
              var face = 0;
              if (value === 'front') {
                face = GL_FRONT;
              } else if (value === 'back') {
                face = GL_BACK;
              }
              check$1.command(!!face, param, env.commandStr);
              return face
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  value + '==="front"||' +
                  value + '==="back"',
                  'invalid cull.face');
              });
              return scope.def(value, '==="front"?', GL_FRONT, ':', GL_BACK)
            })

        case S_LINE_WIDTH:
          return parseParam(
            function (value) {
              check$1.command(
                typeof value === 'number' &&
                value >= limits.lineWidthDims[0] &&
                value <= limits.lineWidthDims[1],
                'invalid line width, must be a positive number between ' +
                limits.lineWidthDims[0] + ' and ' + limits.lineWidthDims[1], env.commandStr);
              return value
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  'typeof ' + value + '==="number"&&' +
                  value + '>=' + limits.lineWidthDims[0] + '&&' +
                  value + '<=' + limits.lineWidthDims[1],
                  'invalid line width');
              });

              return value
            })

        case S_FRONT_FACE:
          return parseParam(
            function (value) {
              check$1.commandParameter(value, orientationType, param, env.commandStr);
              return orientationType[value]
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  value + '==="cw"||' +
                  value + '==="ccw"',
                  'invalid frontFace, must be one of cw,ccw');
              });
              return scope.def(value + '==="cw"?' + GL_CW + ':' + GL_CCW)
            })

        case S_COLOR_MASK:
          return parseParam(
            function (value) {
              check$1.command(
                isArrayLike(value) && value.length === 4,
                'color.mask must be length 4 array', env.commandStr);
              return value.map(function (v) { return !!v })
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  env.shared.isArrayLike + '(' + value + ')&&' +
                  value + '.length===4',
                  'invalid color.mask');
              });
              return loop(4, function (i) {
                return '!!' + value + '[' + i + ']'
              })
            })

        case S_SAMPLE_COVERAGE:
          return parseParam(
            function (value) {
              check$1.command(typeof value === 'object' && value, param, env.commandStr);
              var sampleValue = 'value' in value ? value.value : 1;
              var sampleInvert = !!value.invert;
              check$1.command(
                typeof sampleValue === 'number' &&
                sampleValue >= 0 && sampleValue <= 1,
                'sample.coverage.value must be a number between 0 and 1', env.commandStr);
              return [sampleValue, sampleInvert]
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  value + '&&typeof ' + value + '==="object"',
                  'invalid sample.coverage');
              });
              var VALUE = scope.def(
                '"value" in ', value, '?+', value, '.value:1');
              var INVERT = scope.def('!!', value, '.invert');
              return [VALUE, INVERT]
            })
      }
    });

    return STATE
  }

  function parseUniforms (uniforms, env) {
    var staticUniforms = uniforms.static;
    var dynamicUniforms = uniforms.dynamic;

    var UNIFORMS = {};

    Object.keys(staticUniforms).forEach(function (name) {
      var value = staticUniforms[name];
      var result;
      if (typeof value === 'number' ||
          typeof value === 'boolean') {
        result = createStaticDecl(function () {
          return value
        });
      } else if (typeof value === 'function') {
        var reglType = value._reglType;
        if (reglType === 'texture2d' ||
            reglType === 'textureCube') {
          result = createStaticDecl(function (env) {
            return env.link(value)
          });
        } else if (reglType === 'framebuffer' ||
                   reglType === 'framebufferCube') {
          check$1.command(value.color.length > 0,
            'missing color attachment for framebuffer sent to uniform "' + name + '"', env.commandStr);
          result = createStaticDecl(function (env) {
            return env.link(value.color[0])
          });
        } else {
          check$1.commandRaise('invalid data for uniform "' + name + '"', env.commandStr);
        }
      } else if (isArrayLike(value)) {
        result = createStaticDecl(function (env) {
          var ITEM = env.global.def('[',
            loop(value.length, function (i) {
              check$1.command(
                typeof value[i] === 'number' ||
                typeof value[i] === 'boolean',
                'invalid uniform ' + name, env.commandStr);
              return value[i]
            }), ']');
          return ITEM
        });
      } else {
        check$1.commandRaise('invalid or missing data for uniform "' + name + '"', env.commandStr);
      }
      result.value = value;
      UNIFORMS[name] = result;
    });

    Object.keys(dynamicUniforms).forEach(function (key) {
      var dyn = dynamicUniforms[key];
      UNIFORMS[key] = createDynamicDecl(dyn, function (env, scope) {
        return env.invoke(scope, dyn)
      });
    });

    return UNIFORMS
  }

  function parseAttributes (attributes, env) {
    var staticAttributes = attributes.static;
    var dynamicAttributes = attributes.dynamic;

    var attributeDefs = {};

    Object.keys(staticAttributes).forEach(function (attribute) {
      var value = staticAttributes[attribute];
      var id = stringStore.id(attribute);

      var record = new AttributeRecord();
      if (isBufferArgs(value)) {
        record.state = ATTRIB_STATE_POINTER;
        record.buffer = bufferState.getBuffer(
          bufferState.create(value, GL_ARRAY_BUFFER$1, false, true));
        record.type = 0;
      } else {
        var buffer = bufferState.getBuffer(value);
        if (buffer) {
          record.state = ATTRIB_STATE_POINTER;
          record.buffer = buffer;
          record.type = 0;
        } else {
          check$1.command(typeof value === 'object' && value,
            'invalid data for attribute ' + attribute, env.commandStr);
          if ('constant' in value) {
            var constant = value.constant;
            record.buffer = 'null';
            record.state = ATTRIB_STATE_CONSTANT;
            if (typeof constant === 'number') {
              record.x = constant;
            } else {
              check$1.command(
                isArrayLike(constant) &&
                constant.length > 0 &&
                constant.length <= 4,
                'invalid constant for attribute ' + attribute, env.commandStr);
              CUTE_COMPONENTS.forEach(function (c, i) {
                if (i < constant.length) {
                  record[c] = constant[i];
                }
              });
            }
          } else {
            if (isBufferArgs(value.buffer)) {
              buffer = bufferState.getBuffer(
                bufferState.create(value.buffer, GL_ARRAY_BUFFER$1, false, true));
            } else {
              buffer = bufferState.getBuffer(value.buffer);
            }
            check$1.command(!!buffer, 'missing buffer for attribute "' + attribute + '"', env.commandStr);

            var offset = value.offset | 0;
            check$1.command(offset >= 0,
              'invalid offset for attribute "' + attribute + '"', env.commandStr);

            var stride = value.stride | 0;
            check$1.command(stride >= 0 && stride < 256,
              'invalid stride for attribute "' + attribute + '", must be integer betweeen [0, 255]', env.commandStr);

            var size = value.size | 0;
            check$1.command(!('size' in value) || (size > 0 && size <= 4),
              'invalid size for attribute "' + attribute + '", must be 1,2,3,4', env.commandStr);

            var normalized = !!value.normalized;

            var type = 0;
            if ('type' in value) {
              check$1.commandParameter(
                value.type, glTypes,
                'invalid type for attribute ' + attribute, env.commandStr);
              type = glTypes[value.type];
            }

            var divisor = value.divisor | 0;
            if ('divisor' in value) {
              check$1.command(divisor === 0 || extInstancing,
                'cannot specify divisor for attribute "' + attribute + '", instancing not supported', env.commandStr);
              check$1.command(divisor >= 0,
                'invalid divisor for attribute "' + attribute + '"', env.commandStr);
            }

            check$1.optional(function () {
              var command = env.commandStr;

              var VALID_KEYS = [
                'buffer',
                'offset',
                'divisor',
                'normalized',
                'type',
                'size',
                'stride'
              ];

              Object.keys(value).forEach(function (prop) {
                check$1.command(
                  VALID_KEYS.indexOf(prop) >= 0,
                  'unknown parameter "' + prop + '" for attribute pointer "' + attribute + '" (valid parameters are ' + VALID_KEYS + ')',
                  command);
              });
            });

            record.buffer = buffer;
            record.state = ATTRIB_STATE_POINTER;
            record.size = size;
            record.normalized = normalized;
            record.type = type || buffer.dtype;
            record.offset = offset;
            record.stride = stride;
            record.divisor = divisor;
          }
        }
      }

      attributeDefs[attribute] = createStaticDecl(function (env, scope) {
        var cache = env.attribCache;
        if (id in cache) {
          return cache[id]
        }
        var result = {
          isStream: false
        };
        Object.keys(record).forEach(function (key) {
          result[key] = record[key];
        });
        if (record.buffer) {
          result.buffer = env.link(record.buffer);
          result.type = result.type || (result.buffer + '.dtype');
        }
        cache[id] = result;
        return result
      });
    });

    Object.keys(dynamicAttributes).forEach(function (attribute) {
      var dyn = dynamicAttributes[attribute];

      function appendAttributeCode (env, block) {
        var VALUE = env.invoke(block, dyn);

        var shared = env.shared;
        var constants = env.constants;

        var IS_BUFFER_ARGS = shared.isBufferArgs;
        var BUFFER_STATE = shared.buffer;

        // Perform validation on attribute
        check$1.optional(function () {
          env.assert(block,
            VALUE + '&&(typeof ' + VALUE + '==="object"||typeof ' +
            VALUE + '==="function")&&(' +
            IS_BUFFER_ARGS + '(' + VALUE + ')||' +
            BUFFER_STATE + '.getBuffer(' + VALUE + ')||' +
            BUFFER_STATE + '.getBuffer(' + VALUE + '.buffer)||' +
            IS_BUFFER_ARGS + '(' + VALUE + '.buffer)||' +
            '("constant" in ' + VALUE +
            '&&(typeof ' + VALUE + '.constant==="number"||' +
            shared.isArrayLike + '(' + VALUE + '.constant))))',
            'invalid dynamic attribute "' + attribute + '"');
        });

        // allocate names for result
        var result = {
          isStream: block.def(false)
        };
        var defaultRecord = new AttributeRecord();
        defaultRecord.state = ATTRIB_STATE_POINTER;
        Object.keys(defaultRecord).forEach(function (key) {
          result[key] = block.def('' + defaultRecord[key]);
        });

        var BUFFER = result.buffer;
        var TYPE = result.type;
        block(
          'if(', IS_BUFFER_ARGS, '(', VALUE, ')){',
          result.isStream, '=true;',
          BUFFER, '=', BUFFER_STATE, '.createStream(', GL_ARRAY_BUFFER$1, ',', VALUE, ');',
          TYPE, '=', BUFFER, '.dtype;',
          '}else{',
          BUFFER, '=', BUFFER_STATE, '.getBuffer(', VALUE, ');',
          'if(', BUFFER, '){',
          TYPE, '=', BUFFER, '.dtype;',
          '}else if("constant" in ', VALUE, '){',
          result.state, '=', ATTRIB_STATE_CONSTANT, ';',
          'if(typeof ' + VALUE + '.constant === "number"){',
          result[CUTE_COMPONENTS[0]], '=', VALUE, '.constant;',
          CUTE_COMPONENTS.slice(1).map(function (n) {
            return result[n]
          }).join('='), '=0;',
          '}else{',
          CUTE_COMPONENTS.map(function (name, i) {
            return (
              result[name] + '=' + VALUE + '.constant.length>' + i +
              '?' + VALUE + '.constant[' + i + ']:0;'
            )
          }).join(''),
          '}}else{',
          'if(', IS_BUFFER_ARGS, '(', VALUE, '.buffer)){',
          BUFFER, '=', BUFFER_STATE, '.createStream(', GL_ARRAY_BUFFER$1, ',', VALUE, '.buffer);',
          '}else{',
          BUFFER, '=', BUFFER_STATE, '.getBuffer(', VALUE, '.buffer);',
          '}',
          TYPE, '="type" in ', VALUE, '?',
          constants.glTypes, '[', VALUE, '.type]:', BUFFER, '.dtype;',
          result.normalized, '=!!', VALUE, '.normalized;');
        function emitReadRecord (name) {
          block(result[name], '=', VALUE, '.', name, '|0;');
        }
        emitReadRecord('size');
        emitReadRecord('offset');
        emitReadRecord('stride');
        emitReadRecord('divisor');

        block('}}');

        block.exit(
          'if(', result.isStream, '){',
          BUFFER_STATE, '.destroyStream(', BUFFER, ');',
          '}');

        return result
      }

      attributeDefs[attribute] = createDynamicDecl(dyn, appendAttributeCode);
    });

    return attributeDefs
  }

  function parseContext (context) {
    var staticContext = context.static;
    var dynamicContext = context.dynamic;
    var result = {};

    Object.keys(staticContext).forEach(function (name) {
      var value = staticContext[name];
      result[name] = createStaticDecl(function (env, scope) {
        if (typeof value === 'number' || typeof value === 'boolean') {
          return '' + value
        } else {
          return env.link(value)
        }
      });
    });

    Object.keys(dynamicContext).forEach(function (name) {
      var dyn = dynamicContext[name];
      result[name] = createDynamicDecl(dyn, function (env, scope) {
        return env.invoke(scope, dyn)
      });
    });

    return result
  }

  function parseArguments (options, attributes, uniforms, context, env) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    check$1.optional(function () {
      var KEY_NAMES = [
        S_FRAMEBUFFER,
        S_VERT,
        S_FRAG,
        S_ELEMENTS,
        S_PRIMITIVE,
        S_OFFSET,
        S_COUNT,
        S_INSTANCES,
        S_PROFILE
      ].concat(GL_STATE_NAMES);

      function checkKeys (dict) {
        Object.keys(dict).forEach(function (key) {
          check$1.command(
            KEY_NAMES.indexOf(key) >= 0,
            'unknown parameter "' + key + '"',
            env.commandStr);
        });
      }

      checkKeys(staticOptions);
      checkKeys(dynamicOptions);
    });

    var framebuffer = parseFramebuffer(options, env);
    var viewportAndScissor = parseViewportScissor(options, framebuffer, env);
    var draw = parseDraw(options, env);
    var state = parseGLState(options, env);
    var shader = parseProgram(options, env);

    function copyBox (name) {
      var defn = viewportAndScissor[name];
      if (defn) {
        state[name] = defn;
      }
    }
    copyBox(S_VIEWPORT);
    copyBox(propName(S_SCISSOR_BOX));

    var dirty = Object.keys(state).length > 0;

    var result = {
      framebuffer: framebuffer,
      draw: draw,
      shader: shader,
      state: state,
      dirty: dirty
    };

    result.profile = parseProfile(options, env);
    result.uniforms = parseUniforms(uniforms, env);
    result.attributes = parseAttributes(attributes, env);
    result.context = parseContext(context, env);
    return result
  }

  // ===================================================
  // ===================================================
  // COMMON UPDATE FUNCTIONS
  // ===================================================
  // ===================================================
  function emitContext (env, scope, context) {
    var shared = env.shared;
    var CONTEXT = shared.context;

    var contextEnter = env.scope();

    Object.keys(context).forEach(function (name) {
      scope.save(CONTEXT, '.' + name);
      var defn = context[name];
      contextEnter(CONTEXT, '.', name, '=', defn.append(env, scope), ';');
    });

    scope(contextEnter);
  }

  // ===================================================
  // ===================================================
  // COMMON DRAWING FUNCTIONS
  // ===================================================
  // ===================================================
  function emitPollFramebuffer (env, scope, framebuffer, skipCheck) {
    var shared = env.shared;

    var GL = shared.gl;
    var FRAMEBUFFER_STATE = shared.framebuffer;
    var EXT_DRAW_BUFFERS;
    if (extDrawBuffers) {
      EXT_DRAW_BUFFERS = scope.def(shared.extensions, '.webgl_draw_buffers');
    }

    var constants = env.constants;

    var DRAW_BUFFERS = constants.drawBuffer;
    var BACK_BUFFER = constants.backBuffer;

    var NEXT;
    if (framebuffer) {
      NEXT = framebuffer.append(env, scope);
    } else {
      NEXT = scope.def(FRAMEBUFFER_STATE, '.next');
    }

    if (!skipCheck) {
      scope('if(', NEXT, '!==', FRAMEBUFFER_STATE, '.cur){');
    }
    scope(
      'if(', NEXT, '){',
      GL, '.bindFramebuffer(', GL_FRAMEBUFFER$2, ',', NEXT, '.framebuffer);');
    if (extDrawBuffers) {
      scope(EXT_DRAW_BUFFERS, '.drawBuffersWEBGL(',
        DRAW_BUFFERS, '[', NEXT, '.colorAttachments.length]);');
    }
    scope('}else{',
      GL, '.bindFramebuffer(', GL_FRAMEBUFFER$2, ',null);');
    if (extDrawBuffers) {
      scope(EXT_DRAW_BUFFERS, '.drawBuffersWEBGL(', BACK_BUFFER, ');');
    }
    scope(
      '}',
      FRAMEBUFFER_STATE, '.cur=', NEXT, ';');
    if (!skipCheck) {
      scope('}');
    }
  }

  function emitPollState (env, scope, args) {
    var shared = env.shared;

    var GL = shared.gl;

    var CURRENT_VARS = env.current;
    var NEXT_VARS = env.next;
    var CURRENT_STATE = shared.current;
    var NEXT_STATE = shared.next;

    var block = env.cond(CURRENT_STATE, '.dirty');

    GL_STATE_NAMES.forEach(function (prop) {
      var param = propName(prop);
      if (param in args.state) {
        return
      }

      var NEXT, CURRENT;
      if (param in NEXT_VARS) {
        NEXT = NEXT_VARS[param];
        CURRENT = CURRENT_VARS[param];
        var parts = loop(currentState[param].length, function (i) {
          return block.def(NEXT, '[', i, ']')
        });
        block(env.cond(parts.map(function (p, i) {
          return p + '!==' + CURRENT + '[' + i + ']'
        }).join('||'))
          .then(
            GL, '.', GL_VARIABLES[param], '(', parts, ');',
            parts.map(function (p, i) {
              return CURRENT + '[' + i + ']=' + p
            }).join(';'), ';'));
      } else {
        NEXT = block.def(NEXT_STATE, '.', param);
        var ifte = env.cond(NEXT, '!==', CURRENT_STATE, '.', param);
        block(ifte);
        if (param in GL_FLAGS) {
          ifte(
            env.cond(NEXT)
                .then(GL, '.enable(', GL_FLAGS[param], ');')
                .else(GL, '.disable(', GL_FLAGS[param], ');'),
            CURRENT_STATE, '.', param, '=', NEXT, ';');
        } else {
          ifte(
            GL, '.', GL_VARIABLES[param], '(', NEXT, ');',
            CURRENT_STATE, '.', param, '=', NEXT, ';');
        }
      }
    });
    if (Object.keys(args.state).length === 0) {
      block(CURRENT_STATE, '.dirty=false;');
    }
    scope(block);
  }

  function emitSetOptions (env, scope, options, filter) {
    var shared = env.shared;
    var CURRENT_VARS = env.current;
    var CURRENT_STATE = shared.current;
    var GL = shared.gl;
    sortState(Object.keys(options)).forEach(function (param) {
      var defn = options[param];
      if (filter && !filter(defn)) {
        return
      }
      var variable = defn.append(env, scope);
      if (GL_FLAGS[param]) {
        var flag = GL_FLAGS[param];
        if (isStatic(defn)) {
          if (variable) {
            scope(GL, '.enable(', flag, ');');
          } else {
            scope(GL, '.disable(', flag, ');');
          }
        } else {
          scope(env.cond(variable)
            .then(GL, '.enable(', flag, ');')
            .else(GL, '.disable(', flag, ');'));
        }
        scope(CURRENT_STATE, '.', param, '=', variable, ';');
      } else if (isArrayLike(variable)) {
        var CURRENT = CURRENT_VARS[param];
        scope(
          GL, '.', GL_VARIABLES[param], '(', variable, ');',
          variable.map(function (v, i) {
            return CURRENT + '[' + i + ']=' + v
          }).join(';'), ';');
      } else {
        scope(
          GL, '.', GL_VARIABLES[param], '(', variable, ');',
          CURRENT_STATE, '.', param, '=', variable, ';');
      }
    });
  }

  function injectExtensions (env, scope) {
    if (extInstancing) {
      env.instancing = scope.def(
        env.shared.extensions, '.angle_instanced_arrays');
    }
  }

  function emitProfile (env, scope, args, useScope, incrementCounter) {
    var shared = env.shared;
    var STATS = env.stats;
    var CURRENT_STATE = shared.current;
    var TIMER = shared.timer;
    var profileArg = args.profile;

    function perfCounter () {
      if (typeof performance === 'undefined') {
        return 'Date.now()'
      } else {
        return 'performance.now()'
      }
    }

    var CPU_START, QUERY_COUNTER;
    function emitProfileStart (block) {
      CPU_START = scope.def();
      block(CPU_START, '=', perfCounter(), ';');
      if (typeof incrementCounter === 'string') {
        block(STATS, '.count+=', incrementCounter, ';');
      } else {
        block(STATS, '.count++;');
      }
      if (timer) {
        if (useScope) {
          QUERY_COUNTER = scope.def();
          block(QUERY_COUNTER, '=', TIMER, '.getNumPendingQueries();');
        } else {
          block(TIMER, '.beginQuery(', STATS, ');');
        }
      }
    }

    function emitProfileEnd (block) {
      block(STATS, '.cpuTime+=', perfCounter(), '-', CPU_START, ';');
      if (timer) {
        if (useScope) {
          block(TIMER, '.pushScopeStats(',
            QUERY_COUNTER, ',',
            TIMER, '.getNumPendingQueries(),',
            STATS, ');');
        } else {
          block(TIMER, '.endQuery();');
        }
      }
    }

    function scopeProfile (value) {
      var prev = scope.def(CURRENT_STATE, '.profile');
      scope(CURRENT_STATE, '.profile=', value, ';');
      scope.exit(CURRENT_STATE, '.profile=', prev, ';');
    }

    var USE_PROFILE;
    if (profileArg) {
      if (isStatic(profileArg)) {
        if (profileArg.enable) {
          emitProfileStart(scope);
          emitProfileEnd(scope.exit);
          scopeProfile('true');
        } else {
          scopeProfile('false');
        }
        return
      }
      USE_PROFILE = profileArg.append(env, scope);
      scopeProfile(USE_PROFILE);
    } else {
      USE_PROFILE = scope.def(CURRENT_STATE, '.profile');
    }

    var start = env.block();
    emitProfileStart(start);
    scope('if(', USE_PROFILE, '){', start, '}');
    var end = env.block();
    emitProfileEnd(end);
    scope.exit('if(', USE_PROFILE, '){', end, '}');
  }

  function emitAttributes (env, scope, args, attributes, filter) {
    var shared = env.shared;

    function typeLength (x) {
      switch (x) {
        case GL_FLOAT_VEC2:
        case GL_INT_VEC2:
        case GL_BOOL_VEC2:
          return 2
        case GL_FLOAT_VEC3:
        case GL_INT_VEC3:
        case GL_BOOL_VEC3:
          return 3
        case GL_FLOAT_VEC4:
        case GL_INT_VEC4:
        case GL_BOOL_VEC4:
          return 4
        default:
          return 1
      }
    }

    function emitBindAttribute (ATTRIBUTE, size, record) {
      var GL = shared.gl;

      var LOCATION = scope.def(ATTRIBUTE, '.location');
      var BINDING = scope.def(shared.attributes, '[', LOCATION, ']');

      var STATE = record.state;
      var BUFFER = record.buffer;
      var CONST_COMPONENTS = [
        record.x,
        record.y,
        record.z,
        record.w
      ];

      var COMMON_KEYS = [
        'buffer',
        'normalized',
        'offset',
        'stride'
      ];

      function emitBuffer () {
        scope(
          'if(!', BINDING, '.buffer){',
          GL, '.enableVertexAttribArray(', LOCATION, ');}');

        var TYPE = record.type;
        var SIZE;
        if (!record.size) {
          SIZE = size;
        } else {
          SIZE = scope.def(record.size, '||', size);
        }

        scope('if(',
          BINDING, '.type!==', TYPE, '||',
          BINDING, '.size!==', SIZE, '||',
          COMMON_KEYS.map(function (key) {
            return BINDING + '.' + key + '!==' + record[key]
          }).join('||'),
          '){',
          GL, '.bindBuffer(', GL_ARRAY_BUFFER$1, ',', BUFFER, '.buffer);',
          GL, '.vertexAttribPointer(', [
            LOCATION,
            SIZE,
            TYPE,
            record.normalized,
            record.stride,
            record.offset
          ], ');',
          BINDING, '.type=', TYPE, ';',
          BINDING, '.size=', SIZE, ';',
          COMMON_KEYS.map(function (key) {
            return BINDING + '.' + key + '=' + record[key] + ';'
          }).join(''),
          '}');

        if (extInstancing) {
          var DIVISOR = record.divisor;
          scope(
            'if(', BINDING, '.divisor!==', DIVISOR, '){',
            env.instancing, '.vertexAttribDivisorANGLE(', [LOCATION, DIVISOR], ');',
            BINDING, '.divisor=', DIVISOR, ';}');
        }
      }

      function emitConstant () {
        scope(
          'if(', BINDING, '.buffer){',
          GL, '.disableVertexAttribArray(', LOCATION, ');',
          BINDING, '.buffer=null;',
          '}if(', CUTE_COMPONENTS.map(function (c, i) {
            return BINDING + '.' + c + '!==' + CONST_COMPONENTS[i]
          }).join('||'), '){',
          GL, '.vertexAttrib4f(', LOCATION, ',', CONST_COMPONENTS, ');',
          CUTE_COMPONENTS.map(function (c, i) {
            return BINDING + '.' + c + '=' + CONST_COMPONENTS[i] + ';'
          }).join(''),
          '}');
      }

      if (STATE === ATTRIB_STATE_POINTER) {
        emitBuffer();
      } else if (STATE === ATTRIB_STATE_CONSTANT) {
        emitConstant();
      } else {
        scope('if(', STATE, '===', ATTRIB_STATE_POINTER, '){');
        emitBuffer();
        scope('}else{');
        emitConstant();
        scope('}');
      }
    }

    attributes.forEach(function (attribute) {
      var name = attribute.name;
      var arg = args.attributes[name];
      var record;
      if (arg) {
        if (!filter(arg)) {
          return
        }
        record = arg.append(env, scope);
      } else {
        if (!filter(SCOPE_DECL)) {
          return
        }
        var scopeAttrib = env.scopeAttrib(name);
        check$1.optional(function () {
          env.assert(scope,
            scopeAttrib + '.state',
            'missing attribute ' + name);
        });
        record = {};
        Object.keys(new AttributeRecord()).forEach(function (key) {
          record[key] = scope.def(scopeAttrib, '.', key);
        });
      }
      emitBindAttribute(
        env.link(attribute), typeLength(attribute.info.type), record);
    });
  }

  function emitUniforms (env, scope, args, uniforms, filter) {
    var shared = env.shared;
    var GL = shared.gl;

    var infix;
    for (var i = 0; i < uniforms.length; ++i) {
      var uniform = uniforms[i];
      var name = uniform.name;
      var type = uniform.info.type;
      var arg = args.uniforms[name];
      var UNIFORM = env.link(uniform);
      var LOCATION = UNIFORM + '.location';

      var VALUE;
      if (arg) {
        if (!filter(arg)) {
          continue
        }
        if (isStatic(arg)) {
          var value = arg.value;
          check$1.command(
            value !== null && typeof value !== 'undefined',
            'missing uniform "' + name + '"', env.commandStr);
          if (type === GL_SAMPLER_2D || type === GL_SAMPLER_CUBE) {
            check$1.command(
              typeof value === 'function' &&
              ((type === GL_SAMPLER_2D &&
                (value._reglType === 'texture2d' ||
                value._reglType === 'framebuffer')) ||
              (type === GL_SAMPLER_CUBE &&
                (value._reglType === 'textureCube' ||
                value._reglType === 'framebufferCube'))),
              'invalid texture for uniform ' + name, env.commandStr);
            var TEX_VALUE = env.link(value._texture || value.color[0]._texture);
            scope(GL, '.uniform1i(', LOCATION, ',', TEX_VALUE + '.bind());');
            scope.exit(TEX_VALUE, '.unbind();');
          } else if (
            type === GL_FLOAT_MAT2 ||
            type === GL_FLOAT_MAT3 ||
            type === GL_FLOAT_MAT4) {
            check$1.optional(function () {
              check$1.command(isArrayLike(value),
                'invalid matrix for uniform ' + name, env.commandStr);
              check$1.command(
                (type === GL_FLOAT_MAT2 && value.length === 4) ||
                (type === GL_FLOAT_MAT3 && value.length === 9) ||
                (type === GL_FLOAT_MAT4 && value.length === 16),
                'invalid length for matrix uniform ' + name, env.commandStr);
            });
            var MAT_VALUE = env.global.def('new Float32Array([' +
              Array.prototype.slice.call(value) + '])');
            var dim = 2;
            if (type === GL_FLOAT_MAT3) {
              dim = 3;
            } else if (type === GL_FLOAT_MAT4) {
              dim = 4;
            }
            scope(
              GL, '.uniformMatrix', dim, 'fv(',
              LOCATION, ',false,', MAT_VALUE, ');');
          } else {
            switch (type) {
              case GL_FLOAT$8:
                check$1.commandType(value, 'number', 'uniform ' + name, env.commandStr);
                infix = '1f';
                break
              case GL_FLOAT_VEC2:
                check$1.command(
                  isArrayLike(value) && value.length === 2,
                  'uniform ' + name, env.commandStr);
                infix = '2f';
                break
              case GL_FLOAT_VEC3:
                check$1.command(
                  isArrayLike(value) && value.length === 3,
                  'uniform ' + name, env.commandStr);
                infix = '3f';
                break
              case GL_FLOAT_VEC4:
                check$1.command(
                  isArrayLike(value) && value.length === 4,
                  'uniform ' + name, env.commandStr);
                infix = '4f';
                break
              case GL_BOOL:
                check$1.commandType(value, 'boolean', 'uniform ' + name, env.commandStr);
                infix = '1i';
                break
              case GL_INT$3:
                check$1.commandType(value, 'number', 'uniform ' + name, env.commandStr);
                infix = '1i';
                break
              case GL_BOOL_VEC2:
                check$1.command(
                  isArrayLike(value) && value.length === 2,
                  'uniform ' + name, env.commandStr);
                infix = '2i';
                break
              case GL_INT_VEC2:
                check$1.command(
                  isArrayLike(value) && value.length === 2,
                  'uniform ' + name, env.commandStr);
                infix = '2i';
                break
              case GL_BOOL_VEC3:
                check$1.command(
                  isArrayLike(value) && value.length === 3,
                  'uniform ' + name, env.commandStr);
                infix = '3i';
                break
              case GL_INT_VEC3:
                check$1.command(
                  isArrayLike(value) && value.length === 3,
                  'uniform ' + name, env.commandStr);
                infix = '3i';
                break
              case GL_BOOL_VEC4:
                check$1.command(
                  isArrayLike(value) && value.length === 4,
                  'uniform ' + name, env.commandStr);
                infix = '4i';
                break
              case GL_INT_VEC4:
                check$1.command(
                  isArrayLike(value) && value.length === 4,
                  'uniform ' + name, env.commandStr);
                infix = '4i';
                break
            }
            scope(GL, '.uniform', infix, '(', LOCATION, ',',
              isArrayLike(value) ? Array.prototype.slice.call(value) : value,
              ');');
          }
          continue
        } else {
          VALUE = arg.append(env, scope);
        }
      } else {
        if (!filter(SCOPE_DECL)) {
          continue
        }
        VALUE = scope.def(shared.uniforms, '[', stringStore.id(name), ']');
      }

      if (type === GL_SAMPLER_2D) {
        scope(
          'if(', VALUE, '&&', VALUE, '._reglType==="framebuffer"){',
          VALUE, '=', VALUE, '.color[0];',
          '}');
      } else if (type === GL_SAMPLER_CUBE) {
        scope(
          'if(', VALUE, '&&', VALUE, '._reglType==="framebufferCube"){',
          VALUE, '=', VALUE, '.color[0];',
          '}');
      }

      // perform type validation
      check$1.optional(function () {
        function check (pred, message) {
          env.assert(scope, pred,
            'bad data or missing for uniform "' + name + '".  ' + message);
        }

        function checkType (type) {
          check(
            'typeof ' + VALUE + '==="' + type + '"',
            'invalid type, expected ' + type);
        }

        function checkVector (n, type) {
          check(
            shared.isArrayLike + '(' + VALUE + ')&&' + VALUE + '.length===' + n,
            'invalid vector, should have length ' + n, env.commandStr);
        }

        function checkTexture (target) {
          check(
            'typeof ' + VALUE + '==="function"&&' +
            VALUE + '._reglType==="texture' +
            (target === GL_TEXTURE_2D$3 ? '2d' : 'Cube') + '"',
            'invalid texture type', env.commandStr);
        }

        switch (type) {
          case GL_INT$3:
            checkType('number');
            break
          case GL_INT_VEC2:
            checkVector(2, 'number');
            break
          case GL_INT_VEC3:
            checkVector(3, 'number');
            break
          case GL_INT_VEC4:
            checkVector(4, 'number');
            break
          case GL_FLOAT$8:
            checkType('number');
            break
          case GL_FLOAT_VEC2:
            checkVector(2, 'number');
            break
          case GL_FLOAT_VEC3:
            checkVector(3, 'number');
            break
          case GL_FLOAT_VEC4:
            checkVector(4, 'number');
            break
          case GL_BOOL:
            checkType('boolean');
            break
          case GL_BOOL_VEC2:
            checkVector(2, 'boolean');
            break
          case GL_BOOL_VEC3:
            checkVector(3, 'boolean');
            break
          case GL_BOOL_VEC4:
            checkVector(4, 'boolean');
            break
          case GL_FLOAT_MAT2:
            checkVector(4, 'number');
            break
          case GL_FLOAT_MAT3:
            checkVector(9, 'number');
            break
          case GL_FLOAT_MAT4:
            checkVector(16, 'number');
            break
          case GL_SAMPLER_2D:
            checkTexture(GL_TEXTURE_2D$3);
            break
          case GL_SAMPLER_CUBE:
            checkTexture(GL_TEXTURE_CUBE_MAP$2);
            break
        }
      });

      var unroll = 1;
      switch (type) {
        case GL_SAMPLER_2D:
        case GL_SAMPLER_CUBE:
          var TEX = scope.def(VALUE, '._texture');
          scope(GL, '.uniform1i(', LOCATION, ',', TEX, '.bind());');
          scope.exit(TEX, '.unbind();');
          continue

        case GL_INT$3:
        case GL_BOOL:
          infix = '1i';
          break

        case GL_INT_VEC2:
        case GL_BOOL_VEC2:
          infix = '2i';
          unroll = 2;
          break

        case GL_INT_VEC3:
        case GL_BOOL_VEC3:
          infix = '3i';
          unroll = 3;
          break

        case GL_INT_VEC4:
        case GL_BOOL_VEC4:
          infix = '4i';
          unroll = 4;
          break

        case GL_FLOAT$8:
          infix = '1f';
          break

        case GL_FLOAT_VEC2:
          infix = '2f';
          unroll = 2;
          break

        case GL_FLOAT_VEC3:
          infix = '3f';
          unroll = 3;
          break

        case GL_FLOAT_VEC4:
          infix = '4f';
          unroll = 4;
          break

        case GL_FLOAT_MAT2:
          infix = 'Matrix2fv';
          break

        case GL_FLOAT_MAT3:
          infix = 'Matrix3fv';
          break

        case GL_FLOAT_MAT4:
          infix = 'Matrix4fv';
          break
      }

      scope(GL, '.uniform', infix, '(', LOCATION, ',');
      if (infix.charAt(0) === 'M') {
        var matSize = Math.pow(type - GL_FLOAT_MAT2 + 2, 2);
        var STORAGE = env.global.def('new Float32Array(', matSize, ')');
        scope(
          'false,(Array.isArray(', VALUE, ')||', VALUE, ' instanceof Float32Array)?', VALUE, ':(',
          loop(matSize, function (i) {
            return STORAGE + '[' + i + ']=' + VALUE + '[' + i + ']'
          }), ',', STORAGE, ')');
      } else if (unroll > 1) {
        scope(loop(unroll, function (i) {
          return VALUE + '[' + i + ']'
        }));
      } else {
        scope(VALUE);
      }
      scope(');');
    }
  }

  function emitDraw (env, outer, inner, args) {
    var shared = env.shared;
    var GL = shared.gl;
    var DRAW_STATE = shared.draw;

    var drawOptions = args.draw;

    function emitElements () {
      var defn = drawOptions.elements;
      var ELEMENTS;
      var scope = outer;
      if (defn) {
        if ((defn.contextDep && args.contextDynamic) || defn.propDep) {
          scope = inner;
        }
        ELEMENTS = defn.append(env, scope);
      } else {
        ELEMENTS = scope.def(DRAW_STATE, '.', S_ELEMENTS);
      }
      if (ELEMENTS) {
        scope(
          'if(' + ELEMENTS + ')' +
          GL + '.bindBuffer(' + GL_ELEMENT_ARRAY_BUFFER$1 + ',' + ELEMENTS + '.buffer.buffer);');
      }
      return ELEMENTS
    }

    function emitCount () {
      var defn = drawOptions.count;
      var COUNT;
      var scope = outer;
      if (defn) {
        if ((defn.contextDep && args.contextDynamic) || defn.propDep) {
          scope = inner;
        }
        COUNT = defn.append(env, scope);
        check$1.optional(function () {
          if (defn.MISSING) {
            env.assert(outer, 'false', 'missing vertex count');
          }
          if (defn.DYNAMIC) {
            env.assert(scope, COUNT + '>=0', 'missing vertex count');
          }
        });
      } else {
        COUNT = scope.def(DRAW_STATE, '.', S_COUNT);
        check$1.optional(function () {
          env.assert(scope, COUNT + '>=0', 'missing vertex count');
        });
      }
      return COUNT
    }

    var ELEMENTS = emitElements();
    function emitValue (name) {
      var defn = drawOptions[name];
      if (defn) {
        if ((defn.contextDep && args.contextDynamic) || defn.propDep) {
          return defn.append(env, inner)
        } else {
          return defn.append(env, outer)
        }
      } else {
        return outer.def(DRAW_STATE, '.', name)
      }
    }

    var PRIMITIVE = emitValue(S_PRIMITIVE);
    var OFFSET = emitValue(S_OFFSET);

    var COUNT = emitCount();
    if (typeof COUNT === 'number') {
      if (COUNT === 0) {
        return
      }
    } else {
      inner('if(', COUNT, '){');
      inner.exit('}');
    }

    var INSTANCES, EXT_INSTANCING;
    if (extInstancing) {
      INSTANCES = emitValue(S_INSTANCES);
      EXT_INSTANCING = env.instancing;
    }

    var ELEMENT_TYPE = ELEMENTS + '.type';

    var elementsStatic = drawOptions.elements && isStatic(drawOptions.elements);

    function emitInstancing () {
      function drawElements () {
        inner(EXT_INSTANCING, '.drawElementsInstancedANGLE(', [
          PRIMITIVE,
          COUNT,
          ELEMENT_TYPE,
          OFFSET + '<<((' + ELEMENT_TYPE + '-' + GL_UNSIGNED_BYTE$8 + ')>>1)',
          INSTANCES
        ], ');');
      }

      function drawArrays () {
        inner(EXT_INSTANCING, '.drawArraysInstancedANGLE(',
          [PRIMITIVE, OFFSET, COUNT, INSTANCES], ');');
      }

      if (ELEMENTS) {
        if (!elementsStatic) {
          inner('if(', ELEMENTS, '){');
          drawElements();
          inner('}else{');
          drawArrays();
          inner('}');
        } else {
          drawElements();
        }
      } else {
        drawArrays();
      }
    }

    function emitRegular () {
      function drawElements () {
        inner(GL + '.drawElements(' + [
          PRIMITIVE,
          COUNT,
          ELEMENT_TYPE,
          OFFSET + '<<((' + ELEMENT_TYPE + '-' + GL_UNSIGNED_BYTE$8 + ')>>1)'
        ] + ');');
      }

      function drawArrays () {
        inner(GL + '.drawArrays(' + [PRIMITIVE, OFFSET, COUNT] + ');');
      }

      if (ELEMENTS) {
        if (!elementsStatic) {
          inner('if(', ELEMENTS, '){');
          drawElements();
          inner('}else{');
          drawArrays();
          inner('}');
        } else {
          drawElements();
        }
      } else {
        drawArrays();
      }
    }

    if (extInstancing && (typeof INSTANCES !== 'number' || INSTANCES >= 0)) {
      if (typeof INSTANCES === 'string') {
        inner('if(', INSTANCES, '>0){');
        emitInstancing();
        inner('}else if(', INSTANCES, '<0){');
        emitRegular();
        inner('}');
      } else {
        emitInstancing();
      }
    } else {
      emitRegular();
    }
  }

  function createBody (emitBody, parentEnv, args, program, count) {
    var env = createREGLEnvironment();
    var scope = env.proc('body', count);
    check$1.optional(function () {
      env.commandStr = parentEnv.commandStr;
      env.command = env.link(parentEnv.commandStr);
    });
    if (extInstancing) {
      env.instancing = scope.def(
        env.shared.extensions, '.angle_instanced_arrays');
    }
    emitBody(env, scope, args, program);
    return env.compile().body
  }

  // ===================================================
  // ===================================================
  // DRAW PROC
  // ===================================================
  // ===================================================
  function emitDrawBody (env, draw, args, program) {
    injectExtensions(env, draw);
    emitAttributes(env, draw, args, program.attributes, function () {
      return true
    });
    emitUniforms(env, draw, args, program.uniforms, function () {
      return true
    });
    emitDraw(env, draw, draw, args);
  }

  function emitDrawProc (env, args) {
    var draw = env.proc('draw', 1);

    injectExtensions(env, draw);

    emitContext(env, draw, args.context);
    emitPollFramebuffer(env, draw, args.framebuffer);

    emitPollState(env, draw, args);
    emitSetOptions(env, draw, args.state);

    emitProfile(env, draw, args, false, true);

    var program = args.shader.progVar.append(env, draw);
    draw(env.shared.gl, '.useProgram(', program, '.program);');

    if (args.shader.program) {
      emitDrawBody(env, draw, args, args.shader.program);
    } else {
      var drawCache = env.global.def('{}');
      var PROG_ID = draw.def(program, '.id');
      var CACHED_PROC = draw.def(drawCache, '[', PROG_ID, ']');
      draw(
        env.cond(CACHED_PROC)
          .then(CACHED_PROC, '.call(this,a0);')
          .else(
            CACHED_PROC, '=', drawCache, '[', PROG_ID, ']=',
            env.link(function (program) {
              return createBody(emitDrawBody, env, args, program, 1)
            }), '(', program, ');',
            CACHED_PROC, '.call(this,a0);'));
    }

    if (Object.keys(args.state).length > 0) {
      draw(env.shared.current, '.dirty=true;');
    }
  }

  // ===================================================
  // ===================================================
  // BATCH PROC
  // ===================================================
  // ===================================================

  function emitBatchDynamicShaderBody (env, scope, args, program) {
    env.batchId = 'a1';

    injectExtensions(env, scope);

    function all () {
      return true
    }

    emitAttributes(env, scope, args, program.attributes, all);
    emitUniforms(env, scope, args, program.uniforms, all);
    emitDraw(env, scope, scope, args);
  }

  function emitBatchBody (env, scope, args, program) {
    injectExtensions(env, scope);

    var contextDynamic = args.contextDep;

    var BATCH_ID = scope.def();
    var PROP_LIST = 'a0';
    var NUM_PROPS = 'a1';
    var PROPS = scope.def();
    env.shared.props = PROPS;
    env.batchId = BATCH_ID;

    var outer = env.scope();
    var inner = env.scope();

    scope(
      outer.entry,
      'for(', BATCH_ID, '=0;', BATCH_ID, '<', NUM_PROPS, ';++', BATCH_ID, '){',
      PROPS, '=', PROP_LIST, '[', BATCH_ID, '];',
      inner,
      '}',
      outer.exit);

    function isInnerDefn (defn) {
      return ((defn.contextDep && contextDynamic) || defn.propDep)
    }

    function isOuterDefn (defn) {
      return !isInnerDefn(defn)
    }

    if (args.needsContext) {
      emitContext(env, inner, args.context);
    }
    if (args.needsFramebuffer) {
      emitPollFramebuffer(env, inner, args.framebuffer);
    }
    emitSetOptions(env, inner, args.state, isInnerDefn);

    if (args.profile && isInnerDefn(args.profile)) {
      emitProfile(env, inner, args, false, true);
    }

    if (!program) {
      var progCache = env.global.def('{}');
      var PROGRAM = args.shader.progVar.append(env, inner);
      var PROG_ID = inner.def(PROGRAM, '.id');
      var CACHED_PROC = inner.def(progCache, '[', PROG_ID, ']');
      inner(
        env.shared.gl, '.useProgram(', PROGRAM, '.program);',
        'if(!', CACHED_PROC, '){',
        CACHED_PROC, '=', progCache, '[', PROG_ID, ']=',
        env.link(function (program) {
          return createBody(
            emitBatchDynamicShaderBody, env, args, program, 2)
        }), '(', PROGRAM, ');}',
        CACHED_PROC, '.call(this,a0[', BATCH_ID, '],', BATCH_ID, ');');
    } else {
      emitAttributes(env, outer, args, program.attributes, isOuterDefn);
      emitAttributes(env, inner, args, program.attributes, isInnerDefn);
      emitUniforms(env, outer, args, program.uniforms, isOuterDefn);
      emitUniforms(env, inner, args, program.uniforms, isInnerDefn);
      emitDraw(env, outer, inner, args);
    }
  }

  function emitBatchProc (env, args) {
    var batch = env.proc('batch', 2);
    env.batchId = '0';

    injectExtensions(env, batch);

    // Check if any context variables depend on props
    var contextDynamic = false;
    var needsContext = true;
    Object.keys(args.context).forEach(function (name) {
      contextDynamic = contextDynamic || args.context[name].propDep;
    });
    if (!contextDynamic) {
      emitContext(env, batch, args.context);
      needsContext = false;
    }

    // framebuffer state affects framebufferWidth/height context vars
    var framebuffer = args.framebuffer;
    var needsFramebuffer = false;
    if (framebuffer) {
      if (framebuffer.propDep) {
        contextDynamic = needsFramebuffer = true;
      } else if (framebuffer.contextDep && contextDynamic) {
        needsFramebuffer = true;
      }
      if (!needsFramebuffer) {
        emitPollFramebuffer(env, batch, framebuffer);
      }
    } else {
      emitPollFramebuffer(env, batch, null);
    }

    // viewport is weird because it can affect context vars
    if (args.state.viewport && args.state.viewport.propDep) {
      contextDynamic = true;
    }

    function isInnerDefn (defn) {
      return (defn.contextDep && contextDynamic) || defn.propDep
    }

    // set webgl options
    emitPollState(env, batch, args);
    emitSetOptions(env, batch, args.state, function (defn) {
      return !isInnerDefn(defn)
    });

    if (!args.profile || !isInnerDefn(args.profile)) {
      emitProfile(env, batch, args, false, 'a1');
    }

    // Save these values to args so that the batch body routine can use them
    args.contextDep = contextDynamic;
    args.needsContext = needsContext;
    args.needsFramebuffer = needsFramebuffer;

    // determine if shader is dynamic
    var progDefn = args.shader.progVar;
    if ((progDefn.contextDep && contextDynamic) || progDefn.propDep) {
      emitBatchBody(
        env,
        batch,
        args,
        null);
    } else {
      var PROGRAM = progDefn.append(env, batch);
      batch(env.shared.gl, '.useProgram(', PROGRAM, '.program);');
      if (args.shader.program) {
        emitBatchBody(
          env,
          batch,
          args,
          args.shader.program);
      } else {
        var batchCache = env.global.def('{}');
        var PROG_ID = batch.def(PROGRAM, '.id');
        var CACHED_PROC = batch.def(batchCache, '[', PROG_ID, ']');
        batch(
          env.cond(CACHED_PROC)
            .then(CACHED_PROC, '.call(this,a0,a1);')
            .else(
              CACHED_PROC, '=', batchCache, '[', PROG_ID, ']=',
              env.link(function (program) {
                return createBody(emitBatchBody, env, args, program, 2)
              }), '(', PROGRAM, ');',
              CACHED_PROC, '.call(this,a0,a1);'));
      }
    }

    if (Object.keys(args.state).length > 0) {
      batch(env.shared.current, '.dirty=true;');
    }
  }

  // ===================================================
  // ===================================================
  // SCOPE COMMAND
  // ===================================================
  // ===================================================
  function emitScopeProc (env, args) {
    var scope = env.proc('scope', 3);
    env.batchId = 'a2';

    var shared = env.shared;
    var CURRENT_STATE = shared.current;

    emitContext(env, scope, args.context);

    if (args.framebuffer) {
      args.framebuffer.append(env, scope);
    }

    sortState(Object.keys(args.state)).forEach(function (name) {
      var defn = args.state[name];
      var value = defn.append(env, scope);
      if (isArrayLike(value)) {
        value.forEach(function (v, i) {
          scope.set(env.next[name], '[' + i + ']', v);
        });
      } else {
        scope.set(shared.next, '.' + name, value);
      }
    });

    emitProfile(env, scope, args, true, true)

    ;[S_ELEMENTS, S_OFFSET, S_COUNT, S_INSTANCES, S_PRIMITIVE].forEach(
      function (opt) {
        var variable = args.draw[opt];
        if (!variable) {
          return
        }
        scope.set(shared.draw, '.' + opt, '' + variable.append(env, scope));
      });

    Object.keys(args.uniforms).forEach(function (opt) {
      scope.set(
        shared.uniforms,
        '[' + stringStore.id(opt) + ']',
        args.uniforms[opt].append(env, scope));
    });

    Object.keys(args.attributes).forEach(function (name) {
      var record = args.attributes[name].append(env, scope);
      var scopeAttrib = env.scopeAttrib(name);
      Object.keys(new AttributeRecord()).forEach(function (prop) {
        scope.set(scopeAttrib, '.' + prop, record[prop]);
      });
    });

    function saveShader (name) {
      var shader = args.shader[name];
      if (shader) {
        scope.set(shared.shader, '.' + name, shader.append(env, scope));
      }
    }
    saveShader(S_VERT);
    saveShader(S_FRAG);

    if (Object.keys(args.state).length > 0) {
      scope(CURRENT_STATE, '.dirty=true;');
      scope.exit(CURRENT_STATE, '.dirty=true;');
    }

    scope('a1(', env.shared.context, ',a0,', env.batchId, ');');
  }

  function isDynamicObject (object) {
    if (typeof object !== 'object' || isArrayLike(object)) {
      return
    }
    var props = Object.keys(object);
    for (var i = 0; i < props.length; ++i) {
      if (dynamic.isDynamic(object[props[i]])) {
        return true
      }
    }
    return false
  }

  function splatObject (env, options, name) {
    var object = options.static[name];
    if (!object || !isDynamicObject(object)) {
      return
    }

    var globals = env.global;
    var keys = Object.keys(object);
    var thisDep = false;
    var contextDep = false;
    var propDep = false;
    var objectRef = env.global.def('{}');
    keys.forEach(function (key) {
      var value = object[key];
      if (dynamic.isDynamic(value)) {
        if (typeof value === 'function') {
          value = object[key] = dynamic.unbox(value);
        }
        var deps = createDynamicDecl(value, null);
        thisDep = thisDep || deps.thisDep;
        propDep = propDep || deps.propDep;
        contextDep = contextDep || deps.contextDep;
      } else {
        globals(objectRef, '.', key, '=');
        switch (typeof value) {
          case 'number':
            globals(value);
            break
          case 'string':
            globals('"', value, '"');
            break
          case 'object':
            if (Array.isArray(value)) {
              globals('[', value.join(), ']');
            }
            break
          default:
            globals(env.link(value));
            break
        }
        globals(';');
      }
    });

    function appendBlock (env, block) {
      keys.forEach(function (key) {
        var value = object[key];
        if (!dynamic.isDynamic(value)) {
          return
        }
        var ref = env.invoke(block, value);
        block(objectRef, '.', key, '=', ref, ';');
      });
    }

    options.dynamic[name] = new dynamic.DynamicVariable(DYN_THUNK, {
      thisDep: thisDep,
      contextDep: contextDep,
      propDep: propDep,
      ref: objectRef,
      append: appendBlock
    });
    delete options.static[name];
  }

  // ===========================================================================
  // ===========================================================================
  // MAIN DRAW COMMAND
  // ===========================================================================
  // ===========================================================================
  function compileCommand (options, attributes, uniforms, context, stats) {
    var env = createREGLEnvironment();

    // link stats, so that we can easily access it in the program.
    env.stats = env.link(stats);

    // splat options and attributes to allow for dynamic nested properties
    Object.keys(attributes.static).forEach(function (key) {
      splatObject(env, attributes, key);
    });
    NESTED_OPTIONS.forEach(function (name) {
      splatObject(env, options, name);
    });

    var args = parseArguments(options, attributes, uniforms, context, env);

    emitDrawProc(env, args);
    emitScopeProc(env, args);
    emitBatchProc(env, args);

    return env.compile()
  }

  // ===========================================================================
  // ===========================================================================
  // POLL / REFRESH
  // ===========================================================================
  // ===========================================================================
  return {
    next: nextState,
    current: currentState,
    procs: (function () {
      var env = createREGLEnvironment();
      var poll = env.proc('poll');
      var refresh = env.proc('refresh');
      var common = env.block();
      poll(common);
      refresh(common);

      var shared = env.shared;
      var GL = shared.gl;
      var NEXT_STATE = shared.next;
      var CURRENT_STATE = shared.current;

      common(CURRENT_STATE, '.dirty=false;');

      emitPollFramebuffer(env, poll);
      emitPollFramebuffer(env, refresh, null, true);

      // Refresh updates all attribute state changes
      var INSTANCING;
      if (extInstancing) {
        INSTANCING = env.link(extInstancing);
      }
      for (var i = 0; i < limits.maxAttributes; ++i) {
        var BINDING = refresh.def(shared.attributes, '[', i, ']');
        var ifte = env.cond(BINDING, '.buffer');
        ifte.then(
          GL, '.enableVertexAttribArray(', i, ');',
          GL, '.bindBuffer(',
            GL_ARRAY_BUFFER$1, ',',
            BINDING, '.buffer.buffer);',
          GL, '.vertexAttribPointer(',
            i, ',',
            BINDING, '.size,',
            BINDING, '.type,',
            BINDING, '.normalized,',
            BINDING, '.stride,',
            BINDING, '.offset);'
        ).else(
          GL, '.disableVertexAttribArray(', i, ');',
          GL, '.vertexAttrib4f(',
            i, ',',
            BINDING, '.x,',
            BINDING, '.y,',
            BINDING, '.z,',
            BINDING, '.w);',
          BINDING, '.buffer=null;');
        refresh(ifte);
        if (extInstancing) {
          refresh(
            INSTANCING, '.vertexAttribDivisorANGLE(',
            i, ',',
            BINDING, '.divisor);');
        }
      }

      Object.keys(GL_FLAGS).forEach(function (flag) {
        var cap = GL_FLAGS[flag];
        var NEXT = common.def(NEXT_STATE, '.', flag);
        var block = env.block();
        block('if(', NEXT, '){',
          GL, '.enable(', cap, ')}else{',
          GL, '.disable(', cap, ')}',
          CURRENT_STATE, '.', flag, '=', NEXT, ';');
        refresh(block);
        poll(
          'if(', NEXT, '!==', CURRENT_STATE, '.', flag, '){',
          block,
          '}');
      });

      Object.keys(GL_VARIABLES).forEach(function (name) {
        var func = GL_VARIABLES[name];
        var init = currentState[name];
        var NEXT, CURRENT;
        var block = env.block();
        block(GL, '.', func, '(');
        if (isArrayLike(init)) {
          var n = init.length;
          NEXT = env.global.def(NEXT_STATE, '.', name);
          CURRENT = env.global.def(CURRENT_STATE, '.', name);
          block(
            loop(n, function (i) {
              return NEXT + '[' + i + ']'
            }), ');',
            loop(n, function (i) {
              return CURRENT + '[' + i + ']=' + NEXT + '[' + i + '];'
            }).join(''));
          poll(
            'if(', loop(n, function (i) {
              return NEXT + '[' + i + ']!==' + CURRENT + '[' + i + ']'
            }).join('||'), '){',
            block,
            '}');
        } else {
          NEXT = common.def(NEXT_STATE, '.', name);
          CURRENT = common.def(CURRENT_STATE, '.', name);
          block(
            NEXT, ');',
            CURRENT_STATE, '.', name, '=', NEXT, ';');
          poll(
            'if(', NEXT, '!==', CURRENT, '){',
            block,
            '}');
        }
        refresh(block);
      });

      return env.compile()
    })(),
    compile: compileCommand
  }
}

function stats () {
  return {
    bufferCount: 0,
    elementsCount: 0,
    framebufferCount: 0,
    shaderCount: 0,
    textureCount: 0,
    cubeCount: 0,
    renderbufferCount: 0,
    maxTextureUnits: 0
  }
}

var GL_QUERY_RESULT_EXT = 0x8866;
var GL_QUERY_RESULT_AVAILABLE_EXT = 0x8867;
var GL_TIME_ELAPSED_EXT = 0x88BF;

var createTimer = function (gl, extensions) {
  if (!extensions.ext_disjoint_timer_query) {
    return null
  }

  // QUERY POOL BEGIN
  var queryPool = [];
  function allocQuery () {
    return queryPool.pop() || extensions.ext_disjoint_timer_query.createQueryEXT()
  }
  function freeQuery (query) {
    queryPool.push(query);
  }
  // QUERY POOL END

  var pendingQueries = [];
  function beginQuery (stats) {
    var query = allocQuery();
    extensions.ext_disjoint_timer_query.beginQueryEXT(GL_TIME_ELAPSED_EXT, query);
    pendingQueries.push(query);
    pushScopeStats(pendingQueries.length - 1, pendingQueries.length, stats);
  }

  function endQuery () {
    extensions.ext_disjoint_timer_query.endQueryEXT(GL_TIME_ELAPSED_EXT);
  }

  //
  // Pending stats pool.
  //
  function PendingStats () {
    this.startQueryIndex = -1;
    this.endQueryIndex = -1;
    this.sum = 0;
    this.stats = null;
  }
  var pendingStatsPool = [];
  function allocPendingStats () {
    return pendingStatsPool.pop() || new PendingStats()
  }
  function freePendingStats (pendingStats) {
    pendingStatsPool.push(pendingStats);
  }
  // Pending stats pool end

  var pendingStats = [];
  function pushScopeStats (start, end, stats) {
    var ps = allocPendingStats();
    ps.startQueryIndex = start;
    ps.endQueryIndex = end;
    ps.sum = 0;
    ps.stats = stats;
    pendingStats.push(ps);
  }

  // we should call this at the beginning of the frame,
  // in order to update gpuTime
  var timeSum = [];
  var queryPtr = [];
  function update () {
    var ptr, i;

    var n = pendingQueries.length;
    if (n === 0) {
      return
    }

    // Reserve space
    queryPtr.length = Math.max(queryPtr.length, n + 1);
    timeSum.length = Math.max(timeSum.length, n + 1);
    timeSum[0] = 0;
    queryPtr[0] = 0;

    // Update all pending timer queries
    var queryTime = 0;
    ptr = 0;
    for (i = 0; i < pendingQueries.length; ++i) {
      var query = pendingQueries[i];
      if (extensions.ext_disjoint_timer_query.getQueryObjectEXT(query, GL_QUERY_RESULT_AVAILABLE_EXT)) {
        queryTime += extensions.ext_disjoint_timer_query.getQueryObjectEXT(query, GL_QUERY_RESULT_EXT);
        freeQuery(query);
      } else {
        pendingQueries[ptr++] = query;
      }
      timeSum[i + 1] = queryTime;
      queryPtr[i + 1] = ptr;
    }
    pendingQueries.length = ptr;

    // Update all pending stat queries
    ptr = 0;
    for (i = 0; i < pendingStats.length; ++i) {
      var stats = pendingStats[i];
      var start = stats.startQueryIndex;
      var end = stats.endQueryIndex;
      stats.sum += timeSum[end] - timeSum[start];
      var startPtr = queryPtr[start];
      var endPtr = queryPtr[end];
      if (endPtr === startPtr) {
        stats.stats.gpuTime += stats.sum / 1e6;
        freePendingStats(stats);
      } else {
        stats.startQueryIndex = startPtr;
        stats.endQueryIndex = endPtr;
        pendingStats[ptr++] = stats;
      }
    }
    pendingStats.length = ptr;
  }

  return {
    beginQuery: beginQuery,
    endQuery: endQuery,
    pushScopeStats: pushScopeStats,
    update: update,
    getNumPendingQueries: function () {
      return pendingQueries.length
    },
    clear: function () {
      queryPool.push.apply(queryPool, pendingQueries);
      for (var i = 0; i < queryPool.length; i++) {
        extensions.ext_disjoint_timer_query.deleteQueryEXT(queryPool[i]);
      }
      pendingQueries.length = 0;
      queryPool.length = 0;
    },
    restore: function () {
      pendingQueries.length = 0;
      queryPool.length = 0;
    }
  }
};

var GL_COLOR_BUFFER_BIT = 16384;
var GL_DEPTH_BUFFER_BIT = 256;
var GL_STENCIL_BUFFER_BIT = 1024;

var GL_ARRAY_BUFFER = 34962;

var CONTEXT_LOST_EVENT = 'webglcontextlost';
var CONTEXT_RESTORED_EVENT = 'webglcontextrestored';

var DYN_PROP = 1;
var DYN_CONTEXT = 2;
var DYN_STATE = 3;

function find (haystack, needle) {
  for (var i = 0; i < haystack.length; ++i) {
    if (haystack[i] === needle) {
      return i
    }
  }
  return -1
}

function wrapREGL (args) {
  var config = parseArgs(args);
  if (!config) {
    return null
  }

  var gl = config.gl;
  var glAttributes = gl.getContextAttributes();
  var contextLost = gl.isContextLost();

  var extensionState = createExtensionCache(gl, config);
  if (!extensionState) {
    return null
  }

  var stringStore = createStringStore();
  var stats$$1 = stats();
  var extensions = extensionState.extensions;
  var timer = createTimer(gl, extensions);

  var START_TIME = clock();
  var WIDTH = gl.drawingBufferWidth;
  var HEIGHT = gl.drawingBufferHeight;

  var contextState = {
    tick: 0,
    time: 0,
    viewportWidth: WIDTH,
    viewportHeight: HEIGHT,
    framebufferWidth: WIDTH,
    framebufferHeight: HEIGHT,
    drawingBufferWidth: WIDTH,
    drawingBufferHeight: HEIGHT,
    pixelRatio: config.pixelRatio
  };
  var uniformState = {};
  var drawState = {
    elements: null,
    primitive: 4, // GL_TRIANGLES
    count: -1,
    offset: 0,
    instances: -1
  };

  var limits = wrapLimits(gl, extensions);
  var attributeState = wrapAttributeState(
    gl,
    extensions,
    limits,
    stringStore);
  var bufferState = wrapBufferState(
    gl,
    stats$$1,
    config,
    attributeState);
  var elementState = wrapElementsState(gl, extensions, bufferState, stats$$1);
  var shaderState = wrapShaderState(gl, stringStore, stats$$1, config);
  var textureState = createTextureSet(
    gl,
    extensions,
    limits,
    function () { core.procs.poll(); },
    contextState,
    stats$$1,
    config);
  var renderbufferState = wrapRenderbuffers(gl, extensions, limits, stats$$1, config);
  var framebufferState = wrapFBOState(
    gl,
    extensions,
    limits,
    textureState,
    renderbufferState,
    stats$$1);
  var core = reglCore(
    gl,
    stringStore,
    extensions,
    limits,
    bufferState,
    elementState,
    textureState,
    framebufferState,
    uniformState,
    attributeState,
    shaderState,
    drawState,
    contextState,
    timer,
    config);
  var readPixels = wrapReadPixels(
    gl,
    framebufferState,
    core.procs.poll,
    contextState,
    glAttributes, extensions, limits);

  var nextState = core.next;
  var canvas = gl.canvas;

  var rafCallbacks = [];
  var lossCallbacks = [];
  var restoreCallbacks = [];
  var destroyCallbacks = [config.onDestroy];

  var activeRAF = null;
  function handleRAF () {
    if (rafCallbacks.length === 0) {
      if (timer) {
        timer.update();
      }
      activeRAF = null;
      return
    }

    // schedule next animation frame
    activeRAF = raf.next(handleRAF);

    // poll for changes
    poll();

    // fire a callback for all pending rafs
    for (var i = rafCallbacks.length - 1; i >= 0; --i) {
      var cb = rafCallbacks[i];
      if (cb) {
        cb(contextState, null, 0);
      }
    }

    // flush all pending webgl calls
    gl.flush();

    // poll GPU timers *after* gl.flush so we don't delay command dispatch
    if (timer) {
      timer.update();
    }
  }

  function startRAF () {
    if (!activeRAF && rafCallbacks.length > 0) {
      activeRAF = raf.next(handleRAF);
    }
  }

  function stopRAF () {
    if (activeRAF) {
      raf.cancel(handleRAF);
      activeRAF = null;
    }
  }

  function handleContextLoss (event) {
    event.preventDefault();

    // set context lost flag
    contextLost = true;

    // pause request animation frame
    stopRAF();

    // lose context
    lossCallbacks.forEach(function (cb) {
      cb();
    });
  }

  function handleContextRestored (event) {
    // clear error code
    gl.getError();

    // clear context lost flag
    contextLost = false;

    // refresh state
    extensionState.restore();
    shaderState.restore();
    bufferState.restore();
    textureState.restore();
    renderbufferState.restore();
    framebufferState.restore();
    if (timer) {
      timer.restore();
    }

    // refresh state
    core.procs.refresh();

    // restart RAF
    startRAF();

    // restore context
    restoreCallbacks.forEach(function (cb) {
      cb();
    });
  }

  if (canvas) {
    canvas.addEventListener(CONTEXT_LOST_EVENT, handleContextLoss, false);
    canvas.addEventListener(CONTEXT_RESTORED_EVENT, handleContextRestored, false);
  }

  function destroy () {
    rafCallbacks.length = 0;
    stopRAF();

    if (canvas) {
      canvas.removeEventListener(CONTEXT_LOST_EVENT, handleContextLoss);
      canvas.removeEventListener(CONTEXT_RESTORED_EVENT, handleContextRestored);
    }

    shaderState.clear();
    framebufferState.clear();
    renderbufferState.clear();
    textureState.clear();
    elementState.clear();
    bufferState.clear();

    if (timer) {
      timer.clear();
    }

    destroyCallbacks.forEach(function (cb) {
      cb();
    });
  }

  function compileProcedure (options) {
    check$1(!!options, 'invalid args to regl({...})');
    check$1.type(options, 'object', 'invalid args to regl({...})');

    function flattenNestedOptions (options) {
      var result = extend({}, options);
      delete result.uniforms;
      delete result.attributes;
      delete result.context;

      if ('stencil' in result && result.stencil.op) {
        result.stencil.opBack = result.stencil.opFront = result.stencil.op;
        delete result.stencil.op;
      }

      function merge (name) {
        if (name in result) {
          var child = result[name];
          delete result[name];
          Object.keys(child).forEach(function (prop) {
            result[name + '.' + prop] = child[prop];
          });
        }
      }
      merge('blend');
      merge('depth');
      merge('cull');
      merge('stencil');
      merge('polygonOffset');
      merge('scissor');
      merge('sample');

      return result
    }

    function separateDynamic (object) {
      var staticItems = {};
      var dynamicItems = {};
      Object.keys(object).forEach(function (option) {
        var value = object[option];
        if (dynamic.isDynamic(value)) {
          dynamicItems[option] = dynamic.unbox(value, option);
        } else {
          staticItems[option] = value;
        }
      });
      return {
        dynamic: dynamicItems,
        static: staticItems
      }
    }

    // Treat context variables separate from other dynamic variables
    var context = separateDynamic(options.context || {});
    var uniforms = separateDynamic(options.uniforms || {});
    var attributes = separateDynamic(options.attributes || {});
    var opts = separateDynamic(flattenNestedOptions(options));

    var stats$$1 = {
      gpuTime: 0.0,
      cpuTime: 0.0,
      count: 0
    };

    var compiled = core.compile(opts, attributes, uniforms, context, stats$$1);

    var draw = compiled.draw;
    var batch = compiled.batch;
    var scope = compiled.scope;

    // FIXME: we should modify code generation for batch commands so this
    // isn't necessary
    var EMPTY_ARRAY = [];
    function reserve (count) {
      while (EMPTY_ARRAY.length < count) {
        EMPTY_ARRAY.push(null);
      }
      return EMPTY_ARRAY
    }

    function REGLCommand (args, body) {
      var i;
      if (contextLost) {
        check$1.raise('context lost');
      }
      if (typeof args === 'function') {
        return scope.call(this, null, args, 0)
      } else if (typeof body === 'function') {
        if (typeof args === 'number') {
          for (i = 0; i < args; ++i) {
            scope.call(this, null, body, i);
          }
          return
        } else if (Array.isArray(args)) {
          for (i = 0; i < args.length; ++i) {
            scope.call(this, args[i], body, i);
          }
          return
        } else {
          return scope.call(this, args, body, 0)
        }
      } else if (typeof args === 'number') {
        if (args > 0) {
          return batch.call(this, reserve(args | 0), args | 0)
        }
      } else if (Array.isArray(args)) {
        if (args.length) {
          return batch.call(this, args, args.length)
        }
      } else {
        return draw.call(this, args)
      }
    }

    return extend(REGLCommand, {
      stats: stats$$1
    })
  }

  var setFBO = framebufferState.setFBO = compileProcedure({
    framebuffer: dynamic.define.call(null, DYN_PROP, 'framebuffer')
  });

  function clearImpl (_, options) {
    var clearFlags = 0;
    core.procs.poll();

    var c = options.color;
    if (c) {
      gl.clearColor(+c[0] || 0, +c[1] || 0, +c[2] || 0, +c[3] || 0);
      clearFlags |= GL_COLOR_BUFFER_BIT;
    }
    if ('depth' in options) {
      gl.clearDepth(+options.depth);
      clearFlags |= GL_DEPTH_BUFFER_BIT;
    }
    if ('stencil' in options) {
      gl.clearStencil(options.stencil | 0);
      clearFlags |= GL_STENCIL_BUFFER_BIT;
    }

    check$1(!!clearFlags, 'called regl.clear with no buffer specified');
    gl.clear(clearFlags);
  }

  function clear (options) {
    check$1(
      typeof options === 'object' && options,
      'regl.clear() takes an object as input');
    if ('framebuffer' in options) {
      if (options.framebuffer &&
          options.framebuffer_reglType === 'framebufferCube') {
        for (var i = 0; i < 6; ++i) {
          setFBO(extend({
            framebuffer: options.framebuffer.faces[i]
          }, options), clearImpl);
        }
      } else {
        setFBO(options, clearImpl);
      }
    } else {
      clearImpl(null, options);
    }
  }

  function frame (cb) {
    check$1.type(cb, 'function', 'regl.frame() callback must be a function');
    rafCallbacks.push(cb);

    function cancel () {
      // FIXME:  should we check something other than equals cb here?
      // what if a user calls frame twice with the same callback...
      //
      var i = find(rafCallbacks, cb);
      check$1(i >= 0, 'cannot cancel a frame twice');
      function pendingCancel () {
        var index = find(rafCallbacks, pendingCancel);
        rafCallbacks[index] = rafCallbacks[rafCallbacks.length - 1];
        rafCallbacks.length -= 1;
        if (rafCallbacks.length <= 0) {
          stopRAF();
        }
      }
      rafCallbacks[i] = pendingCancel;
    }

    startRAF();

    return {
      cancel: cancel
    }
  }

  // poll viewport
  function pollViewport () {
    var viewport = nextState.viewport;
    var scissorBox = nextState.scissor_box;
    viewport[0] = viewport[1] = scissorBox[0] = scissorBox[1] = 0;
    contextState.viewportWidth =
      contextState.framebufferWidth =
      contextState.drawingBufferWidth =
      viewport[2] =
      scissorBox[2] = gl.drawingBufferWidth;
    contextState.viewportHeight =
      contextState.framebufferHeight =
      contextState.drawingBufferHeight =
      viewport[3] =
      scissorBox[3] = gl.drawingBufferHeight;
  }

  function poll () {
    contextState.tick += 1;
    contextState.time = now();
    pollViewport();
    core.procs.poll();
  }

  function refresh () {
    pollViewport();
    core.procs.refresh();
    if (timer) {
      timer.update();
    }
  }

  function now () {
    return (clock() - START_TIME) / 1000.0
  }

  refresh();

  function addListener (event, callback) {
    check$1.type(callback, 'function', 'listener callback must be a function');

    var callbacks;
    switch (event) {
      case 'frame':
        return frame(callback)
      case 'lost':
        callbacks = lossCallbacks;
        break
      case 'restore':
        callbacks = restoreCallbacks;
        break
      case 'destroy':
        callbacks = destroyCallbacks;
        break
      default:
        check$1.raise('invalid event, must be one of frame,lost,restore,destroy');
    }

    callbacks.push(callback);
    return {
      cancel: function () {
        for (var i = 0; i < callbacks.length; ++i) {
          if (callbacks[i] === callback) {
            callbacks[i] = callbacks[callbacks.length - 1];
            callbacks.pop();
            return
          }
        }
      }
    }
  }

  var regl = extend(compileProcedure, {
    // Clear current FBO
    clear: clear,

    // Short cuts for dynamic variables
    prop: dynamic.define.bind(null, DYN_PROP),
    context: dynamic.define.bind(null, DYN_CONTEXT),
    this: dynamic.define.bind(null, DYN_STATE),

    // executes an empty draw command
    draw: compileProcedure({}),

    // Resources
    buffer: function (options) {
      return bufferState.create(options, GL_ARRAY_BUFFER, false, false)
    },
    elements: function (options) {
      return elementState.create(options, false)
    },
    texture: textureState.create2D,
    cube: textureState.createCube,
    renderbuffer: renderbufferState.create,
    framebuffer: framebufferState.create,
    framebufferCube: framebufferState.createCube,

    // Expose context attributes
    attributes: glAttributes,

    // Frame rendering
    frame: frame,
    on: addListener,

    // System limits
    limits: limits,
    hasExtension: function (name) {
      return limits.extensions.indexOf(name.toLowerCase()) >= 0
    },

    // Read pixels
    read: readPixels,

    // Destroy regl and all associated resources
    destroy: destroy,

    // Direct GL state manipulation
    _gl: gl,
    _refresh: refresh,

    poll: function () {
      poll();
      if (timer) {
        timer.update();
      }
    },

    // Current time
    now: now,

    // regl Statistics Information
    stats: stats$$1
  });

  config.onDone(null, regl);

  return regl
}

return wrapREGL;

})));


},{}],"../node_modules/gpu.js/dist/gpu-browser.js":[function(require,module,exports) {
var define;
var global = arguments[3];
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * gpu.js
 * http://gpu.rocks/
 *
 * GPU Accelerated JavaScript
 *
 * @version 2.3.0
 * @date Tue Nov 26 2019 09:51:10 GMT-0500 (Eastern Standard Time)
 *
 * @license MIT
 * The MIT License
 *
 * Copyright (c) 2019 gpu.js Team
 */
(function (f) {
  if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object" && typeof module !== "undefined") {
    module.exports = f();
  } else if (typeof define === "function" && define.amd) {
    define([], f);
  } else {
    var g;

    if (typeof window !== "undefined") {
      g = window;
    } else if (typeof global !== "undefined") {
      g = global;
    } else if (typeof self !== "undefined") {
      g = self;
    } else {
      g = this;
    }

    g.GPU = f();
  }
})(function () {
  var define, module, exports;
  return function () {
    function r(e, n, t) {
      function o(i, f) {
        if (!n[i]) {
          if (!e[i]) {
            var c = "function" == typeof require && require;
            if (!f && c) return c(i, !0);
            if (u) return u(i, !0);
            var a = new Error("Cannot find module '" + i + "'");
            throw a.code = "MODULE_NOT_FOUND", a;
          }

          var p = n[i] = {
            exports: {}
          };
          e[i][0].call(p.exports, function (r) {
            var n = e[i][1][r];
            return o(n || r);
          }, p, p.exports, r, e, n, t);
        }

        return n[i].exports;
      }

      for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) {
        o(t[i]);
      }

      return o;
    }

    return r;
  }()({
    1: [function (require, module, exports) {
      (function (global, factory) {
        _typeof(exports) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global.acorn = {}));
      })(this, function (exports) {
        'use strict';

        var reservedWords = {
          3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
          5: "class enum extends super const export import",
          6: "enum",
          strict: "implements interface let package private protected public static yield",
          strictBind: "eval arguments"
        };
        var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";
        var keywords = {
          5: ecma5AndLessKeywords,
          "5module": ecma5AndLessKeywords + " export import",
          6: ecma5AndLessKeywords + " const class extends export import super"
        };
        var keywordRelationalOperator = /^in(stanceof)?$/;
        var nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEF\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7C6\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB67\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
        var nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
        var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
        var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
        nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
        var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 477, 28, 11, 0, 9, 21, 155, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 12, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 0, 33, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 0, 161, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 270, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 754, 9486, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541];
        var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 525, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 232, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 792487, 239];

        function isInAstralSet(code, set) {
          var pos = 0x10000;

          for (var i = 0; i < set.length; i += 2) {
            pos += set[i];

            if (pos > code) {
              return false;
            }

            pos += set[i + 1];

            if (pos >= code) {
              return true;
            }
          }
        }

        function isIdentifierStart(code, astral) {
          if (code < 65) {
            return code === 36;
          }

          if (code < 91) {
            return true;
          }

          if (code < 97) {
            return code === 95;
          }

          if (code < 123) {
            return true;
          }

          if (code <= 0xffff) {
            return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
          }

          if (astral === false) {
            return false;
          }

          return isInAstralSet(code, astralIdentifierStartCodes);
        }

        function isIdentifierChar(code, astral) {
          if (code < 48) {
            return code === 36;
          }

          if (code < 58) {
            return true;
          }

          if (code < 65) {
            return false;
          }

          if (code < 91) {
            return true;
          }

          if (code < 97) {
            return code === 95;
          }

          if (code < 123) {
            return true;
          }

          if (code <= 0xffff) {
            return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
          }

          if (astral === false) {
            return false;
          }

          return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
        }

        var TokenType = function TokenType(label, conf) {
          if (conf === void 0) conf = {};
          this.label = label;
          this.keyword = conf.keyword;
          this.beforeExpr = !!conf.beforeExpr;
          this.startsExpr = !!conf.startsExpr;
          this.isLoop = !!conf.isLoop;
          this.isAssign = !!conf.isAssign;
          this.prefix = !!conf.prefix;
          this.postfix = !!conf.postfix;
          this.binop = conf.binop || null;
          this.updateContext = null;
        };

        function binop(name, prec) {
          return new TokenType(name, {
            beforeExpr: true,
            binop: prec
          });
        }

        var beforeExpr = {
          beforeExpr: true
        },
            startsExpr = {
          startsExpr: true
        };
        var keywords$1 = {};

        function kw(name, options) {
          if (options === void 0) options = {};
          options.keyword = name;
          return keywords$1[name] = new TokenType(name, options);
        }

        var types = {
          num: new TokenType("num", startsExpr),
          regexp: new TokenType("regexp", startsExpr),
          string: new TokenType("string", startsExpr),
          name: new TokenType("name", startsExpr),
          eof: new TokenType("eof"),
          bracketL: new TokenType("[", {
            beforeExpr: true,
            startsExpr: true
          }),
          bracketR: new TokenType("]"),
          braceL: new TokenType("{", {
            beforeExpr: true,
            startsExpr: true
          }),
          braceR: new TokenType("}"),
          parenL: new TokenType("(", {
            beforeExpr: true,
            startsExpr: true
          }),
          parenR: new TokenType(")"),
          comma: new TokenType(",", beforeExpr),
          semi: new TokenType(";", beforeExpr),
          colon: new TokenType(":", beforeExpr),
          dot: new TokenType("."),
          question: new TokenType("?", beforeExpr),
          arrow: new TokenType("=>", beforeExpr),
          template: new TokenType("template"),
          invalidTemplate: new TokenType("invalidTemplate"),
          ellipsis: new TokenType("...", beforeExpr),
          backQuote: new TokenType("`", startsExpr),
          dollarBraceL: new TokenType("${", {
            beforeExpr: true,
            startsExpr: true
          }),
          eq: new TokenType("=", {
            beforeExpr: true,
            isAssign: true
          }),
          assign: new TokenType("_=", {
            beforeExpr: true,
            isAssign: true
          }),
          incDec: new TokenType("++/--", {
            prefix: true,
            postfix: true,
            startsExpr: true
          }),
          prefix: new TokenType("!/~", {
            beforeExpr: true,
            prefix: true,
            startsExpr: true
          }),
          logicalOR: binop("||", 1),
          logicalAND: binop("&&", 2),
          bitwiseOR: binop("|", 3),
          bitwiseXOR: binop("^", 4),
          bitwiseAND: binop("&", 5),
          equality: binop("==/!=/===/!==", 6),
          relational: binop("</>/<=/>=", 7),
          bitShift: binop("<</>>/>>>", 8),
          plusMin: new TokenType("+/-", {
            beforeExpr: true,
            binop: 9,
            prefix: true,
            startsExpr: true
          }),
          modulo: binop("%", 10),
          star: binop("*", 10),
          slash: binop("/", 10),
          starstar: new TokenType("**", {
            beforeExpr: true
          }),
          _break: kw("break"),
          _case: kw("case", beforeExpr),
          _catch: kw("catch"),
          _continue: kw("continue"),
          _debugger: kw("debugger"),
          _default: kw("default", beforeExpr),
          _do: kw("do", {
            isLoop: true,
            beforeExpr: true
          }),
          _else: kw("else", beforeExpr),
          _finally: kw("finally"),
          _for: kw("for", {
            isLoop: true
          }),
          _function: kw("function", startsExpr),
          _if: kw("if"),
          _return: kw("return", beforeExpr),
          _switch: kw("switch"),
          _throw: kw("throw", beforeExpr),
          _try: kw("try"),
          _var: kw("var"),
          _const: kw("const"),
          _while: kw("while", {
            isLoop: true
          }),
          _with: kw("with"),
          _new: kw("new", {
            beforeExpr: true,
            startsExpr: true
          }),
          _this: kw("this", startsExpr),
          _super: kw("super", startsExpr),
          _class: kw("class", startsExpr),
          _extends: kw("extends", beforeExpr),
          _export: kw("export"),
          _import: kw("import", startsExpr),
          _null: kw("null", startsExpr),
          _true: kw("true", startsExpr),
          _false: kw("false", startsExpr),
          _in: kw("in", {
            beforeExpr: true,
            binop: 7
          }),
          _instanceof: kw("instanceof", {
            beforeExpr: true,
            binop: 7
          }),
          _typeof: kw("typeof", {
            beforeExpr: true,
            prefix: true,
            startsExpr: true
          }),
          _void: kw("void", {
            beforeExpr: true,
            prefix: true,
            startsExpr: true
          }),
          _delete: kw("delete", {
            beforeExpr: true,
            prefix: true,
            startsExpr: true
          })
        };
        var lineBreak = /\r\n?|\n|\u2028|\u2029/;
        var lineBreakG = new RegExp(lineBreak.source, "g");

        function isNewLine(code, ecma2019String) {
          return code === 10 || code === 13 || !ecma2019String && (code === 0x2028 || code === 0x2029);
        }

        var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
        var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
        var ref = Object.prototype;
        var hasOwnProperty = ref.hasOwnProperty;
        var toString = ref.toString;

        function has(obj, propName) {
          return hasOwnProperty.call(obj, propName);
        }

        var isArray = Array.isArray || function (obj) {
          return toString.call(obj) === "[object Array]";
        };

        function wordsRegexp(words) {
          return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$");
        }

        var Position = function Position(line, col) {
          this.line = line;
          this.column = col;
        };

        Position.prototype.offset = function offset(n) {
          return new Position(this.line, this.column + n);
        };

        var SourceLocation = function SourceLocation(p, start, end) {
          this.start = start;
          this.end = end;

          if (p.sourceFile !== null) {
            this.source = p.sourceFile;
          }
        };

        function getLineInfo(input, offset) {
          for (var line = 1, cur = 0;;) {
            lineBreakG.lastIndex = cur;
            var match = lineBreakG.exec(input);

            if (match && match.index < offset) {
              ++line;
              cur = match.index + match[0].length;
            } else {
              return new Position(line, offset - cur);
            }
          }
        }

        var defaultOptions = {
          ecmaVersion: 10,
          sourceType: "script",
          onInsertedSemicolon: null,
          onTrailingComma: null,
          allowReserved: null,
          allowReturnOutsideFunction: false,
          allowImportExportEverywhere: false,
          allowAwaitOutsideFunction: false,
          allowHashBang: false,
          locations: false,
          onToken: null,
          onComment: null,
          ranges: false,
          program: null,
          sourceFile: null,
          directSourceFile: null,
          preserveParens: false
        };

        function getOptions(opts) {
          var options = {};

          for (var opt in defaultOptions) {
            options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt];
          }

          if (options.ecmaVersion >= 2015) {
            options.ecmaVersion -= 2009;
          }

          if (options.allowReserved == null) {
            options.allowReserved = options.ecmaVersion < 5;
          }

          if (isArray(options.onToken)) {
            var tokens = options.onToken;

            options.onToken = function (token) {
              return tokens.push(token);
            };
          }

          if (isArray(options.onComment)) {
            options.onComment = pushComment(options, options.onComment);
          }

          return options;
        }

        function pushComment(options, array) {
          return function (block, text, start, end, startLoc, endLoc) {
            var comment = {
              type: block ? "Block" : "Line",
              value: text,
              start: start,
              end: end
            };

            if (options.locations) {
              comment.loc = new SourceLocation(this, startLoc, endLoc);
            }

            if (options.ranges) {
              comment.range = [start, end];
            }

            array.push(comment);
          };
        }

        var SCOPE_TOP = 1,
            SCOPE_FUNCTION = 2,
            SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION,
            SCOPE_ASYNC = 4,
            SCOPE_GENERATOR = 8,
            SCOPE_ARROW = 16,
            SCOPE_SIMPLE_CATCH = 32,
            SCOPE_SUPER = 64,
            SCOPE_DIRECT_SUPER = 128;

        function functionFlags(async, generator) {
          return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0);
        }

        var BIND_NONE = 0,
            BIND_VAR = 1,
            BIND_LEXICAL = 2,
            BIND_FUNCTION = 3,
            BIND_SIMPLE_CATCH = 4,
            BIND_OUTSIDE = 5;

        var Parser = function Parser(options, input, startPos) {
          this.options = options = getOptions(options);
          this.sourceFile = options.sourceFile;
          this.keywords = wordsRegexp(keywords[options.ecmaVersion >= 6 ? 6 : options.sourceType === "module" ? "5module" : 5]);
          var reserved = "";

          if (options.allowReserved !== true) {
            for (var v = options.ecmaVersion;; v--) {
              if (reserved = reservedWords[v]) {
                break;
              }
            }

            if (options.sourceType === "module") {
              reserved += " await";
            }
          }

          this.reservedWords = wordsRegexp(reserved);
          var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
          this.reservedWordsStrict = wordsRegexp(reservedStrict);
          this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind);
          this.input = String(input);
          this.containsEsc = false;

          if (startPos) {
            this.pos = startPos;
            this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
            this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;
          } else {
            this.pos = this.lineStart = 0;
            this.curLine = 1;
          }

          this.type = types.eof;
          this.value = null;
          this.start = this.end = this.pos;
          this.startLoc = this.endLoc = this.curPosition();
          this.lastTokEndLoc = this.lastTokStartLoc = null;
          this.lastTokStart = this.lastTokEnd = this.pos;
          this.context = this.initialContext();
          this.exprAllowed = true;
          this.inModule = options.sourceType === "module";
          this.strict = this.inModule || this.strictDirective(this.pos);
          this.potentialArrowAt = -1;
          this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;
          this.labels = [];
          this.undefinedExports = {};

          if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!") {
            this.skipLineComment(2);
          }

          this.scopeStack = [];
          this.enterScope(SCOPE_TOP);
          this.regexpState = null;
        };

        var prototypeAccessors = {
          inFunction: {
            configurable: true
          },
          inGenerator: {
            configurable: true
          },
          inAsync: {
            configurable: true
          },
          allowSuper: {
            configurable: true
          },
          allowDirectSuper: {
            configurable: true
          },
          treatFunctionsAsVar: {
            configurable: true
          }
        };

        Parser.prototype.parse = function parse() {
          var node = this.options.program || this.startNode();
          this.nextToken();
          return this.parseTopLevel(node);
        };

        prototypeAccessors.inFunction.get = function () {
          return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;
        };

        prototypeAccessors.inGenerator.get = function () {
          return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0;
        };

        prototypeAccessors.inAsync.get = function () {
          return (this.currentVarScope().flags & SCOPE_ASYNC) > 0;
        };

        prototypeAccessors.allowSuper.get = function () {
          return (this.currentThisScope().flags & SCOPE_SUPER) > 0;
        };

        prototypeAccessors.allowDirectSuper.get = function () {
          return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;
        };

        prototypeAccessors.treatFunctionsAsVar.get = function () {
          return this.treatFunctionsAsVarInScope(this.currentScope());
        };

        Parser.prototype.inNonArrowFunction = function inNonArrowFunction() {
          return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;
        };

        Parser.extend = function extend() {
          var plugins = [],
              len = arguments.length;

          while (len--) {
            plugins[len] = arguments[len];
          }

          var cls = this;

          for (var i = 0; i < plugins.length; i++) {
            cls = plugins[i](cls);
          }

          return cls;
        };

        Parser.parse = function parse(input, options) {
          return new this(options, input).parse();
        };

        Parser.parseExpressionAt = function parseExpressionAt(input, pos, options) {
          var parser = new this(options, input, pos);
          parser.nextToken();
          return parser.parseExpression();
        };

        Parser.tokenizer = function tokenizer(input, options) {
          return new this(options, input);
        };

        Object.defineProperties(Parser.prototype, prototypeAccessors);
        var pp = Parser.prototype;
        var literal = /^(?:'((?:\\.|[^'])*?)'|"((?:\\.|[^"])*?)")/;

        pp.strictDirective = function (start) {
          for (;;) {
            skipWhiteSpace.lastIndex = start;
            start += skipWhiteSpace.exec(this.input)[0].length;
            var match = literal.exec(this.input.slice(start));

            if (!match) {
              return false;
            }

            if ((match[1] || match[2]) === "use strict") {
              return true;
            }

            start += match[0].length;
            skipWhiteSpace.lastIndex = start;
            start += skipWhiteSpace.exec(this.input)[0].length;

            if (this.input[start] === ";") {
              start++;
            }
          }
        };

        pp.eat = function (type) {
          if (this.type === type) {
            this.next();
            return true;
          } else {
            return false;
          }
        };

        pp.isContextual = function (name) {
          return this.type === types.name && this.value === name && !this.containsEsc;
        };

        pp.eatContextual = function (name) {
          if (!this.isContextual(name)) {
            return false;
          }

          this.next();
          return true;
        };

        pp.expectContextual = function (name) {
          if (!this.eatContextual(name)) {
            this.unexpected();
          }
        };

        pp.canInsertSemicolon = function () {
          return this.type === types.eof || this.type === types.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
        };

        pp.insertSemicolon = function () {
          if (this.canInsertSemicolon()) {
            if (this.options.onInsertedSemicolon) {
              this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);
            }

            return true;
          }
        };

        pp.semicolon = function () {
          if (!this.eat(types.semi) && !this.insertSemicolon()) {
            this.unexpected();
          }
        };

        pp.afterTrailingComma = function (tokType, notNext) {
          if (this.type === tokType) {
            if (this.options.onTrailingComma) {
              this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);
            }

            if (!notNext) {
              this.next();
            }

            return true;
          }
        };

        pp.expect = function (type) {
          this.eat(type) || this.unexpected();
        };

        pp.unexpected = function (pos) {
          this.raise(pos != null ? pos : this.start, "Unexpected token");
        };

        function DestructuringErrors() {
          this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
        }

        pp.checkPatternErrors = function (refDestructuringErrors, isAssign) {
          if (!refDestructuringErrors) {
            return;
          }

          if (refDestructuringErrors.trailingComma > -1) {
            this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
          }

          var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;

          if (parens > -1) {
            this.raiseRecoverable(parens, "Parenthesized pattern");
          }
        };

        pp.checkExpressionErrors = function (refDestructuringErrors, andThrow) {
          if (!refDestructuringErrors) {
            return false;
          }

          var shorthandAssign = refDestructuringErrors.shorthandAssign;
          var doubleProto = refDestructuringErrors.doubleProto;

          if (!andThrow) {
            return shorthandAssign >= 0 || doubleProto >= 0;
          }

          if (shorthandAssign >= 0) {
            this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns");
          }

          if (doubleProto >= 0) {
            this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
          }
        };

        pp.checkYieldAwaitInDefaultParams = function () {
          if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) {
            this.raise(this.yieldPos, "Yield expression cannot be a default value");
          }

          if (this.awaitPos) {
            this.raise(this.awaitPos, "Await expression cannot be a default value");
          }
        };

        pp.isSimpleAssignTarget = function (expr) {
          if (expr.type === "ParenthesizedExpression") {
            return this.isSimpleAssignTarget(expr.expression);
          }

          return expr.type === "Identifier" || expr.type === "MemberExpression";
        };

        var pp$1 = Parser.prototype;

        pp$1.parseTopLevel = function (node) {
          var exports = {};

          if (!node.body) {
            node.body = [];
          }

          while (this.type !== types.eof) {
            var stmt = this.parseStatement(null, true, exports);
            node.body.push(stmt);
          }

          if (this.inModule) {
            for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1) {
              var name = list[i];
              this.raiseRecoverable(this.undefinedExports[name].start, "Export '" + name + "' is not defined");
            }
          }

          this.adaptDirectivePrologue(node.body);
          this.next();
          node.sourceType = this.options.sourceType;
          return this.finishNode(node, "Program");
        };

        var loopLabel = {
          kind: "loop"
        },
            switchLabel = {
          kind: "switch"
        };

        pp$1.isLet = function (context) {
          if (this.options.ecmaVersion < 6 || !this.isContextual("let")) {
            return false;
          }

          skipWhiteSpace.lastIndex = this.pos;
          var skip = skipWhiteSpace.exec(this.input);
          var next = this.pos + skip[0].length,
              nextCh = this.input.charCodeAt(next);

          if (nextCh === 91) {
            return true;
          }

          if (context) {
            return false;
          }

          if (nextCh === 123) {
            return true;
          }

          if (isIdentifierStart(nextCh, true)) {
            var pos = next + 1;

            while (isIdentifierChar(this.input.charCodeAt(pos), true)) {
              ++pos;
            }

            var ident = this.input.slice(next, pos);

            if (!keywordRelationalOperator.test(ident)) {
              return true;
            }
          }

          return false;
        };

        pp$1.isAsyncFunction = function () {
          if (this.options.ecmaVersion < 8 || !this.isContextual("async")) {
            return false;
          }

          skipWhiteSpace.lastIndex = this.pos;
          var skip = skipWhiteSpace.exec(this.input);
          var next = this.pos + skip[0].length;
          return !lineBreak.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === "function" && (next + 8 === this.input.length || !isIdentifierChar(this.input.charAt(next + 8)));
        };

        pp$1.parseStatement = function (context, topLevel, exports) {
          var starttype = this.type,
              node = this.startNode(),
              kind;

          if (this.isLet(context)) {
            starttype = types._var;
            kind = "let";
          }

          switch (starttype) {
            case types._break:
            case types._continue:
              return this.parseBreakContinueStatement(node, starttype.keyword);

            case types._debugger:
              return this.parseDebuggerStatement(node);

            case types._do:
              return this.parseDoStatement(node);

            case types._for:
              return this.parseForStatement(node);

            case types._function:
              if (context && (this.strict || context !== "if" && context !== "label") && this.options.ecmaVersion >= 6) {
                this.unexpected();
              }

              return this.parseFunctionStatement(node, false, !context);

            case types._class:
              if (context) {
                this.unexpected();
              }

              return this.parseClass(node, true);

            case types._if:
              return this.parseIfStatement(node);

            case types._return:
              return this.parseReturnStatement(node);

            case types._switch:
              return this.parseSwitchStatement(node);

            case types._throw:
              return this.parseThrowStatement(node);

            case types._try:
              return this.parseTryStatement(node);

            case types._const:
            case types._var:
              kind = kind || this.value;

              if (context && kind !== "var") {
                this.unexpected();
              }

              return this.parseVarStatement(node, kind);

            case types._while:
              return this.parseWhileStatement(node);

            case types._with:
              return this.parseWithStatement(node);

            case types.braceL:
              return this.parseBlock(true, node);

            case types.semi:
              return this.parseEmptyStatement(node);

            case types._export:
            case types._import:
              if (this.options.ecmaVersion > 10 && starttype === types._import) {
                skipWhiteSpace.lastIndex = this.pos;
                var skip = skipWhiteSpace.exec(this.input);
                var next = this.pos + skip[0].length,
                    nextCh = this.input.charCodeAt(next);

                if (nextCh === 40) {
                  return this.parseExpressionStatement(node, this.parseExpression());
                }
              }

              if (!this.options.allowImportExportEverywhere) {
                if (!topLevel) {
                  this.raise(this.start, "'import' and 'export' may only appear at the top level");
                }

                if (!this.inModule) {
                  this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'");
                }
              }

              return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports);

            default:
              if (this.isAsyncFunction()) {
                if (context) {
                  this.unexpected();
                }

                this.next();
                return this.parseFunctionStatement(node, true, !context);
              }

              var maybeName = this.value,
                  expr = this.parseExpression();

              if (starttype === types.name && expr.type === "Identifier" && this.eat(types.colon)) {
                return this.parseLabeledStatement(node, maybeName, expr, context);
              } else {
                return this.parseExpressionStatement(node, expr);
              }

          }
        };

        pp$1.parseBreakContinueStatement = function (node, keyword) {
          var isBreak = keyword === "break";
          this.next();

          if (this.eat(types.semi) || this.insertSemicolon()) {
            node.label = null;
          } else if (this.type !== types.name) {
            this.unexpected();
          } else {
            node.label = this.parseIdent();
            this.semicolon();
          }

          var i = 0;

          for (; i < this.labels.length; ++i) {
            var lab = this.labels[i];

            if (node.label == null || lab.name === node.label.name) {
              if (lab.kind != null && (isBreak || lab.kind === "loop")) {
                break;
              }

              if (node.label && isBreak) {
                break;
              }
            }
          }

          if (i === this.labels.length) {
            this.raise(node.start, "Unsyntactic " + keyword);
          }

          return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
        };

        pp$1.parseDebuggerStatement = function (node) {
          this.next();
          this.semicolon();
          return this.finishNode(node, "DebuggerStatement");
        };

        pp$1.parseDoStatement = function (node) {
          this.next();
          this.labels.push(loopLabel);
          node.body = this.parseStatement("do");
          this.labels.pop();
          this.expect(types._while);
          node.test = this.parseParenExpression();

          if (this.options.ecmaVersion >= 6) {
            this.eat(types.semi);
          } else {
            this.semicolon();
          }

          return this.finishNode(node, "DoWhileStatement");
        };

        pp$1.parseForStatement = function (node) {
          this.next();
          var awaitAt = this.options.ecmaVersion >= 9 && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction) && this.eatContextual("await") ? this.lastTokStart : -1;
          this.labels.push(loopLabel);
          this.enterScope(0);
          this.expect(types.parenL);

          if (this.type === types.semi) {
            if (awaitAt > -1) {
              this.unexpected(awaitAt);
            }

            return this.parseFor(node, null);
          }

          var isLet = this.isLet();

          if (this.type === types._var || this.type === types._const || isLet) {
            var init$1 = this.startNode(),
                kind = isLet ? "let" : this.value;
            this.next();
            this.parseVar(init$1, true, kind);
            this.finishNode(init$1, "VariableDeclaration");

            if ((this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && init$1.declarations.length === 1) {
              if (this.options.ecmaVersion >= 9) {
                if (this.type === types._in) {
                  if (awaitAt > -1) {
                    this.unexpected(awaitAt);
                  }
                } else {
                  node.await = awaitAt > -1;
                }
              }

              return this.parseForIn(node, init$1);
            }

            if (awaitAt > -1) {
              this.unexpected(awaitAt);
            }

            return this.parseFor(node, init$1);
          }

          var refDestructuringErrors = new DestructuringErrors();
          var init = this.parseExpression(true, refDestructuringErrors);

          if (this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) {
            if (this.options.ecmaVersion >= 9) {
              if (this.type === types._in) {
                if (awaitAt > -1) {
                  this.unexpected(awaitAt);
                }
              } else {
                node.await = awaitAt > -1;
              }
            }

            this.toAssignable(init, false, refDestructuringErrors);
            this.checkLVal(init);
            return this.parseForIn(node, init);
          } else {
            this.checkExpressionErrors(refDestructuringErrors, true);
          }

          if (awaitAt > -1) {
            this.unexpected(awaitAt);
          }

          return this.parseFor(node, init);
        };

        pp$1.parseFunctionStatement = function (node, isAsync, declarationPosition) {
          this.next();
          return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);
        };

        pp$1.parseIfStatement = function (node) {
          this.next();
          node.test = this.parseParenExpression();
          node.consequent = this.parseStatement("if");
          node.alternate = this.eat(types._else) ? this.parseStatement("if") : null;
          return this.finishNode(node, "IfStatement");
        };

        pp$1.parseReturnStatement = function (node) {
          if (!this.inFunction && !this.options.allowReturnOutsideFunction) {
            this.raise(this.start, "'return' outside of function");
          }

          this.next();

          if (this.eat(types.semi) || this.insertSemicolon()) {
            node.argument = null;
          } else {
            node.argument = this.parseExpression();
            this.semicolon();
          }

          return this.finishNode(node, "ReturnStatement");
        };

        pp$1.parseSwitchStatement = function (node) {
          this.next();
          node.discriminant = this.parseParenExpression();
          node.cases = [];
          this.expect(types.braceL);
          this.labels.push(switchLabel);
          this.enterScope(0);
          var cur;

          for (var sawDefault = false; this.type !== types.braceR;) {
            if (this.type === types._case || this.type === types._default) {
              var isCase = this.type === types._case;

              if (cur) {
                this.finishNode(cur, "SwitchCase");
              }

              node.cases.push(cur = this.startNode());
              cur.consequent = [];
              this.next();

              if (isCase) {
                cur.test = this.parseExpression();
              } else {
                if (sawDefault) {
                  this.raiseRecoverable(this.lastTokStart, "Multiple default clauses");
                }

                sawDefault = true;
                cur.test = null;
              }

              this.expect(types.colon);
            } else {
              if (!cur) {
                this.unexpected();
              }

              cur.consequent.push(this.parseStatement(null));
            }
          }

          this.exitScope();

          if (cur) {
            this.finishNode(cur, "SwitchCase");
          }

          this.next();
          this.labels.pop();
          return this.finishNode(node, "SwitchStatement");
        };

        pp$1.parseThrowStatement = function (node) {
          this.next();

          if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) {
            this.raise(this.lastTokEnd, "Illegal newline after throw");
          }

          node.argument = this.parseExpression();
          this.semicolon();
          return this.finishNode(node, "ThrowStatement");
        };

        var empty = [];

        pp$1.parseTryStatement = function (node) {
          this.next();
          node.block = this.parseBlock();
          node.handler = null;

          if (this.type === types._catch) {
            var clause = this.startNode();
            this.next();

            if (this.eat(types.parenL)) {
              clause.param = this.parseBindingAtom();
              var simple = clause.param.type === "Identifier";
              this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);
              this.checkLVal(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);
              this.expect(types.parenR);
            } else {
              if (this.options.ecmaVersion < 10) {
                this.unexpected();
              }

              clause.param = null;
              this.enterScope(0);
            }

            clause.body = this.parseBlock(false);
            this.exitScope();
            node.handler = this.finishNode(clause, "CatchClause");
          }

          node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;

          if (!node.handler && !node.finalizer) {
            this.raise(node.start, "Missing catch or finally clause");
          }

          return this.finishNode(node, "TryStatement");
        };

        pp$1.parseVarStatement = function (node, kind) {
          this.next();
          this.parseVar(node, false, kind);
          this.semicolon();
          return this.finishNode(node, "VariableDeclaration");
        };

        pp$1.parseWhileStatement = function (node) {
          this.next();
          node.test = this.parseParenExpression();
          this.labels.push(loopLabel);
          node.body = this.parseStatement("while");
          this.labels.pop();
          return this.finishNode(node, "WhileStatement");
        };

        pp$1.parseWithStatement = function (node) {
          if (this.strict) {
            this.raise(this.start, "'with' in strict mode");
          }

          this.next();
          node.object = this.parseParenExpression();
          node.body = this.parseStatement("with");
          return this.finishNode(node, "WithStatement");
        };

        pp$1.parseEmptyStatement = function (node) {
          this.next();
          return this.finishNode(node, "EmptyStatement");
        };

        pp$1.parseLabeledStatement = function (node, maybeName, expr, context) {
          for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1) {
            var label = list[i$1];

            if (label.name === maybeName) {
              this.raise(expr.start, "Label '" + maybeName + "' is already declared");
            }
          }

          var kind = this.type.isLoop ? "loop" : this.type === types._switch ? "switch" : null;

          for (var i = this.labels.length - 1; i >= 0; i--) {
            var label$1 = this.labels[i];

            if (label$1.statementStart === node.start) {
              label$1.statementStart = this.start;
              label$1.kind = kind;
            } else {
              break;
            }
          }

          this.labels.push({
            name: maybeName,
            kind: kind,
            statementStart: this.start
          });
          node.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
          this.labels.pop();
          node.label = expr;
          return this.finishNode(node, "LabeledStatement");
        };

        pp$1.parseExpressionStatement = function (node, expr) {
          node.expression = expr;
          this.semicolon();
          return this.finishNode(node, "ExpressionStatement");
        };

        pp$1.parseBlock = function (createNewLexicalScope, node) {
          if (createNewLexicalScope === void 0) createNewLexicalScope = true;
          if (node === void 0) node = this.startNode();
          node.body = [];
          this.expect(types.braceL);

          if (createNewLexicalScope) {
            this.enterScope(0);
          }

          while (!this.eat(types.braceR)) {
            var stmt = this.parseStatement(null);
            node.body.push(stmt);
          }

          if (createNewLexicalScope) {
            this.exitScope();
          }

          return this.finishNode(node, "BlockStatement");
        };

        pp$1.parseFor = function (node, init) {
          node.init = init;
          this.expect(types.semi);
          node.test = this.type === types.semi ? null : this.parseExpression();
          this.expect(types.semi);
          node.update = this.type === types.parenR ? null : this.parseExpression();
          this.expect(types.parenR);
          node.body = this.parseStatement("for");
          this.exitScope();
          this.labels.pop();
          return this.finishNode(node, "ForStatement");
        };

        pp$1.parseForIn = function (node, init) {
          var isForIn = this.type === types._in;
          this.next();

          if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || this.options.ecmaVersion < 8 || this.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {
            this.raise(init.start, (isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer");
          } else if (init.type === "AssignmentPattern") {
            this.raise(init.start, "Invalid left-hand side in for-loop");
          }

          node.left = init;
          node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();
          this.expect(types.parenR);
          node.body = this.parseStatement("for");
          this.exitScope();
          this.labels.pop();
          return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
        };

        pp$1.parseVar = function (node, isFor, kind) {
          node.declarations = [];
          node.kind = kind;

          for (;;) {
            var decl = this.startNode();
            this.parseVarId(decl, kind);

            if (this.eat(types.eq)) {
              decl.init = this.parseMaybeAssign(isFor);
            } else if (kind === "const" && !(this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
              this.unexpected();
            } else if (decl.id.type !== "Identifier" && !(isFor && (this.type === types._in || this.isContextual("of")))) {
              this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value");
            } else {
              decl.init = null;
            }

            node.declarations.push(this.finishNode(decl, "VariableDeclarator"));

            if (!this.eat(types.comma)) {
              break;
            }
          }

          return node;
        };

        pp$1.parseVarId = function (decl, kind) {
          decl.id = this.parseBindingAtom();
          this.checkLVal(decl.id, kind === "var" ? BIND_VAR : BIND_LEXICAL, false);
        };

        var FUNC_STATEMENT = 1,
            FUNC_HANGING_STATEMENT = 2,
            FUNC_NULLABLE_ID = 4;

        pp$1.parseFunction = function (node, statement, allowExpressionBody, isAsync) {
          this.initFunction(node);

          if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {
            if (this.type === types.star && statement & FUNC_HANGING_STATEMENT) {
              this.unexpected();
            }

            node.generator = this.eat(types.star);
          }

          if (this.options.ecmaVersion >= 8) {
            node.async = !!isAsync;
          }

          if (statement & FUNC_STATEMENT) {
            node.id = statement & FUNC_NULLABLE_ID && this.type !== types.name ? null : this.parseIdent();

            if (node.id && !(statement & FUNC_HANGING_STATEMENT)) {
              this.checkLVal(node.id, this.strict || node.generator || node.async ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION);
            }
          }

          var oldYieldPos = this.yieldPos,
              oldAwaitPos = this.awaitPos,
              oldAwaitIdentPos = this.awaitIdentPos;
          this.yieldPos = 0;
          this.awaitPos = 0;
          this.awaitIdentPos = 0;
          this.enterScope(functionFlags(node.async, node.generator));

          if (!(statement & FUNC_STATEMENT)) {
            node.id = this.type === types.name ? this.parseIdent() : null;
          }

          this.parseFunctionParams(node);
          this.parseFunctionBody(node, allowExpressionBody, false);
          this.yieldPos = oldYieldPos;
          this.awaitPos = oldAwaitPos;
          this.awaitIdentPos = oldAwaitIdentPos;
          return this.finishNode(node, statement & FUNC_STATEMENT ? "FunctionDeclaration" : "FunctionExpression");
        };

        pp$1.parseFunctionParams = function (node) {
          this.expect(types.parenL);
          node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
          this.checkYieldAwaitInDefaultParams();
        };

        pp$1.parseClass = function (node, isStatement) {
          this.next();
          var oldStrict = this.strict;
          this.strict = true;
          this.parseClassId(node, isStatement);
          this.parseClassSuper(node);
          var classBody = this.startNode();
          var hadConstructor = false;
          classBody.body = [];
          this.expect(types.braceL);

          while (!this.eat(types.braceR)) {
            var element = this.parseClassElement(node.superClass !== null);

            if (element) {
              classBody.body.push(element);

              if (element.type === "MethodDefinition" && element.kind === "constructor") {
                if (hadConstructor) {
                  this.raise(element.start, "Duplicate constructor in the same class");
                }

                hadConstructor = true;
              }
            }
          }

          node.body = this.finishNode(classBody, "ClassBody");
          this.strict = oldStrict;
          return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
        };

        pp$1.parseClassElement = function (constructorAllowsSuper) {
          var this$1 = this;

          if (this.eat(types.semi)) {
            return null;
          }

          var method = this.startNode();

          var tryContextual = function tryContextual(k, noLineBreak) {
            if (noLineBreak === void 0) noLineBreak = false;
            var start = this$1.start,
                startLoc = this$1.startLoc;

            if (!this$1.eatContextual(k)) {
              return false;
            }

            if (this$1.type !== types.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) {
              return true;
            }

            if (method.key) {
              this$1.unexpected();
            }

            method.computed = false;
            method.key = this$1.startNodeAt(start, startLoc);
            method.key.name = k;
            this$1.finishNode(method.key, "Identifier");
            return false;
          };

          method.kind = "method";
          method.static = tryContextual("static");
          var isGenerator = this.eat(types.star);
          var isAsync = false;

          if (!isGenerator) {
            if (this.options.ecmaVersion >= 8 && tryContextual("async", true)) {
              isAsync = true;
              isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);
            } else if (tryContextual("get")) {
              method.kind = "get";
            } else if (tryContextual("set")) {
              method.kind = "set";
            }
          }

          if (!method.key) {
            this.parsePropertyName(method);
          }

          var key = method.key;
          var allowsDirectSuper = false;

          if (!method.computed && !method.static && (key.type === "Identifier" && key.name === "constructor" || key.type === "Literal" && key.value === "constructor")) {
            if (method.kind !== "method") {
              this.raise(key.start, "Constructor can't have get/set modifier");
            }

            if (isGenerator) {
              this.raise(key.start, "Constructor can't be a generator");
            }

            if (isAsync) {
              this.raise(key.start, "Constructor can't be an async method");
            }

            method.kind = "constructor";
            allowsDirectSuper = constructorAllowsSuper;
          } else if (method.static && key.type === "Identifier" && key.name === "prototype") {
            this.raise(key.start, "Classes may not have a static property named prototype");
          }

          this.parseClassMethod(method, isGenerator, isAsync, allowsDirectSuper);

          if (method.kind === "get" && method.value.params.length !== 0) {
            this.raiseRecoverable(method.value.start, "getter should have no params");
          }

          if (method.kind === "set" && method.value.params.length !== 1) {
            this.raiseRecoverable(method.value.start, "setter should have exactly one param");
          }

          if (method.kind === "set" && method.value.params[0].type === "RestElement") {
            this.raiseRecoverable(method.value.params[0].start, "Setter cannot use rest params");
          }

          return method;
        };

        pp$1.parseClassMethod = function (method, isGenerator, isAsync, allowsDirectSuper) {
          method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
          return this.finishNode(method, "MethodDefinition");
        };

        pp$1.parseClassId = function (node, isStatement) {
          if (this.type === types.name) {
            node.id = this.parseIdent();

            if (isStatement) {
              this.checkLVal(node.id, BIND_LEXICAL, false);
            }
          } else {
            if (isStatement === true) {
              this.unexpected();
            }

            node.id = null;
          }
        };

        pp$1.parseClassSuper = function (node) {
          node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;
        };

        pp$1.parseExport = function (node, exports) {
          this.next();

          if (this.eat(types.star)) {
            this.expectContextual("from");

            if (this.type !== types.string) {
              this.unexpected();
            }

            node.source = this.parseExprAtom();
            this.semicolon();
            return this.finishNode(node, "ExportAllDeclaration");
          }

          if (this.eat(types._default)) {
            this.checkExport(exports, "default", this.lastTokStart);
            var isAsync;

            if (this.type === types._function || (isAsync = this.isAsyncFunction())) {
              var fNode = this.startNode();
              this.next();

              if (isAsync) {
                this.next();
              }

              node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);
            } else if (this.type === types._class) {
              var cNode = this.startNode();
              node.declaration = this.parseClass(cNode, "nullableID");
            } else {
              node.declaration = this.parseMaybeAssign();
              this.semicolon();
            }

            return this.finishNode(node, "ExportDefaultDeclaration");
          }

          if (this.shouldParseExportStatement()) {
            node.declaration = this.parseStatement(null);

            if (node.declaration.type === "VariableDeclaration") {
              this.checkVariableExport(exports, node.declaration.declarations);
            } else {
              this.checkExport(exports, node.declaration.id.name, node.declaration.id.start);
            }

            node.specifiers = [];
            node.source = null;
          } else {
            node.declaration = null;
            node.specifiers = this.parseExportSpecifiers(exports);

            if (this.eatContextual("from")) {
              if (this.type !== types.string) {
                this.unexpected();
              }

              node.source = this.parseExprAtom();
            } else {
              for (var i = 0, list = node.specifiers; i < list.length; i += 1) {
                var spec = list[i];
                this.checkUnreserved(spec.local);
                this.checkLocalExport(spec.local);
              }

              node.source = null;
            }

            this.semicolon();
          }

          return this.finishNode(node, "ExportNamedDeclaration");
        };

        pp$1.checkExport = function (exports, name, pos) {
          if (!exports) {
            return;
          }

          if (has(exports, name)) {
            this.raiseRecoverable(pos, "Duplicate export '" + name + "'");
          }

          exports[name] = true;
        };

        pp$1.checkPatternExport = function (exports, pat) {
          var type = pat.type;

          if (type === "Identifier") {
            this.checkExport(exports, pat.name, pat.start);
          } else if (type === "ObjectPattern") {
            for (var i = 0, list = pat.properties; i < list.length; i += 1) {
              var prop = list[i];
              this.checkPatternExport(exports, prop);
            }
          } else if (type === "ArrayPattern") {
            for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
              var elt = list$1[i$1];

              if (elt) {
                this.checkPatternExport(exports, elt);
              }
            }
          } else if (type === "Property") {
            this.checkPatternExport(exports, pat.value);
          } else if (type === "AssignmentPattern") {
            this.checkPatternExport(exports, pat.left);
          } else if (type === "RestElement") {
            this.checkPatternExport(exports, pat.argument);
          } else if (type === "ParenthesizedExpression") {
            this.checkPatternExport(exports, pat.expression);
          }
        };

        pp$1.checkVariableExport = function (exports, decls) {
          if (!exports) {
            return;
          }

          for (var i = 0, list = decls; i < list.length; i += 1) {
            var decl = list[i];
            this.checkPatternExport(exports, decl.id);
          }
        };

        pp$1.shouldParseExportStatement = function () {
          return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
        };

        pp$1.parseExportSpecifiers = function (exports) {
          var nodes = [],
              first = true;
          this.expect(types.braceL);

          while (!this.eat(types.braceR)) {
            if (!first) {
              this.expect(types.comma);

              if (this.afterTrailingComma(types.braceR)) {
                break;
              }
            } else {
              first = false;
            }

            var node = this.startNode();
            node.local = this.parseIdent(true);
            node.exported = this.eatContextual("as") ? this.parseIdent(true) : node.local;
            this.checkExport(exports, node.exported.name, node.exported.start);
            nodes.push(this.finishNode(node, "ExportSpecifier"));
          }

          return nodes;
        };

        pp$1.parseImport = function (node) {
          this.next();

          if (this.type === types.string) {
            node.specifiers = empty;
            node.source = this.parseExprAtom();
          } else {
            node.specifiers = this.parseImportSpecifiers();
            this.expectContextual("from");
            node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();
          }

          this.semicolon();
          return this.finishNode(node, "ImportDeclaration");
        };

        pp$1.parseImportSpecifiers = function () {
          var nodes = [],
              first = true;

          if (this.type === types.name) {
            var node = this.startNode();
            node.local = this.parseIdent();
            this.checkLVal(node.local, BIND_LEXICAL);
            nodes.push(this.finishNode(node, "ImportDefaultSpecifier"));

            if (!this.eat(types.comma)) {
              return nodes;
            }
          }

          if (this.type === types.star) {
            var node$1 = this.startNode();
            this.next();
            this.expectContextual("as");
            node$1.local = this.parseIdent();
            this.checkLVal(node$1.local, BIND_LEXICAL);
            nodes.push(this.finishNode(node$1, "ImportNamespaceSpecifier"));
            return nodes;
          }

          this.expect(types.braceL);

          while (!this.eat(types.braceR)) {
            if (!first) {
              this.expect(types.comma);

              if (this.afterTrailingComma(types.braceR)) {
                break;
              }
            } else {
              first = false;
            }

            var node$2 = this.startNode();
            node$2.imported = this.parseIdent(true);

            if (this.eatContextual("as")) {
              node$2.local = this.parseIdent();
            } else {
              this.checkUnreserved(node$2.imported);
              node$2.local = node$2.imported;
            }

            this.checkLVal(node$2.local, BIND_LEXICAL);
            nodes.push(this.finishNode(node$2, "ImportSpecifier"));
          }

          return nodes;
        };

        pp$1.adaptDirectivePrologue = function (statements) {
          for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {
            statements[i].directive = statements[i].expression.raw.slice(1, -1);
          }
        };

        pp$1.isDirectiveCandidate = function (statement) {
          return statement.type === "ExpressionStatement" && statement.expression.type === "Literal" && typeof statement.expression.value === "string" && (this.input[statement.start] === "\"" || this.input[statement.start] === "'");
        };

        var pp$2 = Parser.prototype;

        pp$2.toAssignable = function (node, isBinding, refDestructuringErrors) {
          if (this.options.ecmaVersion >= 6 && node) {
            switch (node.type) {
              case "Identifier":
                if (this.inAsync && node.name === "await") {
                  this.raise(node.start, "Cannot use 'await' as identifier inside an async function");
                }

                break;

              case "ObjectPattern":
              case "ArrayPattern":
              case "RestElement":
                break;

              case "ObjectExpression":
                node.type = "ObjectPattern";

                if (refDestructuringErrors) {
                  this.checkPatternErrors(refDestructuringErrors, true);
                }

                for (var i = 0, list = node.properties; i < list.length; i += 1) {
                  var prop = list[i];
                  this.toAssignable(prop, isBinding);

                  if (prop.type === "RestElement" && (prop.argument.type === "ArrayPattern" || prop.argument.type === "ObjectPattern")) {
                    this.raise(prop.argument.start, "Unexpected token");
                  }
                }

                break;

              case "Property":
                if (node.kind !== "init") {
                  this.raise(node.key.start, "Object pattern can't contain getter or setter");
                }

                this.toAssignable(node.value, isBinding);
                break;

              case "ArrayExpression":
                node.type = "ArrayPattern";

                if (refDestructuringErrors) {
                  this.checkPatternErrors(refDestructuringErrors, true);
                }

                this.toAssignableList(node.elements, isBinding);
                break;

              case "SpreadElement":
                node.type = "RestElement";
                this.toAssignable(node.argument, isBinding);

                if (node.argument.type === "AssignmentPattern") {
                  this.raise(node.argument.start, "Rest elements cannot have a default value");
                }

                break;

              case "AssignmentExpression":
                if (node.operator !== "=") {
                  this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
                }

                node.type = "AssignmentPattern";
                delete node.operator;
                this.toAssignable(node.left, isBinding);

              case "AssignmentPattern":
                break;

              case "ParenthesizedExpression":
                this.toAssignable(node.expression, isBinding, refDestructuringErrors);
                break;

              case "MemberExpression":
                if (!isBinding) {
                  break;
                }

              default:
                this.raise(node.start, "Assigning to rvalue");
            }
          } else if (refDestructuringErrors) {
            this.checkPatternErrors(refDestructuringErrors, true);
          }

          return node;
        };

        pp$2.toAssignableList = function (exprList, isBinding) {
          var end = exprList.length;

          for (var i = 0; i < end; i++) {
            var elt = exprList[i];

            if (elt) {
              this.toAssignable(elt, isBinding);
            }
          }

          if (end) {
            var last = exprList[end - 1];

            if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier") {
              this.unexpected(last.argument.start);
            }
          }

          return exprList;
        };

        pp$2.parseSpread = function (refDestructuringErrors) {
          var node = this.startNode();
          this.next();
          node.argument = this.parseMaybeAssign(false, refDestructuringErrors);
          return this.finishNode(node, "SpreadElement");
        };

        pp$2.parseRestBinding = function () {
          var node = this.startNode();
          this.next();

          if (this.options.ecmaVersion === 6 && this.type !== types.name) {
            this.unexpected();
          }

          node.argument = this.parseBindingAtom();
          return this.finishNode(node, "RestElement");
        };

        pp$2.parseBindingAtom = function () {
          if (this.options.ecmaVersion >= 6) {
            switch (this.type) {
              case types.bracketL:
                var node = this.startNode();
                this.next();
                node.elements = this.parseBindingList(types.bracketR, true, true);
                return this.finishNode(node, "ArrayPattern");

              case types.braceL:
                return this.parseObj(true);
            }
          }

          return this.parseIdent();
        };

        pp$2.parseBindingList = function (close, allowEmpty, allowTrailingComma) {
          var elts = [],
              first = true;

          while (!this.eat(close)) {
            if (first) {
              first = false;
            } else {
              this.expect(types.comma);
            }

            if (allowEmpty && this.type === types.comma) {
              elts.push(null);
            } else if (allowTrailingComma && this.afterTrailingComma(close)) {
              break;
            } else if (this.type === types.ellipsis) {
              var rest = this.parseRestBinding();
              this.parseBindingListItem(rest);
              elts.push(rest);

              if (this.type === types.comma) {
                this.raise(this.start, "Comma is not permitted after the rest element");
              }

              this.expect(close);
              break;
            } else {
              var elem = this.parseMaybeDefault(this.start, this.startLoc);
              this.parseBindingListItem(elem);
              elts.push(elem);
            }
          }

          return elts;
        };

        pp$2.parseBindingListItem = function (param) {
          return param;
        };

        pp$2.parseMaybeDefault = function (startPos, startLoc, left) {
          left = left || this.parseBindingAtom();

          if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) {
            return left;
          }

          var node = this.startNodeAt(startPos, startLoc);
          node.left = left;
          node.right = this.parseMaybeAssign();
          return this.finishNode(node, "AssignmentPattern");
        };

        pp$2.checkLVal = function (expr, bindingType, checkClashes) {
          if (bindingType === void 0) bindingType = BIND_NONE;

          switch (expr.type) {
            case "Identifier":
              if (bindingType === BIND_LEXICAL && expr.name === "let") {
                this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name");
              }

              if (this.strict && this.reservedWordsStrictBind.test(expr.name)) {
                this.raiseRecoverable(expr.start, (bindingType ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
              }

              if (checkClashes) {
                if (has(checkClashes, expr.name)) {
                  this.raiseRecoverable(expr.start, "Argument name clash");
                }

                checkClashes[expr.name] = true;
              }

              if (bindingType !== BIND_NONE && bindingType !== BIND_OUTSIDE) {
                this.declareName(expr.name, bindingType, expr.start);
              }

              break;

            case "MemberExpression":
              if (bindingType) {
                this.raiseRecoverable(expr.start, "Binding member expression");
              }

              break;

            case "ObjectPattern":
              for (var i = 0, list = expr.properties; i < list.length; i += 1) {
                var prop = list[i];
                this.checkLVal(prop, bindingType, checkClashes);
              }

              break;

            case "Property":
              this.checkLVal(expr.value, bindingType, checkClashes);
              break;

            case "ArrayPattern":
              for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
                var elem = list$1[i$1];

                if (elem) {
                  this.checkLVal(elem, bindingType, checkClashes);
                }
              }

              break;

            case "AssignmentPattern":
              this.checkLVal(expr.left, bindingType, checkClashes);
              break;

            case "RestElement":
              this.checkLVal(expr.argument, bindingType, checkClashes);
              break;

            case "ParenthesizedExpression":
              this.checkLVal(expr.expression, bindingType, checkClashes);
              break;

            default:
              this.raise(expr.start, (bindingType ? "Binding" : "Assigning to") + " rvalue");
          }
        };

        var pp$3 = Parser.prototype;

        pp$3.checkPropClash = function (prop, propHash, refDestructuringErrors) {
          if (this.options.ecmaVersion >= 9 && prop.type === "SpreadElement") {
            return;
          }

          if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) {
            return;
          }

          var key = prop.key;
          var name;

          switch (key.type) {
            case "Identifier":
              name = key.name;
              break;

            case "Literal":
              name = String(key.value);
              break;

            default:
              return;
          }

          var kind = prop.kind;

          if (this.options.ecmaVersion >= 6) {
            if (name === "__proto__" && kind === "init") {
              if (propHash.proto) {
                if (refDestructuringErrors && refDestructuringErrors.doubleProto < 0) {
                  refDestructuringErrors.doubleProto = key.start;
                } else {
                  this.raiseRecoverable(key.start, "Redefinition of __proto__ property");
                }
              }

              propHash.proto = true;
            }

            return;
          }

          name = "$" + name;
          var other = propHash[name];

          if (other) {
            var redefinition;

            if (kind === "init") {
              redefinition = this.strict && other.init || other.get || other.set;
            } else {
              redefinition = other.init || other[kind];
            }

            if (redefinition) {
              this.raiseRecoverable(key.start, "Redefinition of property");
            }
          } else {
            other = propHash[name] = {
              init: false,
              get: false,
              set: false
            };
          }

          other[kind] = true;
        };

        pp$3.parseExpression = function (noIn, refDestructuringErrors) {
          var startPos = this.start,
              startLoc = this.startLoc;
          var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);

          if (this.type === types.comma) {
            var node = this.startNodeAt(startPos, startLoc);
            node.expressions = [expr];

            while (this.eat(types.comma)) {
              node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors));
            }

            return this.finishNode(node, "SequenceExpression");
          }

          return expr;
        };

        pp$3.parseMaybeAssign = function (noIn, refDestructuringErrors, afterLeftParse) {
          if (this.isContextual("yield")) {
            if (this.inGenerator) {
              return this.parseYield(noIn);
            } else {
              this.exprAllowed = false;
            }
          }

          var ownDestructuringErrors = false,
              oldParenAssign = -1,
              oldTrailingComma = -1,
              oldShorthandAssign = -1;

          if (refDestructuringErrors) {
            oldParenAssign = refDestructuringErrors.parenthesizedAssign;
            oldTrailingComma = refDestructuringErrors.trailingComma;
            oldShorthandAssign = refDestructuringErrors.shorthandAssign;
            refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.shorthandAssign = -1;
          } else {
            refDestructuringErrors = new DestructuringErrors();
            ownDestructuringErrors = true;
          }

          var startPos = this.start,
              startLoc = this.startLoc;

          if (this.type === types.parenL || this.type === types.name) {
            this.potentialArrowAt = this.start;
          }

          var left = this.parseMaybeConditional(noIn, refDestructuringErrors);

          if (afterLeftParse) {
            left = afterLeftParse.call(this, left, startPos, startLoc);
          }

          if (this.type.isAssign) {
            var node = this.startNodeAt(startPos, startLoc);
            node.operator = this.value;
            node.left = this.type === types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;

            if (!ownDestructuringErrors) {
              DestructuringErrors.call(refDestructuringErrors);
            }

            refDestructuringErrors.shorthandAssign = -1;
            this.checkLVal(left);
            this.next();
            node.right = this.parseMaybeAssign(noIn);
            return this.finishNode(node, "AssignmentExpression");
          } else {
            if (ownDestructuringErrors) {
              this.checkExpressionErrors(refDestructuringErrors, true);
            }
          }

          if (oldParenAssign > -1) {
            refDestructuringErrors.parenthesizedAssign = oldParenAssign;
          }

          if (oldTrailingComma > -1) {
            refDestructuringErrors.trailingComma = oldTrailingComma;
          }

          if (oldShorthandAssign > -1) {
            refDestructuringErrors.shorthandAssign = oldShorthandAssign;
          }

          return left;
        };

        pp$3.parseMaybeConditional = function (noIn, refDestructuringErrors) {
          var startPos = this.start,
              startLoc = this.startLoc;
          var expr = this.parseExprOps(noIn, refDestructuringErrors);

          if (this.checkExpressionErrors(refDestructuringErrors)) {
            return expr;
          }

          if (this.eat(types.question)) {
            var node = this.startNodeAt(startPos, startLoc);
            node.test = expr;
            node.consequent = this.parseMaybeAssign();
            this.expect(types.colon);
            node.alternate = this.parseMaybeAssign(noIn);
            return this.finishNode(node, "ConditionalExpression");
          }

          return expr;
        };

        pp$3.parseExprOps = function (noIn, refDestructuringErrors) {
          var startPos = this.start,
              startLoc = this.startLoc;
          var expr = this.parseMaybeUnary(refDestructuringErrors, false);

          if (this.checkExpressionErrors(refDestructuringErrors)) {
            return expr;
          }

          return expr.start === startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn);
        };

        pp$3.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {
          var prec = this.type.binop;

          if (prec != null && (!noIn || this.type !== types._in)) {
            if (prec > minPrec) {
              var logical = this.type === types.logicalOR || this.type === types.logicalAND;
              var op = this.value;
              this.next();
              var startPos = this.start,
                  startLoc = this.startLoc;
              var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);
              var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);
              return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);
            }
          }

          return left;
        };

        pp$3.buildBinary = function (startPos, startLoc, left, right, op, logical) {
          var node = this.startNodeAt(startPos, startLoc);
          node.left = left;
          node.operator = op;
          node.right = right;
          return this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression");
        };

        pp$3.parseMaybeUnary = function (refDestructuringErrors, sawUnary) {
          var startPos = this.start,
              startLoc = this.startLoc,
              expr;

          if (this.isContextual("await") && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction)) {
            expr = this.parseAwait();
            sawUnary = true;
          } else if (this.type.prefix) {
            var node = this.startNode(),
                update = this.type === types.incDec;
            node.operator = this.value;
            node.prefix = true;
            this.next();
            node.argument = this.parseMaybeUnary(null, true);
            this.checkExpressionErrors(refDestructuringErrors, true);

            if (update) {
              this.checkLVal(node.argument);
            } else if (this.strict && node.operator === "delete" && node.argument.type === "Identifier") {
              this.raiseRecoverable(node.start, "Deleting local variable in strict mode");
            } else {
              sawUnary = true;
            }

            expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
          } else {
            expr = this.parseExprSubscripts(refDestructuringErrors);

            if (this.checkExpressionErrors(refDestructuringErrors)) {
              return expr;
            }

            while (this.type.postfix && !this.canInsertSemicolon()) {
              var node$1 = this.startNodeAt(startPos, startLoc);
              node$1.operator = this.value;
              node$1.prefix = false;
              node$1.argument = expr;
              this.checkLVal(expr);
              this.next();
              expr = this.finishNode(node$1, "UpdateExpression");
            }
          }

          if (!sawUnary && this.eat(types.starstar)) {
            return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), "**", false);
          } else {
            return expr;
          }
        };

        pp$3.parseExprSubscripts = function (refDestructuringErrors) {
          var startPos = this.start,
              startLoc = this.startLoc;
          var expr = this.parseExprAtom(refDestructuringErrors);
          var skipArrowSubscripts = expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")";

          if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) {
            return expr;
          }

          var result = this.parseSubscripts(expr, startPos, startLoc);

          if (refDestructuringErrors && result.type === "MemberExpression") {
            if (refDestructuringErrors.parenthesizedAssign >= result.start) {
              refDestructuringErrors.parenthesizedAssign = -1;
            }

            if (refDestructuringErrors.parenthesizedBind >= result.start) {
              refDestructuringErrors.parenthesizedBind = -1;
            }
          }

          return result;
        };

        pp$3.parseSubscripts = function (base, startPos, startLoc, noCalls) {
          var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" && this.lastTokEnd === base.end && !this.canInsertSemicolon() && this.input.slice(base.start, base.end) === "async";

          while (true) {
            var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow);

            if (element === base || element.type === "ArrowFunctionExpression") {
              return element;
            }

            base = element;
          }
        };

        pp$3.parseSubscript = function (base, startPos, startLoc, noCalls, maybeAsyncArrow) {
          var computed = this.eat(types.bracketL);

          if (computed || this.eat(types.dot)) {
            var node = this.startNodeAt(startPos, startLoc);
            node.object = base;
            node.property = computed ? this.parseExpression() : this.parseIdent(this.options.allowReserved !== "never");
            node.computed = !!computed;

            if (computed) {
              this.expect(types.bracketR);
            }

            base = this.finishNode(node, "MemberExpression");
          } else if (!noCalls && this.eat(types.parenL)) {
            var refDestructuringErrors = new DestructuringErrors(),
                oldYieldPos = this.yieldPos,
                oldAwaitPos = this.awaitPos,
                oldAwaitIdentPos = this.awaitIdentPos;
            this.yieldPos = 0;
            this.awaitPos = 0;
            this.awaitIdentPos = 0;
            var exprList = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);

            if (maybeAsyncArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {
              this.checkPatternErrors(refDestructuringErrors, false);
              this.checkYieldAwaitInDefaultParams();

              if (this.awaitIdentPos > 0) {
                this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function");
              }

              this.yieldPos = oldYieldPos;
              this.awaitPos = oldAwaitPos;
              this.awaitIdentPos = oldAwaitIdentPos;
              return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true);
            }

            this.checkExpressionErrors(refDestructuringErrors, true);
            this.yieldPos = oldYieldPos || this.yieldPos;
            this.awaitPos = oldAwaitPos || this.awaitPos;
            this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
            var node$1 = this.startNodeAt(startPos, startLoc);
            node$1.callee = base;
            node$1.arguments = exprList;
            base = this.finishNode(node$1, "CallExpression");
          } else if (this.type === types.backQuote) {
            var node$2 = this.startNodeAt(startPos, startLoc);
            node$2.tag = base;
            node$2.quasi = this.parseTemplate({
              isTagged: true
            });
            base = this.finishNode(node$2, "TaggedTemplateExpression");
          }

          return base;
        };

        pp$3.parseExprAtom = function (refDestructuringErrors) {
          if (this.type === types.slash) {
            this.readRegexp();
          }

          var node,
              canBeArrow = this.potentialArrowAt === this.start;

          switch (this.type) {
            case types._super:
              if (!this.allowSuper) {
                this.raise(this.start, "'super' keyword outside a method");
              }

              node = this.startNode();
              this.next();

              if (this.type === types.parenL && !this.allowDirectSuper) {
                this.raise(node.start, "super() call outside constructor of a subclass");
              }

              if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL) {
                this.unexpected();
              }

              return this.finishNode(node, "Super");

            case types._this:
              node = this.startNode();
              this.next();
              return this.finishNode(node, "ThisExpression");

            case types.name:
              var startPos = this.start,
                  startLoc = this.startLoc,
                  containsEsc = this.containsEsc;
              var id = this.parseIdent(false);

              if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === "async" && !this.canInsertSemicolon() && this.eat(types._function)) {
                return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true);
              }

              if (canBeArrow && !this.canInsertSemicolon()) {
                if (this.eat(types.arrow)) {
                  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false);
                }

                if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === types.name && !containsEsc) {
                  id = this.parseIdent(false);

                  if (this.canInsertSemicolon() || !this.eat(types.arrow)) {
                    this.unexpected();
                  }

                  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true);
                }
              }

              return id;

            case types.regexp:
              var value = this.value;
              node = this.parseLiteral(value.value);
              node.regex = {
                pattern: value.pattern,
                flags: value.flags
              };
              return node;

            case types.num:
            case types.string:
              return this.parseLiteral(this.value);

            case types._null:
            case types._true:
            case types._false:
              node = this.startNode();
              node.value = this.type === types._null ? null : this.type === types._true;
              node.raw = this.type.keyword;
              this.next();
              return this.finishNode(node, "Literal");

            case types.parenL:
              var start = this.start,
                  expr = this.parseParenAndDistinguishExpression(canBeArrow);

              if (refDestructuringErrors) {
                if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) {
                  refDestructuringErrors.parenthesizedAssign = start;
                }

                if (refDestructuringErrors.parenthesizedBind < 0) {
                  refDestructuringErrors.parenthesizedBind = start;
                }
              }

              return expr;

            case types.bracketL:
              node = this.startNode();
              this.next();
              node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);
              return this.finishNode(node, "ArrayExpression");

            case types.braceL:
              return this.parseObj(false, refDestructuringErrors);

            case types._function:
              node = this.startNode();
              this.next();
              return this.parseFunction(node, 0);

            case types._class:
              return this.parseClass(this.startNode(), false);

            case types._new:
              return this.parseNew();

            case types.backQuote:
              return this.parseTemplate();

            case types._import:
              if (this.options.ecmaVersion >= 11) {
                return this.parseExprImport();
              } else {
                return this.unexpected();
              }

            default:
              this.unexpected();
          }
        };

        pp$3.parseExprImport = function () {
          var node = this.startNode();
          this.next();

          switch (this.type) {
            case types.parenL:
              return this.parseDynamicImport(node);

            default:
              this.unexpected();
          }
        };

        pp$3.parseDynamicImport = function (node) {
          this.next();
          node.source = this.parseMaybeAssign();

          if (!this.eat(types.parenR)) {
            var errorPos = this.start;

            if (this.eat(types.comma) && this.eat(types.parenR)) {
              this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()");
            } else {
              this.unexpected(errorPos);
            }
          }

          return this.finishNode(node, "ImportExpression");
        };

        pp$3.parseLiteral = function (value) {
          var node = this.startNode();
          node.value = value;
          node.raw = this.input.slice(this.start, this.end);

          if (node.raw.charCodeAt(node.raw.length - 1) === 110) {
            node.bigint = node.raw.slice(0, -1);
          }

          this.next();
          return this.finishNode(node, "Literal");
        };

        pp$3.parseParenExpression = function () {
          this.expect(types.parenL);
          var val = this.parseExpression();
          this.expect(types.parenR);
          return val;
        };

        pp$3.parseParenAndDistinguishExpression = function (canBeArrow) {
          var startPos = this.start,
              startLoc = this.startLoc,
              val,
              allowTrailingComma = this.options.ecmaVersion >= 8;

          if (this.options.ecmaVersion >= 6) {
            this.next();
            var innerStartPos = this.start,
                innerStartLoc = this.startLoc;
            var exprList = [],
                first = true,
                lastIsComma = false;
            var refDestructuringErrors = new DestructuringErrors(),
                oldYieldPos = this.yieldPos,
                oldAwaitPos = this.awaitPos,
                spreadStart;
            this.yieldPos = 0;
            this.awaitPos = 0;

            while (this.type !== types.parenR) {
              first ? first = false : this.expect(types.comma);

              if (allowTrailingComma && this.afterTrailingComma(types.parenR, true)) {
                lastIsComma = true;
                break;
              } else if (this.type === types.ellipsis) {
                spreadStart = this.start;
                exprList.push(this.parseParenItem(this.parseRestBinding()));

                if (this.type === types.comma) {
                  this.raise(this.start, "Comma is not permitted after the rest element");
                }

                break;
              } else {
                exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
              }
            }

            var innerEndPos = this.start,
                innerEndLoc = this.startLoc;
            this.expect(types.parenR);

            if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {
              this.checkPatternErrors(refDestructuringErrors, false);
              this.checkYieldAwaitInDefaultParams();
              this.yieldPos = oldYieldPos;
              this.awaitPos = oldAwaitPos;
              return this.parseParenArrowList(startPos, startLoc, exprList);
            }

            if (!exprList.length || lastIsComma) {
              this.unexpected(this.lastTokStart);
            }

            if (spreadStart) {
              this.unexpected(spreadStart);
            }

            this.checkExpressionErrors(refDestructuringErrors, true);
            this.yieldPos = oldYieldPos || this.yieldPos;
            this.awaitPos = oldAwaitPos || this.awaitPos;

            if (exprList.length > 1) {
              val = this.startNodeAt(innerStartPos, innerStartLoc);
              val.expressions = exprList;
              this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
            } else {
              val = exprList[0];
            }
          } else {
            val = this.parseParenExpression();
          }

          if (this.options.preserveParens) {
            var par = this.startNodeAt(startPos, startLoc);
            par.expression = val;
            return this.finishNode(par, "ParenthesizedExpression");
          } else {
            return val;
          }
        };

        pp$3.parseParenItem = function (item) {
          return item;
        };

        pp$3.parseParenArrowList = function (startPos, startLoc, exprList) {
          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);
        };

        var empty$1 = [];

        pp$3.parseNew = function () {
          var node = this.startNode();
          var meta = this.parseIdent(true);

          if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {
            node.meta = meta;
            var containsEsc = this.containsEsc;
            node.property = this.parseIdent(true);

            if (node.property.name !== "target" || containsEsc) {
              this.raiseRecoverable(node.property.start, "The only valid meta property for new is new.target");
            }

            if (!this.inNonArrowFunction()) {
              this.raiseRecoverable(node.start, "new.target can only be used in functions");
            }

            return this.finishNode(node, "MetaProperty");
          }

          var startPos = this.start,
              startLoc = this.startLoc,
              isImport = this.type === types._import;
          node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);

          if (isImport && node.callee.type === "ImportExpression") {
            this.raise(startPos, "Cannot use new with import()");
          }

          if (this.eat(types.parenL)) {
            node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false);
          } else {
            node.arguments = empty$1;
          }

          return this.finishNode(node, "NewExpression");
        };

        pp$3.parseTemplateElement = function (ref) {
          var isTagged = ref.isTagged;
          var elem = this.startNode();

          if (this.type === types.invalidTemplate) {
            if (!isTagged) {
              this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
            }

            elem.value = {
              raw: this.value,
              cooked: null
            };
          } else {
            elem.value = {
              raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
              cooked: this.value
            };
          }

          this.next();
          elem.tail = this.type === types.backQuote;
          return this.finishNode(elem, "TemplateElement");
        };

        pp$3.parseTemplate = function (ref) {
          if (ref === void 0) ref = {};
          var isTagged = ref.isTagged;
          if (isTagged === void 0) isTagged = false;
          var node = this.startNode();
          this.next();
          node.expressions = [];
          var curElt = this.parseTemplateElement({
            isTagged: isTagged
          });
          node.quasis = [curElt];

          while (!curElt.tail) {
            if (this.type === types.eof) {
              this.raise(this.pos, "Unterminated template literal");
            }

            this.expect(types.dollarBraceL);
            node.expressions.push(this.parseExpression());
            this.expect(types.braceR);
            node.quasis.push(curElt = this.parseTemplateElement({
              isTagged: isTagged
            }));
          }

          this.next();
          return this.finishNode(node, "TemplateLiteral");
        };

        pp$3.isAsyncProp = function (prop) {
          return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" && (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
        };

        pp$3.parseObj = function (isPattern, refDestructuringErrors) {
          var node = this.startNode(),
              first = true,
              propHash = {};
          node.properties = [];
          this.next();

          while (!this.eat(types.braceR)) {
            if (!first) {
              this.expect(types.comma);

              if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types.braceR)) {
                break;
              }
            } else {
              first = false;
            }

            var prop = this.parseProperty(isPattern, refDestructuringErrors);

            if (!isPattern) {
              this.checkPropClash(prop, propHash, refDestructuringErrors);
            }

            node.properties.push(prop);
          }

          return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
        };

        pp$3.parseProperty = function (isPattern, refDestructuringErrors) {
          var prop = this.startNode(),
              isGenerator,
              isAsync,
              startPos,
              startLoc;

          if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {
            if (isPattern) {
              prop.argument = this.parseIdent(false);

              if (this.type === types.comma) {
                this.raise(this.start, "Comma is not permitted after the rest element");
              }

              return this.finishNode(prop, "RestElement");
            }

            if (this.type === types.parenL && refDestructuringErrors) {
              if (refDestructuringErrors.parenthesizedAssign < 0) {
                refDestructuringErrors.parenthesizedAssign = this.start;
              }

              if (refDestructuringErrors.parenthesizedBind < 0) {
                refDestructuringErrors.parenthesizedBind = this.start;
              }
            }

            prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);

            if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {
              refDestructuringErrors.trailingComma = this.start;
            }

            return this.finishNode(prop, "SpreadElement");
          }

          if (this.options.ecmaVersion >= 6) {
            prop.method = false;
            prop.shorthand = false;

            if (isPattern || refDestructuringErrors) {
              startPos = this.start;
              startLoc = this.startLoc;
            }

            if (!isPattern) {
              isGenerator = this.eat(types.star);
            }
          }

          var containsEsc = this.containsEsc;
          this.parsePropertyName(prop);

          if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {
            isAsync = true;
            isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);
            this.parsePropertyName(prop, refDestructuringErrors);
          } else {
            isAsync = false;
          }

          this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);
          return this.finishNode(prop, "Property");
        };

        pp$3.parsePropertyValue = function (prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
          if ((isGenerator || isAsync) && this.type === types.colon) {
            this.unexpected();
          }

          if (this.eat(types.colon)) {
            prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
            prop.kind = "init";
          } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {
            if (isPattern) {
              this.unexpected();
            }

            prop.kind = "init";
            prop.method = true;
            prop.value = this.parseMethod(isGenerator, isAsync);
          } else if (!isPattern && !containsEsc && this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && this.type !== types.comma && this.type !== types.braceR) {
            if (isGenerator || isAsync) {
              this.unexpected();
            }

            prop.kind = prop.key.name;
            this.parsePropertyName(prop);
            prop.value = this.parseMethod(false);
            var paramCount = prop.kind === "get" ? 0 : 1;

            if (prop.value.params.length !== paramCount) {
              var start = prop.value.start;

              if (prop.kind === "get") {
                this.raiseRecoverable(start, "getter should have no params");
              } else {
                this.raiseRecoverable(start, "setter should have exactly one param");
              }
            } else {
              if (prop.kind === "set" && prop.value.params[0].type === "RestElement") {
                this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
              }
            }
          } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
            if (isGenerator || isAsync) {
              this.unexpected();
            }

            this.checkUnreserved(prop.key);

            if (prop.key.name === "await" && !this.awaitIdentPos) {
              this.awaitIdentPos = startPos;
            }

            prop.kind = "init";

            if (isPattern) {
              prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
            } else if (this.type === types.eq && refDestructuringErrors) {
              if (refDestructuringErrors.shorthandAssign < 0) {
                refDestructuringErrors.shorthandAssign = this.start;
              }

              prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
            } else {
              prop.value = prop.key;
            }

            prop.shorthand = true;
          } else {
            this.unexpected();
          }
        };

        pp$3.parsePropertyName = function (prop) {
          if (this.options.ecmaVersion >= 6) {
            if (this.eat(types.bracketL)) {
              prop.computed = true;
              prop.key = this.parseMaybeAssign();
              this.expect(types.bracketR);
              return prop.key;
            } else {
              prop.computed = false;
            }
          }

          return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never");
        };

        pp$3.initFunction = function (node) {
          node.id = null;

          if (this.options.ecmaVersion >= 6) {
            node.generator = node.expression = false;
          }

          if (this.options.ecmaVersion >= 8) {
            node.async = false;
          }
        };

        pp$3.parseMethod = function (isGenerator, isAsync, allowDirectSuper) {
          var node = this.startNode(),
              oldYieldPos = this.yieldPos,
              oldAwaitPos = this.awaitPos,
              oldAwaitIdentPos = this.awaitIdentPos;
          this.initFunction(node);

          if (this.options.ecmaVersion >= 6) {
            node.generator = isGenerator;
          }

          if (this.options.ecmaVersion >= 8) {
            node.async = !!isAsync;
          }

          this.yieldPos = 0;
          this.awaitPos = 0;
          this.awaitIdentPos = 0;
          this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));
          this.expect(types.parenL);
          node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
          this.checkYieldAwaitInDefaultParams();
          this.parseFunctionBody(node, false, true);
          this.yieldPos = oldYieldPos;
          this.awaitPos = oldAwaitPos;
          this.awaitIdentPos = oldAwaitIdentPos;
          return this.finishNode(node, "FunctionExpression");
        };

        pp$3.parseArrowExpression = function (node, params, isAsync) {
          var oldYieldPos = this.yieldPos,
              oldAwaitPos = this.awaitPos,
              oldAwaitIdentPos = this.awaitIdentPos;
          this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);
          this.initFunction(node);

          if (this.options.ecmaVersion >= 8) {
            node.async = !!isAsync;
          }

          this.yieldPos = 0;
          this.awaitPos = 0;
          this.awaitIdentPos = 0;
          node.params = this.toAssignableList(params, true);
          this.parseFunctionBody(node, true, false);
          this.yieldPos = oldYieldPos;
          this.awaitPos = oldAwaitPos;
          this.awaitIdentPos = oldAwaitIdentPos;
          return this.finishNode(node, "ArrowFunctionExpression");
        };

        pp$3.parseFunctionBody = function (node, isArrowFunction, isMethod) {
          var isExpression = isArrowFunction && this.type !== types.braceL;
          var oldStrict = this.strict,
              useStrict = false;

          if (isExpression) {
            node.body = this.parseMaybeAssign();
            node.expression = true;
            this.checkParams(node, false);
          } else {
            var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);

            if (!oldStrict || nonSimple) {
              useStrict = this.strictDirective(this.end);

              if (useStrict && nonSimple) {
                this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list");
              }
            }

            var oldLabels = this.labels;
            this.labels = [];

            if (useStrict) {
              this.strict = true;
            }

            this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));
            node.body = this.parseBlock(false);
            node.expression = false;
            this.adaptDirectivePrologue(node.body.body);
            this.labels = oldLabels;
          }

          this.exitScope();

          if (this.strict && node.id) {
            this.checkLVal(node.id, BIND_OUTSIDE);
          }

          this.strict = oldStrict;
        };

        pp$3.isSimpleParamList = function (params) {
          for (var i = 0, list = params; i < list.length; i += 1) {
            var param = list[i];

            if (param.type !== "Identifier") {
              return false;
            }
          }

          return true;
        };

        pp$3.checkParams = function (node, allowDuplicates) {
          var nameHash = {};

          for (var i = 0, list = node.params; i < list.length; i += 1) {
            var param = list[i];
            this.checkLVal(param, BIND_VAR, allowDuplicates ? null : nameHash);
          }
        };

        pp$3.parseExprList = function (close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
          var elts = [],
              first = true;

          while (!this.eat(close)) {
            if (!first) {
              this.expect(types.comma);

              if (allowTrailingComma && this.afterTrailingComma(close)) {
                break;
              }
            } else {
              first = false;
            }

            var elt = void 0;

            if (allowEmpty && this.type === types.comma) {
              elt = null;
            } else if (this.type === types.ellipsis) {
              elt = this.parseSpread(refDestructuringErrors);

              if (refDestructuringErrors && this.type === types.comma && refDestructuringErrors.trailingComma < 0) {
                refDestructuringErrors.trailingComma = this.start;
              }
            } else {
              elt = this.parseMaybeAssign(false, refDestructuringErrors);
            }

            elts.push(elt);
          }

          return elts;
        };

        pp$3.checkUnreserved = function (ref) {
          var start = ref.start;
          var end = ref.end;
          var name = ref.name;

          if (this.inGenerator && name === "yield") {
            this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator");
          }

          if (this.inAsync && name === "await") {
            this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function");
          }

          if (this.keywords.test(name)) {
            this.raise(start, "Unexpected keyword '" + name + "'");
          }

          if (this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf("\\") !== -1) {
            return;
          }

          var re = this.strict ? this.reservedWordsStrict : this.reservedWords;

          if (re.test(name)) {
            if (!this.inAsync && name === "await") {
              this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function");
            }

            this.raiseRecoverable(start, "The keyword '" + name + "' is reserved");
          }
        };

        pp$3.parseIdent = function (liberal, isBinding) {
          var node = this.startNode();

          if (this.type === types.name) {
            node.name = this.value;
          } else if (this.type.keyword) {
            node.name = this.type.keyword;

            if ((node.name === "class" || node.name === "function") && (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {
              this.context.pop();
            }
          } else {
            this.unexpected();
          }

          this.next();
          this.finishNode(node, "Identifier");

          if (!liberal) {
            this.checkUnreserved(node);

            if (node.name === "await" && !this.awaitIdentPos) {
              this.awaitIdentPos = node.start;
            }
          }

          return node;
        };

        pp$3.parseYield = function (noIn) {
          if (!this.yieldPos) {
            this.yieldPos = this.start;
          }

          var node = this.startNode();
          this.next();

          if (this.type === types.semi || this.canInsertSemicolon() || this.type !== types.star && !this.type.startsExpr) {
            node.delegate = false;
            node.argument = null;
          } else {
            node.delegate = this.eat(types.star);
            node.argument = this.parseMaybeAssign(noIn);
          }

          return this.finishNode(node, "YieldExpression");
        };

        pp$3.parseAwait = function () {
          if (!this.awaitPos) {
            this.awaitPos = this.start;
          }

          var node = this.startNode();
          this.next();
          node.argument = this.parseMaybeUnary(null, true);
          return this.finishNode(node, "AwaitExpression");
        };

        var pp$4 = Parser.prototype;

        pp$4.raise = function (pos, message) {
          var loc = getLineInfo(this.input, pos);
          message += " (" + loc.line + ":" + loc.column + ")";
          var err = new SyntaxError(message);
          err.pos = pos;
          err.loc = loc;
          err.raisedAt = this.pos;
          throw err;
        };

        pp$4.raiseRecoverable = pp$4.raise;

        pp$4.curPosition = function () {
          if (this.options.locations) {
            return new Position(this.curLine, this.pos - this.lineStart);
          }
        };

        var pp$5 = Parser.prototype;

        var Scope = function Scope(flags) {
          this.flags = flags;
          this.var = [];
          this.lexical = [];
          this.functions = [];
        };

        pp$5.enterScope = function (flags) {
          this.scopeStack.push(new Scope(flags));
        };

        pp$5.exitScope = function () {
          this.scopeStack.pop();
        };

        pp$5.treatFunctionsAsVarInScope = function (scope) {
          return scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_TOP;
        };

        pp$5.declareName = function (name, bindingType, pos) {
          var redeclared = false;

          if (bindingType === BIND_LEXICAL) {
            var scope = this.currentScope();
            redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;
            scope.lexical.push(name);

            if (this.inModule && scope.flags & SCOPE_TOP) {
              delete this.undefinedExports[name];
            }
          } else if (bindingType === BIND_SIMPLE_CATCH) {
            var scope$1 = this.currentScope();
            scope$1.lexical.push(name);
          } else if (bindingType === BIND_FUNCTION) {
            var scope$2 = this.currentScope();

            if (this.treatFunctionsAsVar) {
              redeclared = scope$2.lexical.indexOf(name) > -1;
            } else {
              redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1;
            }

            scope$2.functions.push(name);
          } else {
            for (var i = this.scopeStack.length - 1; i >= 0; --i) {
              var scope$3 = this.scopeStack[i];

              if (scope$3.lexical.indexOf(name) > -1 && !(scope$3.flags & SCOPE_SIMPLE_CATCH && scope$3.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
                redeclared = true;
                break;
              }

              scope$3.var.push(name);

              if (this.inModule && scope$3.flags & SCOPE_TOP) {
                delete this.undefinedExports[name];
              }

              if (scope$3.flags & SCOPE_VAR) {
                break;
              }
            }
          }

          if (redeclared) {
            this.raiseRecoverable(pos, "Identifier '" + name + "' has already been declared");
          }
        };

        pp$5.checkLocalExport = function (id) {
          if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1) {
            this.undefinedExports[id.name] = id;
          }
        };

        pp$5.currentScope = function () {
          return this.scopeStack[this.scopeStack.length - 1];
        };

        pp$5.currentVarScope = function () {
          for (var i = this.scopeStack.length - 1;; i--) {
            var scope = this.scopeStack[i];

            if (scope.flags & SCOPE_VAR) {
              return scope;
            }
          }
        };

        pp$5.currentThisScope = function () {
          for (var i = this.scopeStack.length - 1;; i--) {
            var scope = this.scopeStack[i];

            if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) {
              return scope;
            }
          }
        };

        var Node = function Node(parser, pos, loc) {
          this.type = "";
          this.start = pos;
          this.end = 0;

          if (parser.options.locations) {
            this.loc = new SourceLocation(parser, loc);
          }

          if (parser.options.directSourceFile) {
            this.sourceFile = parser.options.directSourceFile;
          }

          if (parser.options.ranges) {
            this.range = [pos, 0];
          }
        };

        var pp$6 = Parser.prototype;

        pp$6.startNode = function () {
          return new Node(this, this.start, this.startLoc);
        };

        pp$6.startNodeAt = function (pos, loc) {
          return new Node(this, pos, loc);
        };

        function finishNodeAt(node, type, pos, loc) {
          node.type = type;
          node.end = pos;

          if (this.options.locations) {
            node.loc.end = loc;
          }

          if (this.options.ranges) {
            node.range[1] = pos;
          }

          return node;
        }

        pp$6.finishNode = function (node, type) {
          return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);
        };

        pp$6.finishNodeAt = function (node, type, pos, loc) {
          return finishNodeAt.call(this, node, type, pos, loc);
        };

        var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {
          this.token = token;
          this.isExpr = !!isExpr;
          this.preserveSpace = !!preserveSpace;
          this.override = override;
          this.generator = !!generator;
        };

        var types$1 = {
          b_stat: new TokContext("{", false),
          b_expr: new TokContext("{", true),
          b_tmpl: new TokContext("${", false),
          p_stat: new TokContext("(", false),
          p_expr: new TokContext("(", true),
          q_tmpl: new TokContext("`", true, true, function (p) {
            return p.tryReadTemplateToken();
          }),
          f_stat: new TokContext("function", false),
          f_expr: new TokContext("function", true),
          f_expr_gen: new TokContext("function", true, false, null, true),
          f_gen: new TokContext("function", false, false, null, true)
        };
        var pp$7 = Parser.prototype;

        pp$7.initialContext = function () {
          return [types$1.b_stat];
        };

        pp$7.braceIsBlock = function (prevType) {
          var parent = this.curContext();

          if (parent === types$1.f_expr || parent === types$1.f_stat) {
            return true;
          }

          if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr)) {
            return !parent.isExpr;
          }

          if (prevType === types._return || prevType === types.name && this.exprAllowed) {
            return lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
          }

          if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {
            return true;
          }

          if (prevType === types.braceL) {
            return parent === types$1.b_stat;
          }

          if (prevType === types._var || prevType === types._const || prevType === types.name) {
            return false;
          }

          return !this.exprAllowed;
        };

        pp$7.inGeneratorContext = function () {
          for (var i = this.context.length - 1; i >= 1; i--) {
            var context = this.context[i];

            if (context.token === "function") {
              return context.generator;
            }
          }

          return false;
        };

        pp$7.updateContext = function (prevType) {
          var update,
              type = this.type;

          if (type.keyword && prevType === types.dot) {
            this.exprAllowed = false;
          } else if (update = type.updateContext) {
            update.call(this, prevType);
          } else {
            this.exprAllowed = type.beforeExpr;
          }
        };

        types.parenR.updateContext = types.braceR.updateContext = function () {
          if (this.context.length === 1) {
            this.exprAllowed = true;
            return;
          }

          var out = this.context.pop();

          if (out === types$1.b_stat && this.curContext().token === "function") {
            out = this.context.pop();
          }

          this.exprAllowed = !out.isExpr;
        };

        types.braceL.updateContext = function (prevType) {
          this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);
          this.exprAllowed = true;
        };

        types.dollarBraceL.updateContext = function () {
          this.context.push(types$1.b_tmpl);
          this.exprAllowed = true;
        };

        types.parenL.updateContext = function (prevType) {
          var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;
          this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);
          this.exprAllowed = true;
        };

        types.incDec.updateContext = function () {};

        types._function.updateContext = types._class.updateContext = function (prevType) {
          if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !(prevType === types._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {
            this.context.push(types$1.f_expr);
          } else {
            this.context.push(types$1.f_stat);
          }

          this.exprAllowed = false;
        };

        types.backQuote.updateContext = function () {
          if (this.curContext() === types$1.q_tmpl) {
            this.context.pop();
          } else {
            this.context.push(types$1.q_tmpl);
          }

          this.exprAllowed = false;
        };

        types.star.updateContext = function (prevType) {
          if (prevType === types._function) {
            var index = this.context.length - 1;

            if (this.context[index] === types$1.f_expr) {
              this.context[index] = types$1.f_expr_gen;
            } else {
              this.context[index] = types$1.f_gen;
            }
          }

          this.exprAllowed = true;
        };

        types.name.updateContext = function (prevType) {
          var allowed = false;

          if (this.options.ecmaVersion >= 6 && prevType !== types.dot) {
            if (this.value === "of" && !this.exprAllowed || this.value === "yield" && this.inGeneratorContext()) {
              allowed = true;
            }
          }

          this.exprAllowed = allowed;
        };

        var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";
        var ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic";
        var ecma11BinaryProperties = ecma10BinaryProperties;
        var unicodeBinaryProperties = {
          9: ecma9BinaryProperties,
          10: ecma10BinaryProperties,
          11: ecma11BinaryProperties
        };
        var unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu";
        var ecma9ScriptValues = "Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";
        var ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd";
        var ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho";
        var unicodeScriptValues = {
          9: ecma9ScriptValues,
          10: ecma10ScriptValues,
          11: ecma11ScriptValues
        };
        var data = {};

        function buildUnicodeData(ecmaVersion) {
          var d = data[ecmaVersion] = {
            binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues),
            nonBinary: {
              General_Category: wordsRegexp(unicodeGeneralCategoryValues),
              Script: wordsRegexp(unicodeScriptValues[ecmaVersion])
            }
          };
          d.nonBinary.Script_Extensions = d.nonBinary.Script;
          d.nonBinary.gc = d.nonBinary.General_Category;
          d.nonBinary.sc = d.nonBinary.Script;
          d.nonBinary.scx = d.nonBinary.Script_Extensions;
        }

        buildUnicodeData(9);
        buildUnicodeData(10);
        buildUnicodeData(11);
        var pp$8 = Parser.prototype;

        var RegExpValidationState = function RegExpValidationState(parser) {
          this.parser = parser;
          this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "");
          this.unicodeProperties = data[parser.options.ecmaVersion >= 11 ? 11 : parser.options.ecmaVersion];
          this.source = "";
          this.flags = "";
          this.start = 0;
          this.switchU = false;
          this.switchN = false;
          this.pos = 0;
          this.lastIntValue = 0;
          this.lastStringValue = "";
          this.lastAssertionIsQuantifiable = false;
          this.numCapturingParens = 0;
          this.maxBackReference = 0;
          this.groupNames = [];
          this.backReferenceNames = [];
        };

        RegExpValidationState.prototype.reset = function reset(start, pattern, flags) {
          var unicode = flags.indexOf("u") !== -1;
          this.start = start | 0;
          this.source = pattern + "";
          this.flags = flags;
          this.switchU = unicode && this.parser.options.ecmaVersion >= 6;
          this.switchN = unicode && this.parser.options.ecmaVersion >= 9;
        };

        RegExpValidationState.prototype.raise = function raise(message) {
          this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + message);
        };

        RegExpValidationState.prototype.at = function at(i) {
          var s = this.source;
          var l = s.length;

          if (i >= l) {
            return -1;
          }

          var c = s.charCodeAt(i);

          if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {
            return c;
          }

          return (c << 10) + s.charCodeAt(i + 1) - 0x35FDC00;
        };

        RegExpValidationState.prototype.nextIndex = function nextIndex(i) {
          var s = this.source;
          var l = s.length;

          if (i >= l) {
            return l;
          }

          var c = s.charCodeAt(i);

          if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {
            return i + 1;
          }

          return i + 2;
        };

        RegExpValidationState.prototype.current = function current() {
          return this.at(this.pos);
        };

        RegExpValidationState.prototype.lookahead = function lookahead() {
          return this.at(this.nextIndex(this.pos));
        };

        RegExpValidationState.prototype.advance = function advance() {
          this.pos = this.nextIndex(this.pos);
        };

        RegExpValidationState.prototype.eat = function eat(ch) {
          if (this.current() === ch) {
            this.advance();
            return true;
          }

          return false;
        };

        function codePointToString(ch) {
          if (ch <= 0xFFFF) {
            return String.fromCharCode(ch);
          }

          ch -= 0x10000;
          return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00);
        }

        pp$8.validateRegExpFlags = function (state) {
          var validFlags = state.validFlags;
          var flags = state.flags;

          for (var i = 0; i < flags.length; i++) {
            var flag = flags.charAt(i);

            if (validFlags.indexOf(flag) === -1) {
              this.raise(state.start, "Invalid regular expression flag");
            }

            if (flags.indexOf(flag, i + 1) > -1) {
              this.raise(state.start, "Duplicate regular expression flag");
            }
          }
        };

        pp$8.validateRegExpPattern = function (state) {
          this.regexp_pattern(state);

          if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {
            state.switchN = true;
            this.regexp_pattern(state);
          }
        };

        pp$8.regexp_pattern = function (state) {
          state.pos = 0;
          state.lastIntValue = 0;
          state.lastStringValue = "";
          state.lastAssertionIsQuantifiable = false;
          state.numCapturingParens = 0;
          state.maxBackReference = 0;
          state.groupNames.length = 0;
          state.backReferenceNames.length = 0;
          this.regexp_disjunction(state);

          if (state.pos !== state.source.length) {
            if (state.eat(0x29)) {
              state.raise("Unmatched ')'");
            }

            if (state.eat(0x5D) || state.eat(0x7D)) {
              state.raise("Lone quantifier brackets");
            }
          }

          if (state.maxBackReference > state.numCapturingParens) {
            state.raise("Invalid escape");
          }

          for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {
            var name = list[i];

            if (state.groupNames.indexOf(name) === -1) {
              state.raise("Invalid named capture referenced");
            }
          }
        };

        pp$8.regexp_disjunction = function (state) {
          this.regexp_alternative(state);

          while (state.eat(0x7C)) {
            this.regexp_alternative(state);
          }

          if (this.regexp_eatQuantifier(state, true)) {
            state.raise("Nothing to repeat");
          }

          if (state.eat(0x7B)) {
            state.raise("Lone quantifier brackets");
          }
        };

        pp$8.regexp_alternative = function (state) {
          while (state.pos < state.source.length && this.regexp_eatTerm(state)) {}
        };

        pp$8.regexp_eatTerm = function (state) {
          if (this.regexp_eatAssertion(state)) {
            if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {
              if (state.switchU) {
                state.raise("Invalid quantifier");
              }
            }

            return true;
          }

          if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {
            this.regexp_eatQuantifier(state);
            return true;
          }

          return false;
        };

        pp$8.regexp_eatAssertion = function (state) {
          var start = state.pos;
          state.lastAssertionIsQuantifiable = false;

          if (state.eat(0x5E) || state.eat(0x24)) {
            return true;
          }

          if (state.eat(0x5C)) {
            if (state.eat(0x42) || state.eat(0x62)) {
              return true;
            }

            state.pos = start;
          }

          if (state.eat(0x28) && state.eat(0x3F)) {
            var lookbehind = false;

            if (this.options.ecmaVersion >= 9) {
              lookbehind = state.eat(0x3C);
            }

            if (state.eat(0x3D) || state.eat(0x21)) {
              this.regexp_disjunction(state);

              if (!state.eat(0x29)) {
                state.raise("Unterminated group");
              }

              state.lastAssertionIsQuantifiable = !lookbehind;
              return true;
            }
          }

          state.pos = start;
          return false;
        };

        pp$8.regexp_eatQuantifier = function (state, noError) {
          if (noError === void 0) noError = false;

          if (this.regexp_eatQuantifierPrefix(state, noError)) {
            state.eat(0x3F);
            return true;
          }

          return false;
        };

        pp$8.regexp_eatQuantifierPrefix = function (state, noError) {
          return state.eat(0x2A) || state.eat(0x2B) || state.eat(0x3F) || this.regexp_eatBracedQuantifier(state, noError);
        };

        pp$8.regexp_eatBracedQuantifier = function (state, noError) {
          var start = state.pos;

          if (state.eat(0x7B)) {
            var min = 0,
                max = -1;

            if (this.regexp_eatDecimalDigits(state)) {
              min = state.lastIntValue;

              if (state.eat(0x2C) && this.regexp_eatDecimalDigits(state)) {
                max = state.lastIntValue;
              }

              if (state.eat(0x7D)) {
                if (max !== -1 && max < min && !noError) {
                  state.raise("numbers out of order in {} quantifier");
                }

                return true;
              }
            }

            if (state.switchU && !noError) {
              state.raise("Incomplete quantifier");
            }

            state.pos = start;
          }

          return false;
        };

        pp$8.regexp_eatAtom = function (state) {
          return this.regexp_eatPatternCharacters(state) || state.eat(0x2E) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
        };

        pp$8.regexp_eatReverseSolidusAtomEscape = function (state) {
          var start = state.pos;

          if (state.eat(0x5C)) {
            if (this.regexp_eatAtomEscape(state)) {
              return true;
            }

            state.pos = start;
          }

          return false;
        };

        pp$8.regexp_eatUncapturingGroup = function (state) {
          var start = state.pos;

          if (state.eat(0x28)) {
            if (state.eat(0x3F) && state.eat(0x3A)) {
              this.regexp_disjunction(state);

              if (state.eat(0x29)) {
                return true;
              }

              state.raise("Unterminated group");
            }

            state.pos = start;
          }

          return false;
        };

        pp$8.regexp_eatCapturingGroup = function (state) {
          if (state.eat(0x28)) {
            if (this.options.ecmaVersion >= 9) {
              this.regexp_groupSpecifier(state);
            } else if (state.current() === 0x3F) {
              state.raise("Invalid group");
            }

            this.regexp_disjunction(state);

            if (state.eat(0x29)) {
              state.numCapturingParens += 1;
              return true;
            }

            state.raise("Unterminated group");
          }

          return false;
        };

        pp$8.regexp_eatExtendedAtom = function (state) {
          return state.eat(0x2E) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
        };

        pp$8.regexp_eatInvalidBracedQuantifier = function (state) {
          if (this.regexp_eatBracedQuantifier(state, true)) {
            state.raise("Nothing to repeat");
          }

          return false;
        };

        pp$8.regexp_eatSyntaxCharacter = function (state) {
          var ch = state.current();

          if (isSyntaxCharacter(ch)) {
            state.lastIntValue = ch;
            state.advance();
            return true;
          }

          return false;
        };

        function isSyntaxCharacter(ch) {
          return ch === 0x24 || ch >= 0x28 && ch <= 0x2B || ch === 0x2E || ch === 0x3F || ch >= 0x5B && ch <= 0x5E || ch >= 0x7B && ch <= 0x7D;
        }

        pp$8.regexp_eatPatternCharacters = function (state) {
          var start = state.pos;
          var ch = 0;

          while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {
            state.advance();
          }

          return state.pos !== start;
        };

        pp$8.regexp_eatExtendedPatternCharacter = function (state) {
          var ch = state.current();

          if (ch !== -1 && ch !== 0x24 && !(ch >= 0x28 && ch <= 0x2B) && ch !== 0x2E && ch !== 0x3F && ch !== 0x5B && ch !== 0x5E && ch !== 0x7C) {
            state.advance();
            return true;
          }

          return false;
        };

        pp$8.regexp_groupSpecifier = function (state) {
          if (state.eat(0x3F)) {
            if (this.regexp_eatGroupName(state)) {
              if (state.groupNames.indexOf(state.lastStringValue) !== -1) {
                state.raise("Duplicate capture group name");
              }

              state.groupNames.push(state.lastStringValue);
              return;
            }

            state.raise("Invalid group");
          }
        };

        pp$8.regexp_eatGroupName = function (state) {
          state.lastStringValue = "";

          if (state.eat(0x3C)) {
            if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E)) {
              return true;
            }

            state.raise("Invalid capture group name");
          }

          return false;
        };

        pp$8.regexp_eatRegExpIdentifierName = function (state) {
          state.lastStringValue = "";

          if (this.regexp_eatRegExpIdentifierStart(state)) {
            state.lastStringValue += codePointToString(state.lastIntValue);

            while (this.regexp_eatRegExpIdentifierPart(state)) {
              state.lastStringValue += codePointToString(state.lastIntValue);
            }

            return true;
          }

          return false;
        };

        pp$8.regexp_eatRegExpIdentifierStart = function (state) {
          var start = state.pos;
          var ch = state.current();
          state.advance();

          if (ch === 0x5C && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {
            ch = state.lastIntValue;
          }

          if (isRegExpIdentifierStart(ch)) {
            state.lastIntValue = ch;
            return true;
          }

          state.pos = start;
          return false;
        };

        function isRegExpIdentifierStart(ch) {
          return isIdentifierStart(ch, true) || ch === 0x24 || ch === 0x5F;
        }

        pp$8.regexp_eatRegExpIdentifierPart = function (state) {
          var start = state.pos;
          var ch = state.current();
          state.advance();

          if (ch === 0x5C && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {
            ch = state.lastIntValue;
          }

          if (isRegExpIdentifierPart(ch)) {
            state.lastIntValue = ch;
            return true;
          }

          state.pos = start;
          return false;
        };

        function isRegExpIdentifierPart(ch) {
          return isIdentifierChar(ch, true) || ch === 0x24 || ch === 0x5F || ch === 0x200C || ch === 0x200D;
        }

        pp$8.regexp_eatAtomEscape = function (state) {
          if (this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) {
            return true;
          }

          if (state.switchU) {
            if (state.current() === 0x63) {
              state.raise("Invalid unicode escape");
            }

            state.raise("Invalid escape");
          }

          return false;
        };

        pp$8.regexp_eatBackReference = function (state) {
          var start = state.pos;

          if (this.regexp_eatDecimalEscape(state)) {
            var n = state.lastIntValue;

            if (state.switchU) {
              if (n > state.maxBackReference) {
                state.maxBackReference = n;
              }

              return true;
            }

            if (n <= state.numCapturingParens) {
              return true;
            }

            state.pos = start;
          }

          return false;
        };

        pp$8.regexp_eatKGroupName = function (state) {
          if (state.eat(0x6B)) {
            if (this.regexp_eatGroupName(state)) {
              state.backReferenceNames.push(state.lastStringValue);
              return true;
            }

            state.raise("Invalid named reference");
          }

          return false;
        };

        pp$8.regexp_eatCharacterEscape = function (state) {
          return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
        };

        pp$8.regexp_eatCControlLetter = function (state) {
          var start = state.pos;

          if (state.eat(0x63)) {
            if (this.regexp_eatControlLetter(state)) {
              return true;
            }

            state.pos = start;
          }

          return false;
        };

        pp$8.regexp_eatZero = function (state) {
          if (state.current() === 0x30 && !isDecimalDigit(state.lookahead())) {
            state.lastIntValue = 0;
            state.advance();
            return true;
          }

          return false;
        };

        pp$8.regexp_eatControlEscape = function (state) {
          var ch = state.current();

          if (ch === 0x74) {
            state.lastIntValue = 0x09;
            state.advance();
            return true;
          }

          if (ch === 0x6E) {
            state.lastIntValue = 0x0A;
            state.advance();
            return true;
          }

          if (ch === 0x76) {
            state.lastIntValue = 0x0B;
            state.advance();
            return true;
          }

          if (ch === 0x66) {
            state.lastIntValue = 0x0C;
            state.advance();
            return true;
          }

          if (ch === 0x72) {
            state.lastIntValue = 0x0D;
            state.advance();
            return true;
          }

          return false;
        };

        pp$8.regexp_eatControlLetter = function (state) {
          var ch = state.current();

          if (isControlLetter(ch)) {
            state.lastIntValue = ch % 0x20;
            state.advance();
            return true;
          }

          return false;
        };

        function isControlLetter(ch) {
          return ch >= 0x41 && ch <= 0x5A || ch >= 0x61 && ch <= 0x7A;
        }

        pp$8.regexp_eatRegExpUnicodeEscapeSequence = function (state) {
          var start = state.pos;

          if (state.eat(0x75)) {
            if (this.regexp_eatFixedHexDigits(state, 4)) {
              var lead = state.lastIntValue;

              if (state.switchU && lead >= 0xD800 && lead <= 0xDBFF) {
                var leadSurrogateEnd = state.pos;

                if (state.eat(0x5C) && state.eat(0x75) && this.regexp_eatFixedHexDigits(state, 4)) {
                  var trail = state.lastIntValue;

                  if (trail >= 0xDC00 && trail <= 0xDFFF) {
                    state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
                    return true;
                  }
                }

                state.pos = leadSurrogateEnd;
                state.lastIntValue = lead;
              }

              return true;
            }

            if (state.switchU && state.eat(0x7B) && this.regexp_eatHexDigits(state) && state.eat(0x7D) && isValidUnicode(state.lastIntValue)) {
              return true;
            }

            if (state.switchU) {
              state.raise("Invalid unicode escape");
            }

            state.pos = start;
          }

          return false;
        };

        function isValidUnicode(ch) {
          return ch >= 0 && ch <= 0x10FFFF;
        }

        pp$8.regexp_eatIdentityEscape = function (state) {
          if (state.switchU) {
            if (this.regexp_eatSyntaxCharacter(state)) {
              return true;
            }

            if (state.eat(0x2F)) {
              state.lastIntValue = 0x2F;
              return true;
            }

            return false;
          }

          var ch = state.current();

          if (ch !== 0x63 && (!state.switchN || ch !== 0x6B)) {
            state.lastIntValue = ch;
            state.advance();
            return true;
          }

          return false;
        };

        pp$8.regexp_eatDecimalEscape = function (state) {
          state.lastIntValue = 0;
          var ch = state.current();

          if (ch >= 0x31 && ch <= 0x39) {
            do {
              state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30);
              state.advance();
            } while ((ch = state.current()) >= 0x30 && ch <= 0x39);

            return true;
          }

          return false;
        };

        pp$8.regexp_eatCharacterClassEscape = function (state) {
          var ch = state.current();

          if (isCharacterClassEscape(ch)) {
            state.lastIntValue = -1;
            state.advance();
            return true;
          }

          if (state.switchU && this.options.ecmaVersion >= 9 && (ch === 0x50 || ch === 0x70)) {
            state.lastIntValue = -1;
            state.advance();

            if (state.eat(0x7B) && this.regexp_eatUnicodePropertyValueExpression(state) && state.eat(0x7D)) {
              return true;
            }

            state.raise("Invalid property name");
          }

          return false;
        };

        function isCharacterClassEscape(ch) {
          return ch === 0x64 || ch === 0x44 || ch === 0x73 || ch === 0x53 || ch === 0x77 || ch === 0x57;
        }

        pp$8.regexp_eatUnicodePropertyValueExpression = function (state) {
          var start = state.pos;

          if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D)) {
            var name = state.lastStringValue;

            if (this.regexp_eatUnicodePropertyValue(state)) {
              var value = state.lastStringValue;
              this.regexp_validateUnicodePropertyNameAndValue(state, name, value);
              return true;
            }
          }

          state.pos = start;

          if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
            var nameOrValue = state.lastStringValue;
            this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
            return true;
          }

          return false;
        };

        pp$8.regexp_validateUnicodePropertyNameAndValue = function (state, name, value) {
          if (!has(state.unicodeProperties.nonBinary, name)) {
            state.raise("Invalid property name");
          }

          if (!state.unicodeProperties.nonBinary[name].test(value)) {
            state.raise("Invalid property value");
          }
        };

        pp$8.regexp_validateUnicodePropertyNameOrValue = function (state, nameOrValue) {
          if (!state.unicodeProperties.binary.test(nameOrValue)) {
            state.raise("Invalid property name");
          }
        };

        pp$8.regexp_eatUnicodePropertyName = function (state) {
          var ch = 0;
          state.lastStringValue = "";

          while (isUnicodePropertyNameCharacter(ch = state.current())) {
            state.lastStringValue += codePointToString(ch);
            state.advance();
          }

          return state.lastStringValue !== "";
        };

        function isUnicodePropertyNameCharacter(ch) {
          return isControlLetter(ch) || ch === 0x5F;
        }

        pp$8.regexp_eatUnicodePropertyValue = function (state) {
          var ch = 0;
          state.lastStringValue = "";

          while (isUnicodePropertyValueCharacter(ch = state.current())) {
            state.lastStringValue += codePointToString(ch);
            state.advance();
          }

          return state.lastStringValue !== "";
        };

        function isUnicodePropertyValueCharacter(ch) {
          return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);
        }

        pp$8.regexp_eatLoneUnicodePropertyNameOrValue = function (state) {
          return this.regexp_eatUnicodePropertyValue(state);
        };

        pp$8.regexp_eatCharacterClass = function (state) {
          if (state.eat(0x5B)) {
            state.eat(0x5E);
            this.regexp_classRanges(state);

            if (state.eat(0x5D)) {
              return true;
            }

            state.raise("Unterminated character class");
          }

          return false;
        };

        pp$8.regexp_classRanges = function (state) {
          while (this.regexp_eatClassAtom(state)) {
            var left = state.lastIntValue;

            if (state.eat(0x2D) && this.regexp_eatClassAtom(state)) {
              var right = state.lastIntValue;

              if (state.switchU && (left === -1 || right === -1)) {
                state.raise("Invalid character class");
              }

              if (left !== -1 && right !== -1 && left > right) {
                state.raise("Range out of order in character class");
              }
            }
          }
        };

        pp$8.regexp_eatClassAtom = function (state) {
          var start = state.pos;

          if (state.eat(0x5C)) {
            if (this.regexp_eatClassEscape(state)) {
              return true;
            }

            if (state.switchU) {
              var ch$1 = state.current();

              if (ch$1 === 0x63 || isOctalDigit(ch$1)) {
                state.raise("Invalid class escape");
              }

              state.raise("Invalid escape");
            }

            state.pos = start;
          }

          var ch = state.current();

          if (ch !== 0x5D) {
            state.lastIntValue = ch;
            state.advance();
            return true;
          }

          return false;
        };

        pp$8.regexp_eatClassEscape = function (state) {
          var start = state.pos;

          if (state.eat(0x62)) {
            state.lastIntValue = 0x08;
            return true;
          }

          if (state.switchU && state.eat(0x2D)) {
            state.lastIntValue = 0x2D;
            return true;
          }

          if (!state.switchU && state.eat(0x63)) {
            if (this.regexp_eatClassControlLetter(state)) {
              return true;
            }

            state.pos = start;
          }

          return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
        };

        pp$8.regexp_eatClassControlLetter = function (state) {
          var ch = state.current();

          if (isDecimalDigit(ch) || ch === 0x5F) {
            state.lastIntValue = ch % 0x20;
            state.advance();
            return true;
          }

          return false;
        };

        pp$8.regexp_eatHexEscapeSequence = function (state) {
          var start = state.pos;

          if (state.eat(0x78)) {
            if (this.regexp_eatFixedHexDigits(state, 2)) {
              return true;
            }

            if (state.switchU) {
              state.raise("Invalid escape");
            }

            state.pos = start;
          }

          return false;
        };

        pp$8.regexp_eatDecimalDigits = function (state) {
          var start = state.pos;
          var ch = 0;
          state.lastIntValue = 0;

          while (isDecimalDigit(ch = state.current())) {
            state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30);
            state.advance();
          }

          return state.pos !== start;
        };

        function isDecimalDigit(ch) {
          return ch >= 0x30 && ch <= 0x39;
        }

        pp$8.regexp_eatHexDigits = function (state) {
          var start = state.pos;
          var ch = 0;
          state.lastIntValue = 0;

          while (isHexDigit(ch = state.current())) {
            state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
            state.advance();
          }

          return state.pos !== start;
        };

        function isHexDigit(ch) {
          return ch >= 0x30 && ch <= 0x39 || ch >= 0x41 && ch <= 0x46 || ch >= 0x61 && ch <= 0x66;
        }

        function hexToInt(ch) {
          if (ch >= 0x41 && ch <= 0x46) {
            return 10 + (ch - 0x41);
          }

          if (ch >= 0x61 && ch <= 0x66) {
            return 10 + (ch - 0x61);
          }

          return ch - 0x30;
        }

        pp$8.regexp_eatLegacyOctalEscapeSequence = function (state) {
          if (this.regexp_eatOctalDigit(state)) {
            var n1 = state.lastIntValue;

            if (this.regexp_eatOctalDigit(state)) {
              var n2 = state.lastIntValue;

              if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {
                state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;
              } else {
                state.lastIntValue = n1 * 8 + n2;
              }
            } else {
              state.lastIntValue = n1;
            }

            return true;
          }

          return false;
        };

        pp$8.regexp_eatOctalDigit = function (state) {
          var ch = state.current();

          if (isOctalDigit(ch)) {
            state.lastIntValue = ch - 0x30;
            state.advance();
            return true;
          }

          state.lastIntValue = 0;
          return false;
        };

        function isOctalDigit(ch) {
          return ch >= 0x30 && ch <= 0x37;
        }

        pp$8.regexp_eatFixedHexDigits = function (state, length) {
          var start = state.pos;
          state.lastIntValue = 0;

          for (var i = 0; i < length; ++i) {
            var ch = state.current();

            if (!isHexDigit(ch)) {
              state.pos = start;
              return false;
            }

            state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
            state.advance();
          }

          return true;
        };

        var Token = function Token(p) {
          this.type = p.type;
          this.value = p.value;
          this.start = p.start;
          this.end = p.end;

          if (p.options.locations) {
            this.loc = new SourceLocation(p, p.startLoc, p.endLoc);
          }

          if (p.options.ranges) {
            this.range = [p.start, p.end];
          }
        };

        var pp$9 = Parser.prototype;

        pp$9.next = function () {
          if (this.options.onToken) {
            this.options.onToken(new Token(this));
          }

          this.lastTokEnd = this.end;
          this.lastTokStart = this.start;
          this.lastTokEndLoc = this.endLoc;
          this.lastTokStartLoc = this.startLoc;
          this.nextToken();
        };

        pp$9.getToken = function () {
          this.next();
          return new Token(this);
        };

        if (typeof Symbol !== "undefined") {
          pp$9[Symbol.iterator] = function () {
            var this$1 = this;
            return {
              next: function next() {
                var token = this$1.getToken();
                return {
                  done: token.type === types.eof,
                  value: token
                };
              }
            };
          };
        }

        pp$9.curContext = function () {
          return this.context[this.context.length - 1];
        };

        pp$9.nextToken = function () {
          var curContext = this.curContext();

          if (!curContext || !curContext.preserveSpace) {
            this.skipSpace();
          }

          this.start = this.pos;

          if (this.options.locations) {
            this.startLoc = this.curPosition();
          }

          if (this.pos >= this.input.length) {
            return this.finishToken(types.eof);
          }

          if (curContext.override) {
            return curContext.override(this);
          } else {
            this.readToken(this.fullCharCodeAtPos());
          }
        };

        pp$9.readToken = function (code) {
          if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92) {
            return this.readWord();
          }

          return this.getTokenFromCode(code);
        };

        pp$9.fullCharCodeAtPos = function () {
          var code = this.input.charCodeAt(this.pos);

          if (code <= 0xd7ff || code >= 0xe000) {
            return code;
          }

          var next = this.input.charCodeAt(this.pos + 1);
          return (code << 10) + next - 0x35fdc00;
        };

        pp$9.skipBlockComment = function () {
          var startLoc = this.options.onComment && this.curPosition();
          var start = this.pos,
              end = this.input.indexOf("*/", this.pos += 2);

          if (end === -1) {
            this.raise(this.pos - 2, "Unterminated comment");
          }

          this.pos = end + 2;

          if (this.options.locations) {
            lineBreakG.lastIndex = start;
            var match;

            while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {
              ++this.curLine;
              this.lineStart = match.index + match[0].length;
            }
          }

          if (this.options.onComment) {
            this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());
          }
        };

        pp$9.skipLineComment = function (startSkip) {
          var start = this.pos;
          var startLoc = this.options.onComment && this.curPosition();
          var ch = this.input.charCodeAt(this.pos += startSkip);

          while (this.pos < this.input.length && !isNewLine(ch)) {
            ch = this.input.charCodeAt(++this.pos);
          }

          if (this.options.onComment) {
            this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());
          }
        };

        pp$9.skipSpace = function () {
          loop: while (this.pos < this.input.length) {
            var ch = this.input.charCodeAt(this.pos);

            switch (ch) {
              case 32:
              case 160:
                ++this.pos;
                break;

              case 13:
                if (this.input.charCodeAt(this.pos + 1) === 10) {
                  ++this.pos;
                }

              case 10:
              case 8232:
              case 8233:
                ++this.pos;

                if (this.options.locations) {
                  ++this.curLine;
                  this.lineStart = this.pos;
                }

                break;

              case 47:
                switch (this.input.charCodeAt(this.pos + 1)) {
                  case 42:
                    this.skipBlockComment();
                    break;

                  case 47:
                    this.skipLineComment(2);
                    break;

                  default:
                    break loop;
                }

                break;

              default:
                if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
                  ++this.pos;
                } else {
                  break loop;
                }

            }
          }
        };

        pp$9.finishToken = function (type, val) {
          this.end = this.pos;

          if (this.options.locations) {
            this.endLoc = this.curPosition();
          }

          var prevType = this.type;
          this.type = type;
          this.value = val;
          this.updateContext(prevType);
        };

        pp$9.readToken_dot = function () {
          var next = this.input.charCodeAt(this.pos + 1);

          if (next >= 48 && next <= 57) {
            return this.readNumber(true);
          }

          var next2 = this.input.charCodeAt(this.pos + 2);

          if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {
            this.pos += 3;
            return this.finishToken(types.ellipsis);
          } else {
            ++this.pos;
            return this.finishToken(types.dot);
          }
        };

        pp$9.readToken_slash = function () {
          var next = this.input.charCodeAt(this.pos + 1);

          if (this.exprAllowed) {
            ++this.pos;
            return this.readRegexp();
          }

          if (next === 61) {
            return this.finishOp(types.assign, 2);
          }

          return this.finishOp(types.slash, 1);
        };

        pp$9.readToken_mult_modulo_exp = function (code) {
          var next = this.input.charCodeAt(this.pos + 1);
          var size = 1;
          var tokentype = code === 42 ? types.star : types.modulo;

          if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {
            ++size;
            tokentype = types.starstar;
            next = this.input.charCodeAt(this.pos + 2);
          }

          if (next === 61) {
            return this.finishOp(types.assign, size + 1);
          }

          return this.finishOp(tokentype, size);
        };

        pp$9.readToken_pipe_amp = function (code) {
          var next = this.input.charCodeAt(this.pos + 1);

          if (next === code) {
            return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);
          }

          if (next === 61) {
            return this.finishOp(types.assign, 2);
          }

          return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);
        };

        pp$9.readToken_caret = function () {
          var next = this.input.charCodeAt(this.pos + 1);

          if (next === 61) {
            return this.finishOp(types.assign, 2);
          }

          return this.finishOp(types.bitwiseXOR, 1);
        };

        pp$9.readToken_plus_min = function (code) {
          var next = this.input.charCodeAt(this.pos + 1);

          if (next === code) {
            if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {
              this.skipLineComment(3);
              this.skipSpace();
              return this.nextToken();
            }

            return this.finishOp(types.incDec, 2);
          }

          if (next === 61) {
            return this.finishOp(types.assign, 2);
          }

          return this.finishOp(types.plusMin, 1);
        };

        pp$9.readToken_lt_gt = function (code) {
          var next = this.input.charCodeAt(this.pos + 1);
          var size = 1;

          if (next === code) {
            size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;

            if (this.input.charCodeAt(this.pos + size) === 61) {
              return this.finishOp(types.assign, size + 1);
            }

            return this.finishOp(types.bitShift, size);
          }

          if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45) {
            this.skipLineComment(4);
            this.skipSpace();
            return this.nextToken();
          }

          if (next === 61) {
            size = 2;
          }

          return this.finishOp(types.relational, size);
        };

        pp$9.readToken_eq_excl = function (code) {
          var next = this.input.charCodeAt(this.pos + 1);

          if (next === 61) {
            return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);
          }

          if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {
            this.pos += 2;
            return this.finishToken(types.arrow);
          }

          return this.finishOp(code === 61 ? types.eq : types.prefix, 1);
        };

        pp$9.getTokenFromCode = function (code) {
          switch (code) {
            case 46:
              return this.readToken_dot();

            case 40:
              ++this.pos;
              return this.finishToken(types.parenL);

            case 41:
              ++this.pos;
              return this.finishToken(types.parenR);

            case 59:
              ++this.pos;
              return this.finishToken(types.semi);

            case 44:
              ++this.pos;
              return this.finishToken(types.comma);

            case 91:
              ++this.pos;
              return this.finishToken(types.bracketL);

            case 93:
              ++this.pos;
              return this.finishToken(types.bracketR);

            case 123:
              ++this.pos;
              return this.finishToken(types.braceL);

            case 125:
              ++this.pos;
              return this.finishToken(types.braceR);

            case 58:
              ++this.pos;
              return this.finishToken(types.colon);

            case 63:
              ++this.pos;
              return this.finishToken(types.question);

            case 96:
              if (this.options.ecmaVersion < 6) {
                break;
              }

              ++this.pos;
              return this.finishToken(types.backQuote);

            case 48:
              var next = this.input.charCodeAt(this.pos + 1);

              if (next === 120 || next === 88) {
                return this.readRadixNumber(16);
              }

              if (this.options.ecmaVersion >= 6) {
                if (next === 111 || next === 79) {
                  return this.readRadixNumber(8);
                }

                if (next === 98 || next === 66) {
                  return this.readRadixNumber(2);
                }
              }

            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
              return this.readNumber(false);

            case 34:
            case 39:
              return this.readString(code);

            case 47:
              return this.readToken_slash();

            case 37:
            case 42:
              return this.readToken_mult_modulo_exp(code);

            case 124:
            case 38:
              return this.readToken_pipe_amp(code);

            case 94:
              return this.readToken_caret();

            case 43:
            case 45:
              return this.readToken_plus_min(code);

            case 60:
            case 62:
              return this.readToken_lt_gt(code);

            case 61:
            case 33:
              return this.readToken_eq_excl(code);

            case 126:
              return this.finishOp(types.prefix, 1);
          }

          this.raise(this.pos, "Unexpected character '" + codePointToString$1(code) + "'");
        };

        pp$9.finishOp = function (type, size) {
          var str = this.input.slice(this.pos, this.pos + size);
          this.pos += size;
          return this.finishToken(type, str);
        };

        pp$9.readRegexp = function () {
          var escaped,
              inClass,
              start = this.pos;

          for (;;) {
            if (this.pos >= this.input.length) {
              this.raise(start, "Unterminated regular expression");
            }

            var ch = this.input.charAt(this.pos);

            if (lineBreak.test(ch)) {
              this.raise(start, "Unterminated regular expression");
            }

            if (!escaped) {
              if (ch === "[") {
                inClass = true;
              } else if (ch === "]" && inClass) {
                inClass = false;
              } else if (ch === "/" && !inClass) {
                break;
              }

              escaped = ch === "\\";
            } else {
              escaped = false;
            }

            ++this.pos;
          }

          var pattern = this.input.slice(start, this.pos);
          ++this.pos;
          var flagsStart = this.pos;
          var flags = this.readWord1();

          if (this.containsEsc) {
            this.unexpected(flagsStart);
          }

          var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
          state.reset(start, pattern, flags);
          this.validateRegExpFlags(state);
          this.validateRegExpPattern(state);
          var value = null;

          try {
            value = new RegExp(pattern, flags);
          } catch (e) {}

          return this.finishToken(types.regexp, {
            pattern: pattern,
            flags: flags,
            value: value
          });
        };

        pp$9.readInt = function (radix, len) {
          var start = this.pos,
              total = 0;

          for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
            var code = this.input.charCodeAt(this.pos),
                val = void 0;

            if (code >= 97) {
              val = code - 97 + 10;
            } else if (code >= 65) {
              val = code - 65 + 10;
            } else if (code >= 48 && code <= 57) {
              val = code - 48;
            } else {
              val = Infinity;
            }

            if (val >= radix) {
              break;
            }

            ++this.pos;
            total = total * radix + val;
          }

          if (this.pos === start || len != null && this.pos - start !== len) {
            return null;
          }

          return total;
        };

        pp$9.readRadixNumber = function (radix) {
          var start = this.pos;
          this.pos += 2;
          var val = this.readInt(radix);

          if (val == null) {
            this.raise(this.start + 2, "Expected number in radix " + radix);
          }

          if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {
            val = typeof BigInt !== "undefined" ? BigInt(this.input.slice(start, this.pos)) : null;
            ++this.pos;
          } else if (isIdentifierStart(this.fullCharCodeAtPos())) {
            this.raise(this.pos, "Identifier directly after number");
          }

          return this.finishToken(types.num, val);
        };

        pp$9.readNumber = function (startsWithDot) {
          var start = this.pos;

          if (!startsWithDot && this.readInt(10) === null) {
            this.raise(start, "Invalid number");
          }

          var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;

          if (octal && this.strict) {
            this.raise(start, "Invalid number");
          }

          if (octal && /[89]/.test(this.input.slice(start, this.pos))) {
            octal = false;
          }

          var next = this.input.charCodeAt(this.pos);

          if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {
            var str$1 = this.input.slice(start, this.pos);
            var val$1 = typeof BigInt !== "undefined" ? BigInt(str$1) : null;
            ++this.pos;

            if (isIdentifierStart(this.fullCharCodeAtPos())) {
              this.raise(this.pos, "Identifier directly after number");
            }

            return this.finishToken(types.num, val$1);
          }

          if (next === 46 && !octal) {
            ++this.pos;
            this.readInt(10);
            next = this.input.charCodeAt(this.pos);
          }

          if ((next === 69 || next === 101) && !octal) {
            next = this.input.charCodeAt(++this.pos);

            if (next === 43 || next === 45) {
              ++this.pos;
            }

            if (this.readInt(10) === null) {
              this.raise(start, "Invalid number");
            }
          }

          if (isIdentifierStart(this.fullCharCodeAtPos())) {
            this.raise(this.pos, "Identifier directly after number");
          }

          var str = this.input.slice(start, this.pos);
          var val = octal ? parseInt(str, 8) : parseFloat(str);
          return this.finishToken(types.num, val);
        };

        pp$9.readCodePoint = function () {
          var ch = this.input.charCodeAt(this.pos),
              code;

          if (ch === 123) {
            if (this.options.ecmaVersion < 6) {
              this.unexpected();
            }

            var codePos = ++this.pos;
            code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
            ++this.pos;

            if (code > 0x10FFFF) {
              this.invalidStringToken(codePos, "Code point out of bounds");
            }
          } else {
            code = this.readHexChar(4);
          }

          return code;
        };

        function codePointToString$1(code) {
          if (code <= 0xFFFF) {
            return String.fromCharCode(code);
          }

          code -= 0x10000;
          return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00);
        }

        pp$9.readString = function (quote) {
          var out = "",
              chunkStart = ++this.pos;

          for (;;) {
            if (this.pos >= this.input.length) {
              this.raise(this.start, "Unterminated string constant");
            }

            var ch = this.input.charCodeAt(this.pos);

            if (ch === quote) {
              break;
            }

            if (ch === 92) {
              out += this.input.slice(chunkStart, this.pos);
              out += this.readEscapedChar(false);
              chunkStart = this.pos;
            } else {
              if (isNewLine(ch, this.options.ecmaVersion >= 10)) {
                this.raise(this.start, "Unterminated string constant");
              }

              ++this.pos;
            }
          }

          out += this.input.slice(chunkStart, this.pos++);
          return this.finishToken(types.string, out);
        };

        var INVALID_TEMPLATE_ESCAPE_ERROR = {};

        pp$9.tryReadTemplateToken = function () {
          this.inTemplateElement = true;

          try {
            this.readTmplToken();
          } catch (err) {
            if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
              this.readInvalidTemplateToken();
            } else {
              throw err;
            }
          }

          this.inTemplateElement = false;
        };

        pp$9.invalidStringToken = function (position, message) {
          if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
            throw INVALID_TEMPLATE_ESCAPE_ERROR;
          } else {
            this.raise(position, message);
          }
        };

        pp$9.readTmplToken = function () {
          var out = "",
              chunkStart = this.pos;

          for (;;) {
            if (this.pos >= this.input.length) {
              this.raise(this.start, "Unterminated template");
            }

            var ch = this.input.charCodeAt(this.pos);

            if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {
              if (this.pos === this.start && (this.type === types.template || this.type === types.invalidTemplate)) {
                if (ch === 36) {
                  this.pos += 2;
                  return this.finishToken(types.dollarBraceL);
                } else {
                  ++this.pos;
                  return this.finishToken(types.backQuote);
                }
              }

              out += this.input.slice(chunkStart, this.pos);
              return this.finishToken(types.template, out);
            }

            if (ch === 92) {
              out += this.input.slice(chunkStart, this.pos);
              out += this.readEscapedChar(true);
              chunkStart = this.pos;
            } else if (isNewLine(ch)) {
              out += this.input.slice(chunkStart, this.pos);
              ++this.pos;

              switch (ch) {
                case 13:
                  if (this.input.charCodeAt(this.pos) === 10) {
                    ++this.pos;
                  }

                case 10:
                  out += "\n";
                  break;

                default:
                  out += String.fromCharCode(ch);
                  break;
              }

              if (this.options.locations) {
                ++this.curLine;
                this.lineStart = this.pos;
              }

              chunkStart = this.pos;
            } else {
              ++this.pos;
            }
          }
        };

        pp$9.readInvalidTemplateToken = function () {
          for (; this.pos < this.input.length; this.pos++) {
            switch (this.input[this.pos]) {
              case "\\":
                ++this.pos;
                break;

              case "$":
                if (this.input[this.pos + 1] !== "{") {
                  break;
                }

              case "`":
                return this.finishToken(types.invalidTemplate, this.input.slice(this.start, this.pos));
            }
          }

          this.raise(this.start, "Unterminated template");
        };

        pp$9.readEscapedChar = function (inTemplate) {
          var ch = this.input.charCodeAt(++this.pos);
          ++this.pos;

          switch (ch) {
            case 110:
              return "\n";

            case 114:
              return "\r";

            case 120:
              return String.fromCharCode(this.readHexChar(2));

            case 117:
              return codePointToString$1(this.readCodePoint());

            case 116:
              return "\t";

            case 98:
              return "\b";

            case 118:
              return "\x0B";

            case 102:
              return "\f";

            case 13:
              if (this.input.charCodeAt(this.pos) === 10) {
                ++this.pos;
              }

            case 10:
              if (this.options.locations) {
                this.lineStart = this.pos;
                ++this.curLine;
              }

              return "";

            default:
              if (ch >= 48 && ch <= 55) {
                var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
                var octal = parseInt(octalStr, 8);

                if (octal > 255) {
                  octalStr = octalStr.slice(0, -1);
                  octal = parseInt(octalStr, 8);
                }

                this.pos += octalStr.length - 1;
                ch = this.input.charCodeAt(this.pos);

                if ((octalStr !== "0" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {
                  this.invalidStringToken(this.pos - 1 - octalStr.length, inTemplate ? "Octal literal in template string" : "Octal literal in strict mode");
                }

                return String.fromCharCode(octal);
              }

              if (isNewLine(ch)) {
                return "";
              }

              return String.fromCharCode(ch);
          }
        };

        pp$9.readHexChar = function (len) {
          var codePos = this.pos;
          var n = this.readInt(16, len);

          if (n === null) {
            this.invalidStringToken(codePos, "Bad character escape sequence");
          }

          return n;
        };

        pp$9.readWord1 = function () {
          this.containsEsc = false;
          var word = "",
              first = true,
              chunkStart = this.pos;
          var astral = this.options.ecmaVersion >= 6;

          while (this.pos < this.input.length) {
            var ch = this.fullCharCodeAtPos();

            if (isIdentifierChar(ch, astral)) {
              this.pos += ch <= 0xffff ? 1 : 2;
            } else if (ch === 92) {
              this.containsEsc = true;
              word += this.input.slice(chunkStart, this.pos);
              var escStart = this.pos;

              if (this.input.charCodeAt(++this.pos) !== 117) {
                this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX");
              }

              ++this.pos;
              var esc = this.readCodePoint();

              if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral)) {
                this.invalidStringToken(escStart, "Invalid Unicode escape");
              }

              word += codePointToString$1(esc);
              chunkStart = this.pos;
            } else {
              break;
            }

            first = false;
          }

          return word + this.input.slice(chunkStart, this.pos);
        };

        pp$9.readWord = function () {
          var word = this.readWord1();
          var type = types.name;

          if (this.keywords.test(word)) {
            if (this.containsEsc) {
              this.raiseRecoverable(this.start, "Escape sequence in keyword " + word);
            }

            type = keywords$1[word];
          }

          return this.finishToken(type, word);
        };

        var version = "7.1.0";
        Parser.acorn = {
          Parser: Parser,
          version: version,
          defaultOptions: defaultOptions,
          Position: Position,
          SourceLocation: SourceLocation,
          getLineInfo: getLineInfo,
          Node: Node,
          TokenType: TokenType,
          tokTypes: types,
          keywordTypes: keywords$1,
          TokContext: TokContext,
          tokContexts: types$1,
          isIdentifierChar: isIdentifierChar,
          isIdentifierStart: isIdentifierStart,
          Token: Token,
          isNewLine: isNewLine,
          lineBreak: lineBreak,
          lineBreakG: lineBreakG,
          nonASCIIwhitespace: nonASCIIwhitespace
        };

        function parse(input, options) {
          return Parser.parse(input, options);
        }

        function parseExpressionAt(input, pos, options) {
          return Parser.parseExpressionAt(input, pos, options);
        }

        function tokenizer(input, options) {
          return Parser.tokenizer(input, options);
        }

        exports.Node = Node;
        exports.Parser = Parser;
        exports.Position = Position;
        exports.SourceLocation = SourceLocation;
        exports.TokContext = TokContext;
        exports.Token = Token;
        exports.TokenType = TokenType;
        exports.defaultOptions = defaultOptions;
        exports.getLineInfo = getLineInfo;
        exports.isIdentifierChar = isIdentifierChar;
        exports.isIdentifierStart = isIdentifierStart;
        exports.isNewLine = isNewLine;
        exports.keywordTypes = keywords$1;
        exports.lineBreak = lineBreak;
        exports.lineBreakG = lineBreakG;
        exports.nonASCIIwhitespace = nonASCIIwhitespace;
        exports.parse = parse;
        exports.parseExpressionAt = parseExpressionAt;
        exports.tokContexts = types$1;
        exports.tokTypes = types;
        exports.tokenizer = tokenizer;
        exports.version = version;
        Object.defineProperty(exports, '__esModule', {
          value: true
        });
      });
    }, {}],
    2: [function (require, module, exports) {}, {}],
    3: [function (require, module, exports) {
      function glWiretap(gl) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var _options$contextName = options.contextName,
            contextName = _options$contextName === void 0 ? 'gl' : _options$contextName,
            throwGetError = options.throwGetError,
            useTrackablePrimitives = options.useTrackablePrimitives,
            readPixelsFile = options.readPixelsFile,
            _options$recording = options.recording,
            recording = _options$recording === void 0 ? [] : _options$recording,
            _options$variables = options.variables,
            variables = _options$variables === void 0 ? {} : _options$variables,
            onReadPixels = options.onReadPixels,
            onUnrecognizedArgumentLookup = options.onUnrecognizedArgumentLookup;
        var proxy = new Proxy(gl, {
          get: listen
        });
        var contextVariables = [];
        var entityNames = {};
        var imageCount = 0;
        var indent = '';
        var readPixelsVariableName;
        return proxy;

        function listen(obj, property) {
          switch (property) {
            case 'addComment':
              return addComment;

            case 'checkThrowError':
              return checkThrowError;

            case 'getReadPixelsVariableName':
              return readPixelsVariableName;

            case 'insertVariable':
              return insertVariable;

            case 'reset':
              return reset;

            case 'setIndent':
              return setIndent;

            case 'toString':
              return toString;

            case 'getContextVariableName':
              return getContextVariableName;
          }

          if (typeof gl[property] === 'function') {
            return function () {
              switch (property) {
                case 'getError':
                  if (throwGetError) {
                    recording.push("".concat(indent, "if (").concat(contextName, ".getError() !== ").concat(contextName, ".NONE) throw new Error('error');"));
                  } else {
                    recording.push("".concat(indent).concat(contextName, ".getError();"));
                  }

                  return gl.getError();

                case 'getExtension':
                  {
                    var variableName = "".concat(contextName, "Variables").concat(contextVariables.length);
                    recording.push("".concat(indent, "const ").concat(variableName, " = ").concat(contextName, ".getExtension('").concat(arguments[0], "');"));
                    var extension = gl.getExtension(arguments[0]);

                    if (extension && _typeof(extension) === 'object') {
                      var tappedExtension = glExtensionWiretap(extension, {
                        getEntity: getEntity,
                        useTrackablePrimitives: useTrackablePrimitives,
                        recording: recording,
                        contextName: variableName,
                        contextVariables: contextVariables,
                        variables: variables,
                        indent: indent,
                        onUnrecognizedArgumentLookup: onUnrecognizedArgumentLookup
                      });
                      contextVariables.push(tappedExtension);
                      return tappedExtension;
                    } else {
                      contextVariables.push(null);
                    }

                    return extension;
                  }

                case 'readPixels':
                  var i = contextVariables.indexOf(arguments[6]);
                  var targetVariableName;

                  if (i === -1) {
                    var _variableName = getVariableName(arguments[6]);

                    if (_variableName) {
                      targetVariableName = _variableName;
                      recording.push("".concat(indent).concat(_variableName));
                    } else {
                      targetVariableName = "".concat(contextName, "Variable").concat(contextVariables.length);
                      contextVariables.push(arguments[6]);
                      recording.push("".concat(indent, "const ").concat(targetVariableName, " = new ").concat(arguments[6].constructor.name, "(").concat(arguments[6].length, ");"));
                    }
                  } else {
                    targetVariableName = "".concat(contextName, "Variable").concat(i);
                  }

                  readPixelsVariableName = targetVariableName;
                  var argumentAsStrings = [arguments[0], arguments[1], arguments[2], arguments[3], getEntity(arguments[4]), getEntity(arguments[5]), targetVariableName];
                  recording.push("".concat(indent).concat(contextName, ".readPixels(").concat(argumentAsStrings.join(', '), ");"));

                  if (readPixelsFile) {
                    writePPM(arguments[2], arguments[3]);
                  }

                  if (onReadPixels) {
                    onReadPixels(targetVariableName, argumentAsStrings);
                  }

                  return gl.readPixels.apply(gl, arguments);

                case 'drawBuffers':
                  recording.push("".concat(indent).concat(contextName, ".drawBuffers([").concat(argumentsToString(arguments[0], {
                    contextName: contextName,
                    contextVariables: contextVariables,
                    getEntity: getEntity,
                    addVariable: addVariable,
                    variables: variables,
                    onUnrecognizedArgumentLookup: onUnrecognizedArgumentLookup
                  }), "]);"));
                  return gl.drawBuffers(arguments[0]);
              }

              var result = gl[property].apply(gl, arguments);

              switch (_typeof(result)) {
                case 'undefined':
                  recording.push("".concat(indent).concat(methodCallToString(property, arguments), ";"));
                  return;

                case 'number':
                case 'boolean':
                  if (useTrackablePrimitives && contextVariables.indexOf(trackablePrimitive(result)) === -1) {
                    recording.push("".concat(indent, "const ").concat(contextName, "Variable").concat(contextVariables.length, " = ").concat(methodCallToString(property, arguments), ";"));
                    contextVariables.push(result = trackablePrimitive(result));
                    break;
                  }

                default:
                  if (result === null) {
                    recording.push("".concat(methodCallToString(property, arguments), ";"));
                  } else {
                    recording.push("".concat(indent, "const ").concat(contextName, "Variable").concat(contextVariables.length, " = ").concat(methodCallToString(property, arguments), ";"));
                  }

                  contextVariables.push(result);
              }

              return result;
            };
          }

          entityNames[gl[property]] = property;
          return gl[property];
        }

        function toString() {
          return recording.join('\n');
        }

        function reset() {
          while (recording.length > 0) {
            recording.pop();
          }
        }

        function insertVariable(name, value) {
          variables[name] = value;
        }

        function getEntity(value) {
          var name = entityNames[value];

          if (name) {
            return contextName + '.' + name;
          }

          return value;
        }

        function setIndent(spaces) {
          indent = ' '.repeat(spaces);
        }

        function addVariable(value, source) {
          var variableName = "".concat(contextName, "Variable").concat(contextVariables.length);
          recording.push("".concat(indent, "const ").concat(variableName, " = ").concat(source, ";"));
          contextVariables.push(value);
          return variableName;
        }

        function writePPM(width, height) {
          var sourceVariable = "".concat(contextName, "Variable").concat(contextVariables.length);
          var imageVariable = "imageDatum".concat(imageCount);
          recording.push("".concat(indent, "let ").concat(imageVariable, " = [\"P3\\n# ").concat(readPixelsFile, ".ppm\\n\", ").concat(width, ", ' ', ").concat(height, ", \"\\n255\\n\"].join(\"\");"));
          recording.push("".concat(indent, "for (let i = 0; i < ").concat(imageVariable, ".length; i += 4) {"));
          recording.push("".concat(indent, "  ").concat(imageVariable, " += ").concat(sourceVariable, "[i] + ' ' + ").concat(sourceVariable, "[i + 1] + ' ' + ").concat(sourceVariable, "[i + 2] + ' ';"));
          recording.push("".concat(indent, "}"));
          recording.push("".concat(indent, "if (typeof require !== \"undefined\") {"));
          recording.push("".concat(indent, "  require('fs').writeFileSync('./").concat(readPixelsFile, ".ppm', ").concat(imageVariable, ");"));
          recording.push("".concat(indent, "}"));
          imageCount++;
        }

        function addComment(value) {
          recording.push("".concat(indent, "// ").concat(value));
        }

        function checkThrowError() {
          recording.push("".concat(indent, "(() => {\n").concat(indent, "const error = ").concat(contextName, ".getError();\n").concat(indent, "if (error !== ").concat(contextName, ".NONE) {\n").concat(indent, "  const names = Object.getOwnPropertyNames(gl);\n").concat(indent, "  for (let i = 0; i < names.length; i++) {\n").concat(indent, "    const name = names[i];\n").concat(indent, "    if (").concat(contextName, "[name] === error) {\n").concat(indent, "      throw new Error('").concat(contextName, " threw ' + name);\n").concat(indent, "    }\n").concat(indent, "  }\n").concat(indent, "}\n").concat(indent, "})();"));
        }

        function methodCallToString(method, args) {
          return "".concat(contextName, ".").concat(method, "(").concat(argumentsToString(args, {
            contextName: contextName,
            contextVariables: contextVariables,
            getEntity: getEntity,
            addVariable: addVariable,
            variables: variables,
            onUnrecognizedArgumentLookup: onUnrecognizedArgumentLookup
          }), ")");
        }

        function getVariableName(value) {
          if (variables) {
            for (var _name in variables) {
              if (variables[_name] === value) {
                return _name;
              }
            }
          }

          return null;
        }

        function getContextVariableName(value) {
          var i = contextVariables.indexOf(value);

          if (i !== -1) {
            return "".concat(contextName, "Variable").concat(i);
          }

          return null;
        }
      }

      function glExtensionWiretap(extension, options) {
        var proxy = new Proxy(extension, {
          get: listen
        });
        var extensionEntityNames = {};
        var contextName = options.contextName,
            contextVariables = options.contextVariables,
            getEntity = options.getEntity,
            useTrackablePrimitives = options.useTrackablePrimitives,
            recording = options.recording,
            variables = options.variables,
            indent = options.indent,
            onUnrecognizedArgumentLookup = options.onUnrecognizedArgumentLookup;
        return proxy;

        function listen(obj, property) {
          if (typeof obj[property] === 'function') {
            return function () {
              switch (property) {
                case 'drawBuffersWEBGL':
                  recording.push("".concat(indent).concat(contextName, ".drawBuffersWEBGL([").concat(argumentsToString(arguments[0], {
                    contextName: contextName,
                    contextVariables: contextVariables,
                    getEntity: getExtensionEntity,
                    addVariable: addVariable,
                    variables: variables,
                    onUnrecognizedArgumentLookup: onUnrecognizedArgumentLookup
                  }), "]);"));
                  return extension.drawBuffersWEBGL(arguments[0]);
              }

              var result = extension[property].apply(extension, arguments);

              switch (_typeof(result)) {
                case 'undefined':
                  recording.push("".concat(indent).concat(methodCallToString(property, arguments), ";"));
                  return;

                case 'number':
                case 'boolean':
                  if (useTrackablePrimitives && contextVariables.indexOf(trackablePrimitive(result)) === -1) {
                    recording.push("".concat(indent, "const ").concat(contextName, "Variable").concat(contextVariables.length, " = ").concat(methodCallToString(property, arguments), ";"));
                    contextVariables.push(result = trackablePrimitive(result));
                  } else {
                    recording.push("".concat(indent, "const ").concat(contextName, "Variable").concat(contextVariables.length, " = ").concat(methodCallToString(property, arguments), ";"));
                    contextVariables.push(result);
                  }

                  break;

                default:
                  if (result === null) {
                    recording.push("".concat(methodCallToString(property, arguments), ";"));
                  } else {
                    recording.push("".concat(indent, "const ").concat(contextName, "Variable").concat(contextVariables.length, " = ").concat(methodCallToString(property, arguments), ";"));
                  }

                  contextVariables.push(result);
              }

              return result;
            };
          }

          extensionEntityNames[extension[property]] = property;
          return extension[property];
        }

        function getExtensionEntity(value) {
          if (extensionEntityNames.hasOwnProperty(value)) {
            return "".concat(contextName, ".").concat(extensionEntityNames[value]);
          }

          return getEntity(value);
        }

        function methodCallToString(method, args) {
          return "".concat(contextName, ".").concat(method, "(").concat(argumentsToString(args, {
            contextName: contextName,
            contextVariables: contextVariables,
            getEntity: getExtensionEntity,
            addVariable: addVariable,
            variables: variables,
            onUnrecognizedArgumentLookup: onUnrecognizedArgumentLookup
          }), ")");
        }

        function addVariable(value, source) {
          var variableName = "".concat(contextName, "Variable").concat(contextVariables.length);
          contextVariables.push(value);
          recording.push("".concat(indent, "const ").concat(variableName, " = ").concat(source, ";"));
          return variableName;
        }
      }

      function argumentsToString(args, options) {
        var variables = options.variables,
            onUnrecognizedArgumentLookup = options.onUnrecognizedArgumentLookup;
        return Array.from(args).map(function (arg) {
          var variableName = getVariableName(arg);

          if (variableName) {
            return variableName;
          }

          return argumentToString(arg, options);
        }).join(', ');

        function getVariableName(value) {
          if (variables) {
            for (var _name2 in variables) {
              if (!variables.hasOwnProperty(_name2)) continue;

              if (variables[_name2] === value) {
                return _name2;
              }
            }
          }

          if (onUnrecognizedArgumentLookup) {
            return onUnrecognizedArgumentLookup(value);
          }

          return null;
        }
      }

      function argumentToString(arg, options) {
        var contextName = options.contextName,
            contextVariables = options.contextVariables,
            getEntity = options.getEntity,
            addVariable = options.addVariable,
            onUnrecognizedArgumentLookup = options.onUnrecognizedArgumentLookup;

        if (typeof arg === 'undefined') {
          return 'undefined';
        }

        if (arg === null) {
          return 'null';
        }

        var i = contextVariables.indexOf(arg);

        if (i > -1) {
          return "".concat(contextName, "Variable").concat(i);
        }

        switch (arg.constructor.name) {
          case 'String':
            var hasLines = /\n/.test(arg);
            var hasSingleQuotes = /'/.test(arg);
            var hasDoubleQuotes = /"/.test(arg);

            if (hasLines) {
              return '`' + arg + '`';
            } else if (hasSingleQuotes && !hasDoubleQuotes) {
              return '"' + arg + '"';
            } else if (!hasSingleQuotes && hasDoubleQuotes) {
              return "'" + arg + "'";
            } else {
              return '\'' + arg + '\'';
            }

          case 'Number':
            return getEntity(arg);

          case 'Boolean':
            return getEntity(arg);

          case 'Array':
            return addVariable(arg, "new ".concat(arg.constructor.name, "([").concat(Array.from(arg).join(','), "])"));

          case 'Float32Array':
          case 'Uint8Array':
          case 'Uint16Array':
          case 'Int32Array':
            return addVariable(arg, "new ".concat(arg.constructor.name, "(").concat(JSON.stringify(Array.from(arg)), ")"));

          default:
            if (onUnrecognizedArgumentLookup) {
              var instantiationString = onUnrecognizedArgumentLookup(arg);

              if (instantiationString) {
                return instantiationString;
              }
            }

            throw new Error("unrecognized argument type ".concat(arg.constructor.name));
        }
      }

      function trackablePrimitive(value) {
        return new value.constructor(value);
      }

      if (typeof module !== 'undefined') {
        module.exports = {
          glWiretap: glWiretap,
          glExtensionWiretap: glExtensionWiretap
        };
      }

      if (typeof window !== 'undefined') {
        glWiretap.glExtensionWiretap = glExtensionWiretap;
        window.glWiretap = glWiretap;
      }
    }, {}],
    4: [function (require, module, exports) {
      function setupArguments(args) {
        var newArguments = new Array(args.length);

        for (var i = 0; i < args.length; i++) {
          var arg = args[i];

          if (arg.toArray) {
            newArguments[i] = arg.toArray();
          } else {
            newArguments[i] = arg;
          }
        }

        return newArguments;
      }

      function mock1D() {
        var args = setupArguments(arguments);
        var row = new Float32Array(this.output.x);

        for (var x = 0; x < this.output.x; x++) {
          this.thread.x = x;
          this.thread.y = 0;
          this.thread.z = 0;
          row[x] = this._fn.apply(this, args);
        }

        return row;
      }

      function mock2D() {
        var args = setupArguments(arguments);
        var matrix = new Array(this.output.y);

        for (var y = 0; y < this.output.y; y++) {
          var row = new Float32Array(this.output.x);

          for (var x = 0; x < this.output.x; x++) {
            this.thread.x = x;
            this.thread.y = y;
            this.thread.z = 0;
            row[x] = this._fn.apply(this, args);
          }

          matrix[y] = row;
        }

        return matrix;
      }

      function mock2DGraphical() {
        var args = setupArguments(arguments);

        for (var y = 0; y < this.output.y; y++) {
          for (var x = 0; x < this.output.x; x++) {
            this.thread.x = x;
            this.thread.y = y;
            this.thread.z = 0;

            this._fn.apply(this, args);
          }
        }
      }

      function mock3D() {
        var args = setupArguments(arguments);
        var cube = new Array(this.output.z);

        for (var z = 0; z < this.output.z; z++) {
          var matrix = new Array(this.output.y);

          for (var y = 0; y < this.output.y; y++) {
            var row = new Float32Array(this.output.x);

            for (var x = 0; x < this.output.x; x++) {
              this.thread.x = x;
              this.thread.y = y;
              this.thread.z = z;
              row[x] = this._fn.apply(this, args);
            }

            matrix[y] = row;
          }

          cube[z] = matrix;
        }

        return cube;
      }

      function apiDecorate(kernel) {
        kernel.setOutput = function (output) {
          kernel.output = setupOutput(output);

          if (kernel.graphical) {
            setupGraphical(kernel);
          }
        };

        kernel.toJSON = function () {
          throw new Error('Not usable with gpuMock');
        };

        kernel.setConstants = function (flag) {
          kernel.constants = flag;
          return kernel;
        };

        kernel.setGraphical = function (flag) {
          kernel.graphical = flag;
          return kernel;
        };

        kernel.setCanvas = function (flag) {
          kernel.canvas = flag;
          return kernel;
        };

        kernel.setContext = function (flag) {
          kernel.context = flag;
          return kernel;
        };

        kernel.destroy = function () {};

        kernel.validateSettings = function () {};

        if (kernel.graphical && kernel.output) {
          setupGraphical(kernel);
        }

        kernel.exec = function () {
          var _arguments = arguments;
          return new Promise(function (resolve, reject) {
            try {
              resolve(kernel.apply(kernel, _arguments));
            } catch (e) {
              reject(e);
            }
          });
        };

        kernel.getPixels = function (flip) {
          var _kernel$output = kernel.output,
              x = _kernel$output.x,
              y = _kernel$output.y;
          return flip ? flipPixels(kernel._imageData.data, x, y) : kernel._imageData.data.slice(0);
        };

        kernel.color = function (r, g, b, a) {
          if (typeof a === 'undefined') {
            a = 1;
          }

          r = Math.floor(r * 255);
          g = Math.floor(g * 255);
          b = Math.floor(b * 255);
          a = Math.floor(a * 255);
          var width = kernel.output.x;
          var height = kernel.output.y;
          var x = kernel.thread.x;
          var y = height - kernel.thread.y - 1;
          var index = x + y * width;
          kernel._colorData[index * 4 + 0] = r;
          kernel._colorData[index * 4 + 1] = g;
          kernel._colorData[index * 4 + 2] = b;
          kernel._colorData[index * 4 + 3] = a;
        };

        var mockMethod = function mockMethod() {
          return kernel;
        };

        var methods = ['setWarnVarUsage', 'setArgumentTypes', 'setTactic', 'setOptimizeFloatMemory', 'setDebug', 'setLoopMaxIterations', 'setConstantTypes', 'setFunctions', 'setNativeFunctions', 'setInjectedNative', 'setPipeline', 'setPrecision', 'setOutputToTexture', 'setImmutable', 'setStrictIntegers', 'setDynamicOutput', 'setHardcodeConstants', 'setDynamicArguments', 'setUseLegacyEncoder', 'setWarnVarUsage', 'addSubKernel'];

        for (var i = 0; i < methods.length; i++) {
          kernel[methods[i]] = mockMethod;
        }

        return kernel;
      }

      function setupGraphical(kernel) {
        var _kernel$output2 = kernel.output,
            x = _kernel$output2.x,
            y = _kernel$output2.y;

        if (kernel.context && kernel.context.createImageData) {
          var data = new Uint8ClampedArray(x * y * 4);
          kernel._imageData = kernel.context.createImageData(x, y);
          kernel._colorData = data;
        } else {
          var _data = new Uint8ClampedArray(x * y * 4);

          kernel._imageData = {
            data: _data
          };
          kernel._colorData = _data;
        }
      }

      function setupOutput(output) {
        var result = null;

        if (output.length) {
          if (output.length === 3) {
            var _output = _slicedToArray(output, 3),
                x = _output[0],
                y = _output[1],
                z = _output[2];

            result = {
              x: x,
              y: y,
              z: z
            };
          } else if (output.length === 2) {
            var _output2 = _slicedToArray(output, 2),
                _x = _output2[0],
                _y = _output2[1];

            result = {
              x: _x,
              y: _y
            };
          } else {
            var _output3 = _slicedToArray(output, 1),
                _x2 = _output3[0];

            result = {
              x: _x2
            };
          }
        } else {
          result = output;
        }

        return result;
      }

      function gpuMock(fn) {
        var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var output = settings.output ? setupOutput(settings.output) : null;

        function kernel() {
          if (kernel.output.z) {
            return mock3D.apply(kernel, arguments);
          } else if (kernel.output.y) {
            if (kernel.graphical) {
              return mock2DGraphical.apply(kernel, arguments);
            }

            return mock2D.apply(kernel, arguments);
          } else {
            return mock1D.apply(kernel, arguments);
          }
        }

        kernel._fn = fn;
        kernel.constants = settings.constants || null;
        kernel.context = settings.context || null;
        kernel.canvas = settings.canvas || null;
        kernel.graphical = settings.graphical || false;
        kernel._imageData = null;
        kernel._colorData = null;
        kernel.output = output;
        kernel.thread = {
          x: 0,
          y: 0,
          z: 0
        };
        return apiDecorate(kernel);
      }

      function flipPixels(pixels, width, height) {
        var halfHeight = height / 2 | 0;
        var bytesPerRow = width * 4;
        var temp = new Uint8ClampedArray(width * 4);
        var result = pixels.slice(0);

        for (var y = 0; y < halfHeight; ++y) {
          var topOffset = y * bytesPerRow;
          var bottomOffset = (height - y - 1) * bytesPerRow;
          temp.set(result.subarray(topOffset, topOffset + bytesPerRow));
          result.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);
          result.set(temp, bottomOffset);
        }

        return result;
      }

      module.exports = {
        gpuMock: gpuMock
      };
    }, {}],
    5: [function (require, module, exports) {
      var _require = require('./utils'),
          utils = _require.utils;

      function alias(name, source) {
        var fnString = source.toString();
        return new Function("return function ".concat(name, " (").concat(utils.getArgumentNamesFromString(fnString).join(', '), ") {\n  ").concat(utils.getFunctionBodyFromString(fnString), "\n}"))();
      }

      module.exports = {
        alias: alias
      };
    }, {
      "./utils": 113
    }],
    6: [function (require, module, exports) {
      var _require2 = require('../function-node'),
          FunctionNode = _require2.FunctionNode;

      var CPUFunctionNode =
      /*#__PURE__*/
      function (_FunctionNode) {
        _inherits(CPUFunctionNode, _FunctionNode);

        function CPUFunctionNode() {
          _classCallCheck(this, CPUFunctionNode);

          return _possibleConstructorReturn(this, _getPrototypeOf(CPUFunctionNode).apply(this, arguments));
        }

        _createClass(CPUFunctionNode, [{
          key: "astFunction",
          value: function astFunction(ast, retArr) {
            if (!this.isRootKernel) {
              retArr.push('function');
              retArr.push(' ');
              retArr.push(this.name);
              retArr.push('(');

              for (var i = 0; i < this.argumentNames.length; ++i) {
                var argumentName = this.argumentNames[i];

                if (i > 0) {
                  retArr.push(', ');
                }

                retArr.push('user_');
                retArr.push(argumentName);
              }

              retArr.push(') {\n');
            }

            for (var _i2 = 0; _i2 < ast.body.body.length; ++_i2) {
              this.astGeneric(ast.body.body[_i2], retArr);
              retArr.push('\n');
            }

            if (!this.isRootKernel) {
              retArr.push('}\n');
            }

            return retArr;
          }
        }, {
          key: "astReturnStatement",
          value: function astReturnStatement(ast, retArr) {
            var type = this.returnType || this.getType(ast.argument);

            if (!this.returnType) {
              this.returnType = type;
            }

            if (this.isRootKernel) {
              retArr.push(this.leadingReturnStatement);
              this.astGeneric(ast.argument, retArr);
              retArr.push(';\n');
              retArr.push(this.followingReturnStatement);
              retArr.push('continue;\n');
            } else if (this.isSubKernel) {
              retArr.push("subKernelResult_".concat(this.name, " = "));
              this.astGeneric(ast.argument, retArr);
              retArr.push(';');
              retArr.push("return subKernelResult_".concat(this.name, ";"));
            } else {
              retArr.push('return ');
              this.astGeneric(ast.argument, retArr);
              retArr.push(';');
            }

            return retArr;
          }
        }, {
          key: "astLiteral",
          value: function astLiteral(ast, retArr) {
            if (isNaN(ast.value)) {
              throw this.astErrorOutput('Non-numeric literal not supported : ' + ast.value, ast);
            }

            retArr.push(ast.value);
            return retArr;
          }
        }, {
          key: "astBinaryExpression",
          value: function astBinaryExpression(ast, retArr) {
            retArr.push('(');
            this.astGeneric(ast.left, retArr);
            retArr.push(ast.operator);
            this.astGeneric(ast.right, retArr);
            retArr.push(')');
            return retArr;
          }
        }, {
          key: "astIdentifierExpression",
          value: function astIdentifierExpression(idtNode, retArr) {
            if (idtNode.type !== 'Identifier') {
              throw this.astErrorOutput('IdentifierExpression - not an Identifier', idtNode);
            }

            switch (idtNode.name) {
              case 'Infinity':
                retArr.push('Infinity');
                break;

              default:
                if (this.constants && this.constants.hasOwnProperty(idtNode.name)) {
                  retArr.push('constants_' + idtNode.name);
                } else {
                  retArr.push('user_' + idtNode.name);
                }

            }

            return retArr;
          }
        }, {
          key: "astForStatement",
          value: function astForStatement(forNode, retArr) {
            if (forNode.type !== 'ForStatement') {
              throw this.astErrorOutput('Invalid for statement', forNode);
            }

            var initArr = [];
            var testArr = [];
            var updateArr = [];
            var bodyArr = [];
            var isSafe = null;

            if (forNode.init) {
              this.pushState('in-for-loop-init');
              this.astGeneric(forNode.init, initArr);

              for (var i = 0; i < initArr.length; i++) {
                if (initArr[i].includes && initArr[i].includes(',')) {
                  isSafe = false;
                }
              }

              this.popState('in-for-loop-init');
            } else {
              isSafe = false;
            }

            if (forNode.test) {
              this.astGeneric(forNode.test, testArr);
            } else {
              isSafe = false;
            }

            if (forNode.update) {
              this.astGeneric(forNode.update, updateArr);
            } else {
              isSafe = false;
            }

            if (forNode.body) {
              this.pushState('loop-body');
              this.astGeneric(forNode.body, bodyArr);
              this.popState('loop-body');
            }

            if (isSafe === null) {
              isSafe = this.isSafe(forNode.init) && this.isSafe(forNode.test);
            }

            if (isSafe) {
              retArr.push("for (".concat(initArr.join(''), ";").concat(testArr.join(''), ";").concat(updateArr.join(''), "){\n"));
              retArr.push(bodyArr.join(''));
              retArr.push('}\n');
            } else {
              var iVariableName = this.getInternalVariableName('safeI');

              if (initArr.length > 0) {
                retArr.push(initArr.join(''), ';\n');
              }

              retArr.push("for (let ".concat(iVariableName, "=0;").concat(iVariableName, "<LOOP_MAX;").concat(iVariableName, "++){\n"));

              if (testArr.length > 0) {
                retArr.push("if (!".concat(testArr.join(''), ") break;\n"));
              }

              retArr.push(bodyArr.join(''));
              retArr.push("\n".concat(updateArr.join(''), ";"));
              retArr.push('}\n');
            }

            return retArr;
          }
        }, {
          key: "astWhileStatement",
          value: function astWhileStatement(whileNode, retArr) {
            if (whileNode.type !== 'WhileStatement') {
              throw this.astErrorOutput('Invalid while statement', whileNode);
            }

            retArr.push('for (let i = 0; i < LOOP_MAX; i++) {');
            retArr.push('if (');
            this.astGeneric(whileNode.test, retArr);
            retArr.push(') {\n');
            this.astGeneric(whileNode.body, retArr);
            retArr.push('} else {\n');
            retArr.push('break;\n');
            retArr.push('}\n');
            retArr.push('}\n');
            return retArr;
          }
        }, {
          key: "astDoWhileStatement",
          value: function astDoWhileStatement(doWhileNode, retArr) {
            if (doWhileNode.type !== 'DoWhileStatement') {
              throw this.astErrorOutput('Invalid while statement', doWhileNode);
            }

            retArr.push('for (let i = 0; i < LOOP_MAX; i++) {');
            this.astGeneric(doWhileNode.body, retArr);
            retArr.push('if (!');
            this.astGeneric(doWhileNode.test, retArr);
            retArr.push(') {\n');
            retArr.push('break;\n');
            retArr.push('}\n');
            retArr.push('}\n');
            return retArr;
          }
        }, {
          key: "astAssignmentExpression",
          value: function astAssignmentExpression(assNode, retArr) {
            var declaration = this.getDeclaration(assNode.left);

            if (declaration && !declaration.assignable) {
              throw this.astErrorOutput("Variable ".concat(assNode.left.name, " is not assignable here"), assNode);
            }

            this.astGeneric(assNode.left, retArr);
            retArr.push(assNode.operator);
            this.astGeneric(assNode.right, retArr);
            return retArr;
          }
        }, {
          key: "astBlockStatement",
          value: function astBlockStatement(bNode, retArr) {
            if (this.isState('loop-body')) {
              this.pushState('block-body');

              for (var i = 0; i < bNode.body.length; i++) {
                this.astGeneric(bNode.body[i], retArr);
              }

              this.popState('block-body');
            } else {
              retArr.push('{\n');

              for (var _i3 = 0; _i3 < bNode.body.length; _i3++) {
                this.astGeneric(bNode.body[_i3], retArr);
              }

              retArr.push('}\n');
            }

            return retArr;
          }
        }, {
          key: "astVariableDeclaration",
          value: function astVariableDeclaration(varDecNode, retArr) {
            if (varDecNode.kind === 'var' && this.warnVarUsage) {
              this.varWarn();
            }

            retArr.push("".concat(varDecNode.kind, " "));
            var declarations = varDecNode.declarations;

            for (var i = 0; i < declarations.length; i++) {
              if (i > 0) {
                retArr.push(',');
              }

              this.astGeneric(declarations[i], retArr);
            }

            if (!this.isState('in-for-loop-init')) {
              retArr.push(';');
            }

            return retArr;
          }
        }, {
          key: "astIfStatement",
          value: function astIfStatement(ifNode, retArr) {
            retArr.push('if (');
            this.astGeneric(ifNode.test, retArr);
            retArr.push(')');

            if (ifNode.consequent.type === 'BlockStatement') {
              this.astGeneric(ifNode.consequent, retArr);
            } else {
              retArr.push(' {\n');
              this.astGeneric(ifNode.consequent, retArr);
              retArr.push('\n}\n');
            }

            if (ifNode.alternate) {
              retArr.push('else ');

              if (ifNode.alternate.type === 'BlockStatement' || ifNode.alternate.type === 'IfStatement') {
                this.astGeneric(ifNode.alternate, retArr);
              } else {
                retArr.push(' {\n');
                this.astGeneric(ifNode.alternate, retArr);
                retArr.push('\n}\n');
              }
            }

            return retArr;
          }
        }, {
          key: "astSwitchStatement",
          value: function astSwitchStatement(ast, retArr) {
            var discriminant = ast.discriminant,
                cases = ast.cases;
            retArr.push('switch (');
            this.astGeneric(discriminant, retArr);
            retArr.push(') {\n');

            for (var i = 0; i < cases.length; i++) {
              if (cases[i].test === null) {
                retArr.push('default:\n');
                this.astGeneric(cases[i].consequent, retArr);

                if (cases[i].consequent && cases[i].consequent.length > 0) {
                  retArr.push('break;\n');
                }

                continue;
              }

              retArr.push('case ');
              this.astGeneric(cases[i].test, retArr);
              retArr.push(':\n');

              if (cases[i].consequent && cases[i].consequent.length > 0) {
                this.astGeneric(cases[i].consequent, retArr);
                retArr.push('break;\n');
              }
            }

            retArr.push('\n}');
          }
        }, {
          key: "astThisExpression",
          value: function astThisExpression(tNode, retArr) {
            retArr.push('_this');
            return retArr;
          }
        }, {
          key: "astMemberExpression",
          value: function astMemberExpression(mNode, retArr) {
            var _this$getMemberExpres = this.getMemberExpressionDetails(mNode),
                signature = _this$getMemberExpres.signature,
                type = _this$getMemberExpres.type,
                property = _this$getMemberExpres.property,
                xProperty = _this$getMemberExpres.xProperty,
                yProperty = _this$getMemberExpres.yProperty,
                zProperty = _this$getMemberExpres.zProperty,
                name = _this$getMemberExpres.name,
                origin = _this$getMemberExpres.origin;

            switch (signature) {
              case 'this.thread.value':
                retArr.push("_this.thread.".concat(name));
                return retArr;

              case 'this.output.value':
                switch (name) {
                  case 'x':
                    retArr.push('outputX');
                    break;

                  case 'y':
                    retArr.push('outputY');
                    break;

                  case 'z':
                    retArr.push('outputZ');
                    break;

                  default:
                    throw this.astErrorOutput('Unexpected expression', mNode);
                }

                return retArr;

              case 'value':
                throw this.astErrorOutput('Unexpected expression', mNode);

              case 'value[]':
              case 'value[][]':
              case 'value[][][]':
              case 'value.value':
                if (origin === 'Math') {
                  retArr.push(Math[name]);
                  return retArr;
                }

                switch (property) {
                  case 'r':
                    retArr.push("user_".concat(name, "[0]"));
                    return retArr;

                  case 'g':
                    retArr.push("user_".concat(name, "[1]"));
                    return retArr;

                  case 'b':
                    retArr.push("user_".concat(name, "[2]"));
                    return retArr;

                  case 'a':
                    retArr.push("user_".concat(name, "[3]"));
                    return retArr;
                }

                break;

              case 'value.value[]':
                if (this.removeIstanbulCoverage) {
                  return retArr;
                }

                retArr.push("".concat(mNode.object.object.name, ".").concat(mNode.object.property.name, "[").concat(mNode.property.value, "]"));
                return retArr;

              case 'value.value[][]':
                if (this.removeIstanbulCoverage) {
                  return retArr;
                }

                retArr.push("".concat(mNode.object.object.object.name, ".").concat(mNode.object.object.property.name, "[").concat(mNode.object.property.value, "][").concat(mNode.property.value, "]"));
                return retArr;

              case 'this.constants.value':
              case 'this.constants.value[]':
              case 'this.constants.value[][]':
              case 'this.constants.value[][][]':
                break;

              case 'fn()[]':
                this.astGeneric(mNode.object, retArr);
                retArr.push('[');
                this.astGeneric(mNode.property, retArr);
                retArr.push(']');
                return retArr;

              default:
                throw this.astErrorOutput('Unexpected expression', mNode);
            }

            if (!mNode.computed) {
              switch (type) {
                case 'Number':
                case 'Integer':
                case 'Float':
                case 'Boolean':
                  retArr.push("".concat(origin, "_").concat(name));
                  return retArr;
              }
            }

            var markupName = "".concat(origin, "_").concat(name);

            switch (type) {
              case 'Array(2)':
              case 'Array(3)':
              case 'Array(4)':
              case 'HTMLImageArray':
              case 'ArrayTexture(1)':
              case 'ArrayTexture(2)':
              case 'ArrayTexture(3)':
              case 'ArrayTexture(4)':
              case 'HTMLImage':
              default:
                var size;
                var isInput;

                if (origin === 'constants') {
                  var constant = this.constants[name];
                  isInput = this.constantTypes[name] === 'Input';
                  size = isInput ? constant.size : null;
                } else {
                  isInput = this.isInput(name);
                  size = isInput ? this.argumentSizes[this.argumentNames.indexOf(name)] : null;
                }

                retArr.push("".concat(markupName));

                if (zProperty && yProperty) {
                  if (isInput) {
                    retArr.push('[(');
                    this.astGeneric(zProperty, retArr);
                    retArr.push("*".concat(this.dynamicArguments ? '(outputY * outputX)' : size[1] * size[0], ")+("));
                    this.astGeneric(yProperty, retArr);
                    retArr.push("*".concat(this.dynamicArguments ? 'outputX' : size[0], ")+"));
                    this.astGeneric(xProperty, retArr);
                    retArr.push(']');
                  } else {
                    retArr.push('[');
                    this.astGeneric(zProperty, retArr);
                    retArr.push(']');
                    retArr.push('[');
                    this.astGeneric(yProperty, retArr);
                    retArr.push(']');
                    retArr.push('[');
                    this.astGeneric(xProperty, retArr);
                    retArr.push(']');
                  }
                } else if (yProperty) {
                  if (isInput) {
                    retArr.push('[(');
                    this.astGeneric(yProperty, retArr);
                    retArr.push("*".concat(this.dynamicArguments ? 'outputX' : size[0], ")+"));
                    this.astGeneric(xProperty, retArr);
                    retArr.push(']');
                  } else {
                    retArr.push('[');
                    this.astGeneric(yProperty, retArr);
                    retArr.push(']');
                    retArr.push('[');
                    this.astGeneric(xProperty, retArr);
                    retArr.push(']');
                  }
                } else if (typeof xProperty !== 'undefined') {
                  retArr.push('[');
                  this.astGeneric(xProperty, retArr);
                  retArr.push(']');
                }

            }

            return retArr;
          }
        }, {
          key: "astCallExpression",
          value: function astCallExpression(ast, retArr) {
            if (ast.type !== 'CallExpression') {
              throw this.astErrorOutput('Unknown CallExpression', ast);
            }

            var functionName = this.astMemberExpressionUnroll(ast.callee);

            if (this.calledFunctions.indexOf(functionName) < 0) {
              this.calledFunctions.push(functionName);
            }

            var isMathFunction = this.isAstMathFunction(ast);

            if (this.onFunctionCall) {
              this.onFunctionCall(this.name, functionName, ast.arguments);
            }

            retArr.push(functionName);
            retArr.push('(');
            var targetTypes = this.lookupFunctionArgumentTypes(functionName) || [];

            for (var i = 0; i < ast.arguments.length; ++i) {
              var argument = ast.arguments[i];
              var argumentType = this.getType(argument);

              if (!targetTypes[i]) {
                this.triggerImplyArgumentType(functionName, i, argumentType, this);
              }

              if (i > 0) {
                retArr.push(', ');
              }

              this.astGeneric(argument, retArr);
            }

            retArr.push(')');
            return retArr;
          }
        }, {
          key: "astArrayExpression",
          value: function astArrayExpression(arrNode, retArr) {
            var arrLen = arrNode.elements.length;
            retArr.push('new Float32Array([');

            for (var i = 0; i < arrLen; ++i) {
              if (i > 0) {
                retArr.push(', ');
              }

              var subNode = arrNode.elements[i];
              this.astGeneric(subNode, retArr);
            }

            retArr.push('])');
            return retArr;
          }
        }, {
          key: "astDebuggerStatement",
          value: function astDebuggerStatement(arrNode, retArr) {
            retArr.push('debugger;');
            return retArr;
          }
        }]);

        return CPUFunctionNode;
      }(FunctionNode);

      module.exports = {
        CPUFunctionNode: CPUFunctionNode
      };
    }, {
      "../function-node": 10
    }],
    7: [function (require, module, exports) {
      var _require3 = require('../../utils'),
          utils = _require3.utils;

      function constantsToString(constants, types) {
        var results = [];

        for (var _name3 in types) {
          if (!types.hasOwnProperty(_name3)) continue;
          var type = types[_name3];
          var constant = constants[_name3];

          switch (type) {
            case 'Number':
            case 'Integer':
            case 'Float':
            case 'Boolean':
              results.push("".concat(_name3, ":").concat(constant));
              break;

            case 'Array(2)':
            case 'Array(3)':
            case 'Array(4)':
              results.push("".concat(_name3, ":new ").concat(constant.constructor.name, "(").concat(JSON.stringify(Array.from(constant)), ")"));
              break;
          }
        }

        return "{ ".concat(results.join(), " }");
      }

      function cpuKernelString(cpuKernel, name) {
        var header = [];
        var thisProperties = [];
        var beforeReturn = [];
        var useFunctionKeyword = !/^function/.test(cpuKernel.color.toString());
        header.push('  const { context, canvas, constants: incomingConstants } = settings;', "  const output = new Int32Array(".concat(JSON.stringify(Array.from(cpuKernel.output)), ");"), "  const _constantTypes = ".concat(JSON.stringify(cpuKernel.constantTypes), ";"), "  const _constants = ".concat(constantsToString(cpuKernel.constants, cpuKernel.constantTypes), ";"));
        thisProperties.push('    constants: _constants,', '    context,', '    output,', '    thread: {x: 0, y: 0, z: 0},');

        if (cpuKernel.graphical) {
          header.push("  const _imageData = context.createImageData(".concat(cpuKernel.output[0], ", ").concat(cpuKernel.output[1], ");"));
          header.push("  const _colorData = new Uint8ClampedArray(".concat(cpuKernel.output[0], " * ").concat(cpuKernel.output[1], " * 4);"));
          var colorFn = utils.flattenFunctionToString((useFunctionKeyword ? 'function ' : '') + cpuKernel.color.toString(), {
            thisLookup: function thisLookup(propertyName) {
              switch (propertyName) {
                case '_colorData':
                  return '_colorData';

                case '_imageData':
                  return '_imageData';

                case 'output':
                  return 'output';

                case 'thread':
                  return 'this.thread';
              }

              return JSON.stringify(cpuKernel[propertyName]);
            },
            findDependency: function findDependency(object, name) {
              return null;
            }
          });
          var getPixelsFn = utils.flattenFunctionToString((useFunctionKeyword ? 'function ' : '') + cpuKernel.getPixels.toString(), {
            thisLookup: function thisLookup(propertyName) {
              switch (propertyName) {
                case '_colorData':
                  return '_colorData';

                case '_imageData':
                  return '_imageData';

                case 'output':
                  return 'output';

                case 'thread':
                  return 'this.thread';
              }

              return JSON.stringify(cpuKernel[propertyName]);
            },
            findDependency: function findDependency() {
              return null;
            }
          });
          thisProperties.push('    _imageData,', '    _colorData,', "    color: ".concat(colorFn, ","));
          beforeReturn.push("  kernel.getPixels = ".concat(getPixelsFn, ";"));
        }

        var constantTypes = [];
        var constantKeys = Object.keys(cpuKernel.constantTypes);

        for (var i = 0; i < constantKeys.length; i++) {
          constantTypes.push(cpuKernel.constantTypes[constantKeys]);
        }

        if (cpuKernel.argumentTypes.indexOf('HTMLImageArray') !== -1 || constantTypes.indexOf('HTMLImageArray') !== -1) {
          var flattenedImageTo3DArray = utils.flattenFunctionToString((useFunctionKeyword ? 'function ' : '') + cpuKernel._imageTo3DArray.toString(), {
            doNotDefine: ['canvas'],
            findDependency: function findDependency(object, name) {
              if (object === 'this') {
                return (useFunctionKeyword ? 'function ' : '') + cpuKernel[name].toString();
              }

              return null;
            },
            thisLookup: function thisLookup(propertyName) {
              switch (propertyName) {
                case 'canvas':
                  return;

                case 'context':
                  return 'context';
              }
            }
          });
          beforeReturn.push(flattenedImageTo3DArray);
          thisProperties.push("    _mediaTo2DArray,");
          thisProperties.push("    _imageTo3DArray,");
        } else if (cpuKernel.argumentTypes.indexOf('HTMLImage') !== -1 || constantTypes.indexOf('HTMLImage') !== -1) {
          var flattenedImageTo2DArray = utils.flattenFunctionToString((useFunctionKeyword ? 'function ' : '') + cpuKernel._mediaTo2DArray.toString(), {
            findDependency: function findDependency(object, name) {
              return null;
            },
            thisLookup: function thisLookup(propertyName) {
              switch (propertyName) {
                case 'canvas':
                  return 'settings.canvas';

                case 'context':
                  return 'settings.context';
              }

              throw new Error('unhandled thisLookup');
            }
          });
          beforeReturn.push(flattenedImageTo2DArray);
          thisProperties.push("    _mediaTo2DArray,");
        }

        return "function(settings) {\n".concat(header.join('\n'), "\n  for (const p in _constantTypes) {\n    if (!_constantTypes.hasOwnProperty(p)) continue;\n    const type = _constantTypes[p];\n    switch (type) {\n      case 'Number':\n      case 'Integer':\n      case 'Float':\n      case 'Boolean':\n      case 'Array(2)':\n      case 'Array(3)':\n      case 'Array(4)':\n        if (incomingConstants.hasOwnProperty(p)) {\n          console.warn('constant ' + p + ' of type ' + type + ' cannot be resigned');\n        }\n        continue;\n    }\n    if (!incomingConstants.hasOwnProperty(p)) {\n      throw new Error('constant ' + p + ' not found');\n    }\n    _constants[p] = incomingConstants[p];\n  }\n  const kernel = (function() {\n").concat(cpuKernel._kernelString, "\n  })\n    .apply({ ").concat(thisProperties.join('\n'), " });\n  ").concat(beforeReturn.join('\n'), "\n  return kernel;\n}");
      }

      module.exports = {
        cpuKernelString: cpuKernelString
      };
    }, {
      "../../utils": 113
    }],
    8: [function (require, module, exports) {
      var _require4 = require('../kernel'),
          Kernel = _require4.Kernel;

      var _require5 = require('../function-builder'),
          FunctionBuilder = _require5.FunctionBuilder;

      var _require6 = require('./function-node'),
          CPUFunctionNode = _require6.CPUFunctionNode;

      var _require7 = require('../../utils'),
          utils = _require7.utils;

      var _require8 = require('./kernel-string'),
          cpuKernelString = _require8.cpuKernelString;

      var CPUKernel =
      /*#__PURE__*/
      function (_Kernel) {
        _inherits(CPUKernel, _Kernel);

        _createClass(CPUKernel, null, [{
          key: "getFeatures",
          value: function getFeatures() {
            return this.features;
          }
        }, {
          key: "isContextMatch",
          value: function isContextMatch(context) {
            return false;
          }
        }, {
          key: "nativeFunctionArguments",
          value: function nativeFunctionArguments() {
            return null;
          }
        }, {
          key: "nativeFunctionReturnType",
          value: function nativeFunctionReturnType() {
            return null;
          }
        }, {
          key: "combineKernels",
          value: function combineKernels(combinedKernel) {
            return combinedKernel;
          }
        }, {
          key: "features",
          get: function get() {
            return Object.freeze({
              kernelMap: true,
              isIntegerDivisionAccurate: true
            });
          }
        }, {
          key: "isSupported",
          get: function get() {
            return true;
          }
        }, {
          key: "mode",
          get: function get() {
            return 'cpu';
          }
        }]);

        function CPUKernel(source, settings) {
          var _this;

          _classCallCheck(this, CPUKernel);

          _this = _possibleConstructorReturn(this, _getPrototypeOf(CPUKernel).call(this, source, settings));

          _this.mergeSettings(source.settings || settings);

          _this._imageData = null;
          _this._colorData = null;
          _this._kernelString = null;
          _this._prependedString = [];
          _this.thread = {
            x: 0,
            y: 0,
            z: 0
          };
          _this.translatedSources = null;
          return _this;
        }

        _createClass(CPUKernel, [{
          key: "initCanvas",
          value: function initCanvas() {
            if (typeof document !== 'undefined') {
              return document.createElement('canvas');
            } else if (typeof OffscreenCanvas !== 'undefined') {
              return new OffscreenCanvas(0, 0);
            }
          }
        }, {
          key: "initContext",
          value: function initContext() {
            if (!this.canvas) return null;
            return this.canvas.getContext('2d');
          }
        }, {
          key: "initPlugins",
          value: function initPlugins(settings) {
            return [];
          }
        }, {
          key: "validateSettings",
          value: function validateSettings(args) {
            if (!this.output || this.output.length === 0) {
              if (args.length !== 1) {
                throw new Error('Auto output only supported for kernels with only one input');
              }

              var argType = utils.getVariableType(args[0], this.strictIntegers);

              if (argType === 'Array') {
                this.output = utils.getDimensions(argType);
              } else if (argType === 'NumberTexture' || argType === 'ArrayTexture(4)') {
                this.output = args[0].output;
              } else {
                throw new Error('Auto output not supported for input type: ' + argType);
              }
            }

            if (this.graphical) {
              if (this.output.length !== 2) {
                throw new Error('Output must have 2 dimensions on graphical mode');
              }
            }

            this.checkOutput();
          }
        }, {
          key: "translateSource",
          value: function translateSource() {
            this.leadingReturnStatement = this.output.length > 1 ? 'resultX[x] = ' : 'result[x] = ';

            if (this.subKernels) {
              var followingReturnStatement = [];

              for (var i = 0; i < this.subKernels.length; i++) {
                var _name4 = this.subKernels[i].name;
                followingReturnStatement.push(this.output.length > 1 ? "resultX_".concat(_name4, "[x] = subKernelResult_").concat(_name4, ";\n") : "result_".concat(_name4, "[x] = subKernelResult_").concat(_name4, ";\n"));
              }

              this.followingReturnStatement = followingReturnStatement.join('');
            }

            var functionBuilder = FunctionBuilder.fromKernel(this, CPUFunctionNode);
            this.translatedSources = functionBuilder.getPrototypes('kernel');

            if (!this.graphical && !this.returnType) {
              this.returnType = functionBuilder.getKernelResultType();
            }
          }
        }, {
          key: "build",
          value: function build() {
            this.setupConstants();
            this.setupArguments(arguments);
            this.validateSettings(arguments);
            this.translateSource();

            if (this.graphical) {
              var canvas = this.canvas,
                  output = this.output;

              if (!canvas) {
                throw new Error('no canvas available for using graphical output');
              }

              var width = output[0];
              var height = output[1] || 1;
              canvas.width = width;
              canvas.height = height;
              this._imageData = this.context.createImageData(width, height);
              this._colorData = new Uint8ClampedArray(width * height * 4);
            }

            var kernelString = this.getKernelString();
            this.kernelString = kernelString;

            if (this.debug) {
              console.log('Function output:');
              console.log(kernelString);
            }

            try {
              this.run = new Function([], kernelString).bind(this)();
            } catch (e) {
              console.error('An error occurred compiling the javascript: ', e);
            }

            this.built = true;
          }
        }, {
          key: "color",
          value: function color(r, g, b, a) {
            if (typeof a === 'undefined') {
              a = 1;
            }

            r = Math.floor(r * 255);
            g = Math.floor(g * 255);
            b = Math.floor(b * 255);
            a = Math.floor(a * 255);
            var width = this.output[0];
            var height = this.output[1];
            var x = this.thread.x;
            var y = height - this.thread.y - 1;
            var index = x + y * width;
            this._colorData[index * 4 + 0] = r;
            this._colorData[index * 4 + 1] = g;
            this._colorData[index * 4 + 2] = b;
            this._colorData[index * 4 + 3] = a;
          }
        }, {
          key: "getKernelString",
          value: function getKernelString() {
            if (this._kernelString !== null) return this._kernelString;
            var kernelThreadString = null;
            var translatedSources = this.translatedSources;

            if (translatedSources.length > 1) {
              translatedSources = translatedSources.filter(function (fn) {
                if (/^function/.test(fn)) return fn;
                kernelThreadString = fn;
                return false;
              });
            } else {
              kernelThreadString = translatedSources.shift();
            }

            return this._kernelString = "  const LOOP_MAX = ".concat(this._getLoopMaxString(), ";\n  ").concat(this.injectedNative || '', "\n  const _this = this;\n  ").concat(this._processConstants(), "\n  return (").concat(this.argumentNames.map(function (argumentName) {
              return 'user_' + argumentName;
            }).join(', '), ") => {\n    ").concat(this._prependedString.join(''), "\n    ").concat(this._processArguments(), "\n    ").concat(this.graphical ? this._graphicalKernelBody(kernelThreadString) : this._resultKernelBody(kernelThreadString), "\n    ").concat(translatedSources.length > 0 ? translatedSources.join('\n') : '', "\n  };");
          }
        }, {
          key: "toString",
          value: function toString() {
            return cpuKernelString(this);
          }
        }, {
          key: "_getLoopMaxString",
          value: function _getLoopMaxString() {
            return this.loopMaxIterations ? " ".concat(parseInt(this.loopMaxIterations), ";") : ' 1000;';
          }
        }, {
          key: "_processConstants",
          value: function _processConstants() {
            if (!this.constants) return '';
            var result = [];

            for (var p in this.constants) {
              var type = this.constantTypes[p];

              switch (type) {
                case 'HTMLImage':
                case 'HTMLVideo':
                  result.push("    const constants_".concat(p, " = this._mediaTo2DArray(this.constants.").concat(p, ");\n"));
                  break;

                case 'HTMLImageArray':
                  result.push("    const constants_".concat(p, " = this._imageTo3DArray(this.constants.").concat(p, ");\n"));
                  break;

                case 'Input':
                  result.push("    const constants_".concat(p, " = this.constants.").concat(p, ".value;\n"));
                  break;

                default:
                  result.push("    const constants_".concat(p, " = this.constants.").concat(p, ";\n"));
              }
            }

            return result.join('');
          }
        }, {
          key: "_processArguments",
          value: function _processArguments() {
            var result = [];

            for (var i = 0; i < this.argumentTypes.length; i++) {
              var variableName = "user_".concat(this.argumentNames[i]);

              switch (this.argumentTypes[i]) {
                case 'HTMLImage':
                case 'HTMLVideo':
                  result.push("    ".concat(variableName, " = this._mediaTo2DArray(").concat(variableName, ");\n"));
                  break;

                case 'HTMLImageArray':
                  result.push("    ".concat(variableName, " = this._imageTo3DArray(").concat(variableName, ");\n"));
                  break;

                case 'Input':
                  result.push("    ".concat(variableName, " = ").concat(variableName, ".value;\n"));
                  break;

                case 'ArrayTexture(1)':
                case 'ArrayTexture(2)':
                case 'ArrayTexture(3)':
                case 'ArrayTexture(4)':
                case 'NumberTexture':
                case 'MemoryOptimizedNumberTexture':
                  result.push("\n    if (".concat(variableName, ".toArray) {\n      if (!_this.textureCache) {\n        _this.textureCache = [];\n        _this.arrayCache = [];\n      }\n      const textureIndex = _this.textureCache.indexOf(").concat(variableName, ");\n      if (textureIndex !== -1) {\n        ").concat(variableName, " = _this.arrayCache[textureIndex];\n      } else {\n        _this.textureCache.push(").concat(variableName, ");\n        ").concat(variableName, " = ").concat(variableName, ".toArray();\n        _this.arrayCache.push(").concat(variableName, ");\n      }\n    }"));
                  break;
              }
            }

            return result.join('');
          }
        }, {
          key: "_mediaTo2DArray",
          value: function _mediaTo2DArray(media) {
            var canvas = this.canvas;
            var width = media.width > 0 ? media.width : media.videoWidth;
            var height = media.height > 0 ? media.height : media.videoHeight;

            if (canvas.width < width) {
              canvas.width = width;
            }

            if (canvas.height < height) {
              canvas.height = height;
            }

            var ctx = this.context;
            ctx.drawImage(media, 0, 0, width, height);
            var pixelsData = ctx.getImageData(0, 0, width, height).data;
            var imageArray = new Array(height);
            var index = 0;

            for (var y = height - 1; y >= 0; y--) {
              var row = imageArray[y] = new Array(width);

              for (var x = 0; x < width; x++) {
                var pixel = new Float32Array(4);
                pixel[0] = pixelsData[index++] / 255;
                pixel[1] = pixelsData[index++] / 255;
                pixel[2] = pixelsData[index++] / 255;
                pixel[3] = pixelsData[index++] / 255;
                row[x] = pixel;
              }
            }

            return imageArray;
          }
        }, {
          key: "getPixels",
          value: function getPixels(flip) {
            var _this$output = _slicedToArray(this.output, 2),
                width = _this$output[0],
                height = _this$output[1];

            return flip ? utils.flipPixels(this._imageData.data, width, height) : this._imageData.data.slice(0);
          }
        }, {
          key: "_imageTo3DArray",
          value: function _imageTo3DArray(images) {
            var imagesArray = new Array(images.length);

            for (var i = 0; i < images.length; i++) {
              imagesArray[i] = this._mediaTo2DArray(images[i]);
            }

            return imagesArray;
          }
        }, {
          key: "_resultKernelBody",
          value: function _resultKernelBody(kernelString) {
            switch (this.output.length) {
              case 1:
                return this._resultKernel1DLoop(kernelString) + this._kernelOutput();

              case 2:
                return this._resultKernel2DLoop(kernelString) + this._kernelOutput();

              case 3:
                return this._resultKernel3DLoop(kernelString) + this._kernelOutput();

              default:
                throw new Error('unsupported size kernel');
            }
          }
        }, {
          key: "_graphicalKernelBody",
          value: function _graphicalKernelBody(kernelThreadString) {
            switch (this.output.length) {
              case 2:
                return this._graphicalKernel2DLoop(kernelThreadString) + this._graphicalOutput();

              default:
                throw new Error('unsupported size kernel');
            }
          }
        }, {
          key: "_graphicalOutput",
          value: function _graphicalOutput() {
            return "\n    this._imageData.data.set(this._colorData);\n    this.context.putImageData(this._imageData, 0, 0);\n    return;";
          }
        }, {
          key: "_getKernelResultTypeConstructorString",
          value: function _getKernelResultTypeConstructorString() {
            switch (this.returnType) {
              case 'LiteralInteger':
              case 'Number':
              case 'Integer':
              case 'Float':
                return 'Float32Array';

              case 'Array(2)':
              case 'Array(3)':
              case 'Array(4)':
                return 'Array';

              default:
                if (this.graphical) {
                  return 'Float32Array';
                }

                throw new Error("unhandled returnType ".concat(this.returnType));
            }
          }
        }, {
          key: "_resultKernel1DLoop",
          value: function _resultKernel1DLoop(kernelString) {
            var constructorString = this._getKernelResultTypeConstructorString();

            return "  const outputX = _this.output[0];\n    const result = new ".concat(constructorString, "(outputX);\n    ").concat(this._mapSubKernels(function (subKernel) {
              return "const result_".concat(subKernel.name, " = new ").concat(constructorString, "(outputX);\n");
            }).join('    '), "\n    ").concat(this._mapSubKernels(function (subKernel) {
              return "let subKernelResult_".concat(subKernel.name, ";\n");
            }).join('    '), "\n    for (let x = 0; x < outputX; x++) {\n      this.thread.x = x;\n      this.thread.y = 0;\n      this.thread.z = 0;\n      ").concat(kernelString, "\n    }");
          }
        }, {
          key: "_resultKernel2DLoop",
          value: function _resultKernel2DLoop(kernelString) {
            var constructorString = this._getKernelResultTypeConstructorString();

            return "  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const result = new Array(outputY);\n    ".concat(this._mapSubKernels(function (subKernel) {
              return "const result_".concat(subKernel.name, " = new Array(outputY);\n");
            }).join('    '), "\n    ").concat(this._mapSubKernels(function (subKernel) {
              return "let subKernelResult_".concat(subKernel.name, ";\n");
            }).join('    '), "\n    for (let y = 0; y < outputY; y++) {\n      this.thread.z = 0;\n      this.thread.y = y;\n      const resultX = result[y] = new ").concat(constructorString, "(outputX);\n      ").concat(this._mapSubKernels(function (subKernel) {
              return "const resultX_".concat(subKernel.name, " = result_").concat(subKernel.name, "[y] = new ").concat(constructorString, "(outputX);\n");
            }).join(''), "\n      for (let x = 0; x < outputX; x++) {\n        this.thread.x = x;\n        ").concat(kernelString, "\n      }\n    }");
          }
        }, {
          key: "_graphicalKernel2DLoop",
          value: function _graphicalKernel2DLoop(kernelString) {
            var constructorString = this._getKernelResultTypeConstructorString();

            return "  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    ".concat(this._mapSubKernels(function (subKernel) {
              return "const result_".concat(subKernel.name, " = new Array(outputY);\n");
            }).join('    '), "\n    ").concat(this._mapSubKernels(function (subKernel) {
              return "let subKernelResult_".concat(subKernel.name, ";\n");
            }).join('    '), "\n    for (let y = 0; y < outputY; y++) {\n      this.thread.z = 0;\n      this.thread.y = y;\n      ").concat(this._mapSubKernels(function (subKernel) {
              return "const resultX_".concat(subKernel.name, " = result_").concat(subKernel.name, "[y] = new ").concat(constructorString, "(outputX);\n");
            }).join(''), "\n      for (let x = 0; x < outputX; x++) {\n        this.thread.x = x;\n        ").concat(kernelString, "\n      }\n    }");
          }
        }, {
          key: "_resultKernel3DLoop",
          value: function _resultKernel3DLoop(kernelString) {
            var constructorString = this._getKernelResultTypeConstructorString();

            return "  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const outputZ = _this.output[2];\n    const result = new Array(outputZ);\n    ".concat(this._mapSubKernels(function (subKernel) {
              return "const result_".concat(subKernel.name, " = new Array(outputZ);\n");
            }).join('    '), "\n    ").concat(this._mapSubKernels(function (subKernel) {
              return "let subKernelResult_".concat(subKernel.name, ";\n");
            }).join('    '), "\n    for (let z = 0; z < outputZ; z++) {\n      this.thread.z = z;\n      const resultY = result[z] = new Array(outputY);\n      ").concat(this._mapSubKernels(function (subKernel) {
              return "const resultY_".concat(subKernel.name, " = result_").concat(subKernel.name, "[z] = new Array(outputY);\n");
            }).join('      '), "\n      for (let y = 0; y < outputY; y++) {\n        this.thread.y = y;\n        const resultX = resultY[y] = new ").concat(constructorString, "(outputX);\n        ").concat(this._mapSubKernels(function (subKernel) {
              return "const resultX_".concat(subKernel.name, " = resultY_").concat(subKernel.name, "[y] = new ").concat(constructorString, "(outputX);\n");
            }).join('        '), "\n        for (let x = 0; x < outputX; x++) {\n          this.thread.x = x;\n          ").concat(kernelString, "\n        }\n      }\n    }");
          }
        }, {
          key: "_kernelOutput",
          value: function _kernelOutput() {
            if (!this.subKernels) {
              return '\n    return result;';
            }

            return "\n    return {\n      result: result,\n      ".concat(this.subKernels.map(function (subKernel) {
              return "".concat(subKernel.property, ": result_").concat(subKernel.name);
            }).join(',\n      '), "\n    };");
          }
        }, {
          key: "_mapSubKernels",
          value: function _mapSubKernels(fn) {
            return this.subKernels === null ? [''] : this.subKernels.map(fn);
          }
        }, {
          key: "destroy",
          value: function destroy(removeCanvasReference) {
            if (removeCanvasReference) {
              delete this.canvas;
            }
          }
        }, {
          key: "toJSON",
          value: function toJSON() {
            var json = _get(_getPrototypeOf(CPUKernel.prototype), "toJSON", this).call(this);

            json.functionNodes = FunctionBuilder.fromKernel(this, CPUFunctionNode).toJSON();
            return json;
          }
        }, {
          key: "setOutput",
          value: function setOutput(output) {
            _get(_getPrototypeOf(CPUKernel.prototype), "setOutput", this).call(this, output);

            var _this$output2 = _slicedToArray(this.output, 2),
                width = _this$output2[0],
                height = _this$output2[1];

            if (this.graphical) {
              this._imageData = this.context.createImageData(width, height);
              this._colorData = new Uint8ClampedArray(width * height * 4);
            }
          }
        }, {
          key: "prependString",
          value: function prependString(value) {
            if (this._kernelString) throw new Error('Kernel already built');

            this._prependedString.push(value);
          }
        }, {
          key: "hasPrependString",
          value: function hasPrependString(value) {
            return this._prependedString.indexOf(value) > -1;
          }
        }], [{
          key: "destroyContext",
          value: function destroyContext(context) {}
        }]);

        return CPUKernel;
      }(Kernel);

      module.exports = {
        CPUKernel: CPUKernel
      };
    }, {
      "../../utils": 113,
      "../function-builder": 9,
      "../kernel": 36,
      "./function-node": 6,
      "./kernel-string": 7
    }],
    9: [function (require, module, exports) {
      var FunctionBuilder =
      /*#__PURE__*/
      function () {
        _createClass(FunctionBuilder, null, [{
          key: "fromKernel",
          value: function fromKernel(kernel, FunctionNode, extraNodeOptions) {
            var kernelArguments = kernel.kernelArguments,
                kernelConstants = kernel.kernelConstants,
                argumentNames = kernel.argumentNames,
                argumentSizes = kernel.argumentSizes,
                argumentBitRatios = kernel.argumentBitRatios,
                constants = kernel.constants,
                constantBitRatios = kernel.constantBitRatios,
                debug = kernel.debug,
                loopMaxIterations = kernel.loopMaxIterations,
                nativeFunctions = kernel.nativeFunctions,
                output = kernel.output,
                optimizeFloatMemory = kernel.optimizeFloatMemory,
                precision = kernel.precision,
                plugins = kernel.plugins,
                source = kernel.source,
                subKernels = kernel.subKernels,
                functions = kernel.functions,
                leadingReturnStatement = kernel.leadingReturnStatement,
                followingReturnStatement = kernel.followingReturnStatement,
                dynamicArguments = kernel.dynamicArguments,
                dynamicOutput = kernel.dynamicOutput,
                warnVarUsage = kernel.warnVarUsage,
                onIstanbulCoverageVariable = kernel.onIstanbulCoverageVariable,
                removeIstanbulCoverage = kernel.removeIstanbulCoverage;
            var argumentTypes = new Array(kernelArguments.length);
            var constantTypes = {};

            for (var i = 0; i < kernelArguments.length; i++) {
              argumentTypes[i] = kernelArguments[i].type;
            }

            for (var _i4 = 0; _i4 < kernelConstants.length; _i4++) {
              var kernelConstant = kernelConstants[_i4];
              constantTypes[kernelConstant.name] = kernelConstant.type;
            }

            var needsArgumentType = function needsArgumentType(functionName, index) {
              return functionBuilder.needsArgumentType(functionName, index);
            };

            var assignArgumentType = function assignArgumentType(functionName, index, type) {
              functionBuilder.assignArgumentType(functionName, index, type);
            };

            var lookupReturnType = function lookupReturnType(functionName, ast, requestingNode) {
              return functionBuilder.lookupReturnType(functionName, ast, requestingNode);
            };

            var lookupFunctionArgumentTypes = function lookupFunctionArgumentTypes(functionName) {
              return functionBuilder.lookupFunctionArgumentTypes(functionName);
            };

            var lookupFunctionArgumentName = function lookupFunctionArgumentName(functionName, argumentIndex) {
              return functionBuilder.lookupFunctionArgumentName(functionName, argumentIndex);
            };

            var lookupFunctionArgumentBitRatio = function lookupFunctionArgumentBitRatio(functionName, argumentName) {
              return functionBuilder.lookupFunctionArgumentBitRatio(functionName, argumentName);
            };

            var triggerImplyArgumentType = function triggerImplyArgumentType(functionName, i, argumentType, requestingNode) {
              functionBuilder.assignArgumentType(functionName, i, argumentType, requestingNode);
            };

            var triggerImplyArgumentBitRatio = function triggerImplyArgumentBitRatio(functionName, argumentName, calleeFunctionName, argumentIndex) {
              functionBuilder.assignArgumentBitRatio(functionName, argumentName, calleeFunctionName, argumentIndex);
            };

            var onFunctionCall = function onFunctionCall(functionName, calleeFunctionName, args) {
              functionBuilder.trackFunctionCall(functionName, calleeFunctionName, args);
            };

            var onNestedFunction = function onNestedFunction(ast, returnType) {
              var argumentNames = [];

              for (var _i5 = 0; _i5 < ast.params.length; _i5++) {
                argumentNames.push(ast.params[_i5].name);
              }

              var nestedFunction = new FunctionNode(null, Object.assign({}, nodeOptions, {
                returnType: null,
                ast: ast,
                name: ast.id.name,
                argumentNames: argumentNames,
                lookupReturnType: lookupReturnType,
                lookupFunctionArgumentTypes: lookupFunctionArgumentTypes,
                lookupFunctionArgumentName: lookupFunctionArgumentName,
                lookupFunctionArgumentBitRatio: lookupFunctionArgumentBitRatio,
                needsArgumentType: needsArgumentType,
                assignArgumentType: assignArgumentType,
                triggerImplyArgumentType: triggerImplyArgumentType,
                triggerImplyArgumentBitRatio: triggerImplyArgumentBitRatio,
                onFunctionCall: onFunctionCall,
                warnVarUsage: warnVarUsage
              }));
              nestedFunction.traceFunctionAST(ast);
              functionBuilder.addFunctionNode(nestedFunction);
            };

            var nodeOptions = Object.assign({
              isRootKernel: false,
              onNestedFunction: onNestedFunction,
              lookupReturnType: lookupReturnType,
              lookupFunctionArgumentTypes: lookupFunctionArgumentTypes,
              lookupFunctionArgumentName: lookupFunctionArgumentName,
              lookupFunctionArgumentBitRatio: lookupFunctionArgumentBitRatio,
              needsArgumentType: needsArgumentType,
              assignArgumentType: assignArgumentType,
              triggerImplyArgumentType: triggerImplyArgumentType,
              triggerImplyArgumentBitRatio: triggerImplyArgumentBitRatio,
              onFunctionCall: onFunctionCall,
              warnVarUsage: warnVarUsage,
              onIstanbulCoverageVariable: onIstanbulCoverageVariable ? function (name) {
                return onIstanbulCoverageVariable(name, kernel);
              } : null,
              removeIstanbulCoverage: removeIstanbulCoverage,
              optimizeFloatMemory: optimizeFloatMemory,
              precision: precision,
              constants: constants,
              constantTypes: constantTypes,
              constantBitRatios: constantBitRatios,
              debug: debug,
              loopMaxIterations: loopMaxIterations,
              output: output,
              plugins: plugins,
              dynamicArguments: dynamicArguments,
              dynamicOutput: dynamicOutput
            }, extraNodeOptions || {});
            var rootNodeOptions = Object.assign({}, nodeOptions, {
              isRootKernel: true,
              name: 'kernel',
              argumentNames: argumentNames,
              argumentTypes: argumentTypes,
              argumentSizes: argumentSizes,
              argumentBitRatios: argumentBitRatios,
              leadingReturnStatement: leadingReturnStatement,
              followingReturnStatement: followingReturnStatement
            });

            if (_typeof(source) === 'object' && source.functionNodes) {
              return new FunctionBuilder().fromJSON(source.functionNodes, FunctionNode);
            }

            var rootNode = new FunctionNode(source, rootNodeOptions);
            var functionNodes = null;

            if (functions) {
              functionNodes = functions.map(function (fn) {
                return new FunctionNode(fn.source, {
                  returnType: fn.returnType,
                  argumentTypes: fn.argumentTypes,
                  output: output,
                  plugins: plugins,
                  constants: constants,
                  constantTypes: constantTypes,
                  constantBitRatios: constantBitRatios,
                  optimizeFloatMemory: optimizeFloatMemory,
                  precision: precision,
                  lookupReturnType: lookupReturnType,
                  lookupFunctionArgumentTypes: lookupFunctionArgumentTypes,
                  lookupFunctionArgumentName: lookupFunctionArgumentName,
                  lookupFunctionArgumentBitRatio: lookupFunctionArgumentBitRatio,
                  needsArgumentType: needsArgumentType,
                  assignArgumentType: assignArgumentType,
                  triggerImplyArgumentType: triggerImplyArgumentType,
                  triggerImplyArgumentBitRatio: triggerImplyArgumentBitRatio,
                  onFunctionCall: onFunctionCall,
                  onNestedFunction: onNestedFunction,
                  onIstanbulCoverageVariable: onIstanbulCoverageVariable ? function (name) {
                    return onIstanbulCoverageVariable(name, kernel);
                  } : null,
                  removeIstanbulCoverage: removeIstanbulCoverage
                });
              });
            }

            var subKernelNodes = null;

            if (subKernels) {
              subKernelNodes = subKernels.map(function (subKernel) {
                var name = subKernel.name,
                    source = subKernel.source;
                return new FunctionNode(source, Object.assign({}, nodeOptions, {
                  name: name,
                  isSubKernel: true,
                  isRootKernel: false
                }));
              });
            }

            var functionBuilder = new FunctionBuilder({
              kernel: kernel,
              rootNode: rootNode,
              functionNodes: functionNodes,
              nativeFunctions: nativeFunctions,
              subKernelNodes: subKernelNodes
            });
            return functionBuilder;
          }
        }]);

        function FunctionBuilder(settings) {
          _classCallCheck(this, FunctionBuilder);

          settings = settings || {};
          this.kernel = settings.kernel;
          this.rootNode = settings.rootNode;
          this.functionNodes = settings.functionNodes || [];
          this.subKernelNodes = settings.subKernelNodes || [];
          this.nativeFunctions = settings.nativeFunctions || [];
          this.functionMap = {};
          this.nativeFunctionNames = [];
          this.lookupChain = [];
          this.functionNodeDependencies = {};
          this.functionCalls = {};

          if (this.rootNode) {
            this.functionMap['kernel'] = this.rootNode;
          }

          if (this.functionNodes) {
            for (var i = 0; i < this.functionNodes.length; i++) {
              this.functionMap[this.functionNodes[i].name] = this.functionNodes[i];
            }
          }

          if (this.subKernelNodes) {
            for (var _i6 = 0; _i6 < this.subKernelNodes.length; _i6++) {
              this.functionMap[this.subKernelNodes[_i6].name] = this.subKernelNodes[_i6];
            }
          }

          if (this.nativeFunctions) {
            for (var _i7 = 0; _i7 < this.nativeFunctions.length; _i7++) {
              var nativeFunction = this.nativeFunctions[_i7];
              this.nativeFunctionNames.push(nativeFunction.name);
            }
          }
        }

        _createClass(FunctionBuilder, [{
          key: "addFunctionNode",
          value: function addFunctionNode(functionNode) {
            if (!functionNode.name) throw new Error('functionNode.name needs set');
            this.functionMap[functionNode.name] = functionNode;

            if (functionNode.isRootKernel) {
              this.rootNode = functionNode;
            }
          }
        }, {
          key: "traceFunctionCalls",
          value: function traceFunctionCalls(functionName, retList) {
            functionName = functionName || 'kernel';
            retList = retList || [];

            if (this.nativeFunctionNames.indexOf(functionName) > -1) {
              if (retList.indexOf(functionName) === -1) {
                retList.push(functionName);
              }

              return retList;
            }

            var functionNode = this.functionMap[functionName];

            if (functionNode) {
              var functionIndex = retList.indexOf(functionName);

              if (functionIndex === -1) {
                retList.push(functionName);
                functionNode.toString();

                for (var i = 0; i < functionNode.calledFunctions.length; ++i) {
                  this.traceFunctionCalls(functionNode.calledFunctions[i], retList);
                }
              } else {
                var dependantFunctionName = retList.splice(functionIndex, 1)[0];
                retList.push(dependantFunctionName);
              }
            }

            return retList;
          }
        }, {
          key: "getPrototypeString",
          value: function getPrototypeString(functionName) {
            return this.getPrototypes(functionName).join('\n');
          }
        }, {
          key: "getPrototypes",
          value: function getPrototypes(functionName) {
            if (this.rootNode) {
              this.rootNode.toString();
            }

            if (functionName) {
              return this.getPrototypesFromFunctionNames(this.traceFunctionCalls(functionName, []).reverse());
            }

            return this.getPrototypesFromFunctionNames(Object.keys(this.functionMap));
          }
        }, {
          key: "getStringFromFunctionNames",
          value: function getStringFromFunctionNames(functionList) {
            var ret = [];

            for (var i = 0; i < functionList.length; ++i) {
              var node = this.functionMap[functionList[i]];

              if (node) {
                ret.push(this.functionMap[functionList[i]].toString());
              }
            }

            return ret.join('\n');
          }
        }, {
          key: "getPrototypesFromFunctionNames",
          value: function getPrototypesFromFunctionNames(functionList) {
            var ret = [];

            for (var i = 0; i < functionList.length; ++i) {
              var functionName = functionList[i];
              var functionIndex = this.nativeFunctionNames.indexOf(functionName);

              if (functionIndex > -1) {
                ret.push(this.nativeFunctions[functionIndex].source);
                continue;
              }

              var node = this.functionMap[functionName];

              if (node) {
                ret.push(node.toString());
              }
            }

            return ret;
          }
        }, {
          key: "toJSON",
          value: function toJSON() {
            var _this2 = this;

            return this.traceFunctionCalls(this.rootNode.name).reverse().map(function (name) {
              var nativeIndex = _this2.nativeFunctions.indexOf(name);

              if (nativeIndex > -1) {
                return {
                  name: name,
                  source: _this2.nativeFunctions[nativeIndex].source
                };
              } else if (_this2.functionMap[name]) {
                return _this2.functionMap[name].toJSON();
              } else {
                throw new Error("function ".concat(name, " not found"));
              }
            });
          }
        }, {
          key: "fromJSON",
          value: function fromJSON(jsonFunctionNodes, FunctionNode) {
            this.functionMap = {};

            for (var i = 0; i < jsonFunctionNodes.length; i++) {
              var jsonFunctionNode = jsonFunctionNodes[i];
              this.functionMap[jsonFunctionNode.settings.name] = new FunctionNode(jsonFunctionNode.ast, jsonFunctionNode.settings);
            }

            return this;
          }
        }, {
          key: "getString",
          value: function getString(functionName) {
            if (functionName) {
              return this.getStringFromFunctionNames(this.traceFunctionCalls(functionName).reverse());
            }

            return this.getStringFromFunctionNames(Object.keys(this.functionMap));
          }
        }, {
          key: "lookupReturnType",
          value: function lookupReturnType(functionName, ast, requestingNode) {
            if (ast.type !== 'CallExpression') {
              throw new Error("expected ast type of \"CallExpression\", but is ".concat(ast.type));
            }

            if (this._isNativeFunction(functionName)) {
              return this._lookupNativeFunctionReturnType(functionName);
            } else if (this._isFunction(functionName)) {
              var node = this._getFunction(functionName);

              if (node.returnType) {
                return node.returnType;
              } else {
                for (var i = 0; i < this.lookupChain.length; i++) {
                  if (this.lookupChain[i].ast === ast) {
                    if (node.argumentTypes.length === 0 && ast.arguments.length > 0) {
                      var args = ast.arguments;

                      for (var j = 0; j < args.length; j++) {
                        this.lookupChain.push({
                          name: requestingNode.name,
                          ast: args[i],
                          requestingNode: requestingNode
                        });
                        node.argumentTypes[j] = requestingNode.getType(args[j]);
                        this.lookupChain.pop();
                      }

                      return node.returnType = node.getType(node.getJsAST());
                    }

                    throw new Error('circlical logic detected!');
                  }
                }

                this.lookupChain.push({
                  name: requestingNode.name,
                  ast: ast,
                  requestingNode: requestingNode
                });
                var type = node.getType(node.getJsAST());
                this.lookupChain.pop();
                return node.returnType = type;
              }
            }

            return null;
          }
        }, {
          key: "_getFunction",
          value: function _getFunction(functionName) {
            if (!this._isFunction(functionName)) {
              new Error("Function ".concat(functionName, " not found"));
            }

            return this.functionMap[functionName];
          }
        }, {
          key: "_isFunction",
          value: function _isFunction(functionName) {
            return Boolean(this.functionMap[functionName]);
          }
        }, {
          key: "_getNativeFunction",
          value: function _getNativeFunction(functionName) {
            for (var i = 0; i < this.nativeFunctions.length; i++) {
              if (this.nativeFunctions[i].name === functionName) return this.nativeFunctions[i];
            }

            return null;
          }
        }, {
          key: "_isNativeFunction",
          value: function _isNativeFunction(functionName) {
            return Boolean(this._getNativeFunction(functionName));
          }
        }, {
          key: "_lookupNativeFunctionReturnType",
          value: function _lookupNativeFunctionReturnType(functionName) {
            var nativeFunction = this._getNativeFunction(functionName);

            if (nativeFunction) {
              return nativeFunction.returnType;
            }

            throw new Error("Native function ".concat(functionName, " not found"));
          }
        }, {
          key: "lookupFunctionArgumentTypes",
          value: function lookupFunctionArgumentTypes(functionName) {
            if (this._isNativeFunction(functionName)) {
              return this._getNativeFunction(functionName).argumentTypes;
            } else if (this._isFunction(functionName)) {
              return this._getFunction(functionName).argumentTypes;
            }

            return null;
          }
        }, {
          key: "lookupFunctionArgumentName",
          value: function lookupFunctionArgumentName(functionName, argumentIndex) {
            return this._getFunction(functionName).argumentNames[argumentIndex];
          }
        }, {
          key: "lookupFunctionArgumentBitRatio",
          value: function lookupFunctionArgumentBitRatio(functionName, argumentName) {
            if (!this._isFunction(functionName)) {
              throw new Error('function not found');
            }

            if (this.rootNode.name === functionName) {
              var _i8 = this.rootNode.argumentNames.indexOf(argumentName);

              if (_i8 !== -1) {
                return this.rootNode.argumentBitRatios[_i8];
              }
            }

            var node = this._getFunction(functionName);

            var i = node.argumentNames.indexOf(argumentName);

            if (i === -1) {
              throw new Error('argument not found');
            }

            var bitRatio = node.argumentBitRatios[i];

            if (typeof bitRatio !== 'number') {
              throw new Error('argument bit ratio not found');
            }

            return bitRatio;
          }
        }, {
          key: "needsArgumentType",
          value: function needsArgumentType(functionName, i) {
            if (!this._isFunction(functionName)) return false;

            var fnNode = this._getFunction(functionName);

            return !fnNode.argumentTypes[i];
          }
        }, {
          key: "assignArgumentType",
          value: function assignArgumentType(functionName, i, argumentType, requestingNode) {
            if (!this._isFunction(functionName)) return;

            var fnNode = this._getFunction(functionName);

            if (!fnNode.argumentTypes[i]) {
              fnNode.argumentTypes[i] = argumentType;
            }
          }
        }, {
          key: "assignArgumentBitRatio",
          value: function assignArgumentBitRatio(functionName, argumentName, calleeFunctionName, argumentIndex) {
            var node = this._getFunction(functionName);

            if (this._isNativeFunction(calleeFunctionName)) return null;

            var calleeNode = this._getFunction(calleeFunctionName);

            var i = node.argumentNames.indexOf(argumentName);

            if (i === -1) {
              throw new Error("Argument ".concat(argumentName, " not found in arguments from function ").concat(functionName));
            }

            var bitRatio = node.argumentBitRatios[i];

            if (typeof bitRatio !== 'number') {
              throw new Error("Bit ratio for argument ".concat(argumentName, " not found in function ").concat(functionName));
            }

            if (!calleeNode.argumentBitRatios) {
              calleeNode.argumentBitRatios = new Array(calleeNode.argumentNames.length);
            }

            var calleeBitRatio = calleeNode.argumentBitRatios[i];

            if (typeof calleeBitRatio === 'number') {
              if (calleeBitRatio !== bitRatio) {
                throw new Error("Incompatible bit ratio found at function ".concat(functionName, " at argument ").concat(argumentName));
              }

              return calleeBitRatio;
            }

            calleeNode.argumentBitRatios[i] = bitRatio;
            return bitRatio;
          }
        }, {
          key: "trackFunctionCall",
          value: function trackFunctionCall(functionName, calleeFunctionName, args) {
            if (!this.functionNodeDependencies[functionName]) {
              this.functionNodeDependencies[functionName] = new Set();
              this.functionCalls[functionName] = [];
            }

            this.functionNodeDependencies[functionName].add(calleeFunctionName);
            this.functionCalls[functionName].push(args);
          }
        }, {
          key: "getKernelResultType",
          value: function getKernelResultType() {
            return this.rootNode.returnType || this.rootNode.getType(this.rootNode.ast);
          }
        }, {
          key: "getSubKernelResultType",
          value: function getSubKernelResultType(index) {
            var subKernelNode = this.subKernelNodes[index];
            var called = false;

            for (var functionCallIndex = 0; functionCallIndex < this.rootNode.functionCalls.length; functionCallIndex++) {
              var functionCall = this.rootNode.functionCalls[functionCallIndex];

              if (functionCall.ast.callee.name === subKernelNode.name) {
                called = true;
              }
            }

            if (!called) {
              throw new Error("SubKernel ".concat(subKernelNode.name, " never called by kernel"));
            }

            return subKernelNode.returnType || subKernelNode.getType(subKernelNode.getJsAST());
          }
        }, {
          key: "getReturnTypes",
          value: function getReturnTypes() {
            var result = _defineProperty({}, this.rootNode.name, this.rootNode.getType(this.rootNode.ast));

            var list = this.traceFunctionCalls(this.rootNode.name);

            for (var i = 0; i < list.length; i++) {
              var functionName = list[i];
              var functionNode = this.functionMap[functionName];
              result[functionName] = functionNode.getType(functionNode.ast);
            }

            return result;
          }
        }]);

        return FunctionBuilder;
      }();

      module.exports = {
        FunctionBuilder: FunctionBuilder
      };
    }, {}],
    10: [function (require, module, exports) {
      var acorn = require('acorn');

      var _require9 = require('../utils'),
          utils = _require9.utils;

      var _require10 = require('./function-tracer'),
          FunctionTracer = _require10.FunctionTracer;

      var FunctionNode =
      /*#__PURE__*/
      function () {
        function FunctionNode(source, settings) {
          _classCallCheck(this, FunctionNode);

          if (!source && !settings.ast) {
            throw new Error('source parameter is missing');
          }

          settings = settings || {};
          this.source = source;
          this.ast = null;
          this.name = typeof source === 'string' ? settings.isRootKernel ? 'kernel' : settings.name || utils.getFunctionNameFromString(source) : null;
          this.calledFunctions = [];
          this.constants = {};
          this.constantTypes = {};
          this.constantBitRatios = {};
          this.isRootKernel = false;
          this.isSubKernel = false;
          this.debug = null;
          this.declarations = null;
          this.functions = null;
          this.identifiers = null;
          this.contexts = null;
          this.functionCalls = null;
          this.states = [];
          this.needsArgumentType = null;
          this.assignArgumentType = null;
          this.lookupReturnType = null;
          this.lookupFunctionArgumentTypes = null;
          this.lookupFunctionArgumentBitRatio = null;
          this.triggerImplyArgumentType = null;
          this.triggerImplyArgumentBitRatio = null;
          this.onNestedFunction = null;
          this.onFunctionCall = null;
          this.optimizeFloatMemory = null;
          this.precision = null;
          this.loopMaxIterations = null;
          this.argumentNames = typeof this.source === 'string' ? utils.getArgumentNamesFromString(this.source) : null;
          this.argumentTypes = [];
          this.argumentSizes = [];
          this.argumentBitRatios = null;
          this.returnType = null;
          this.output = [];
          this.plugins = null;
          this.leadingReturnStatement = null;
          this.followingReturnStatement = null;
          this.dynamicOutput = null;
          this.dynamicArguments = null;
          this.strictTypingChecking = false;
          this.fixIntegerDivisionAccuracy = null;
          this.warnVarUsage = true;
          this.onIstanbulCoverageVariable = null;
          this.removeIstanbulCoverage = false;

          if (settings) {
            for (var p in settings) {
              if (!settings.hasOwnProperty(p)) continue;
              if (!this.hasOwnProperty(p)) continue;
              this[p] = settings[p];
            }
          }

          this.literalTypes = {};
          this.validate();
          this._string = null;
          this._internalVariableNames = {};
        }

        _createClass(FunctionNode, [{
          key: "validate",
          value: function validate() {
            if (typeof this.source !== 'string' && !this.ast) {
              throw new Error('this.source not a string');
            }

            if (!this.ast && !utils.isFunctionString(this.source)) {
              throw new Error('this.source not a function string');
            }

            if (!this.name) {
              throw new Error('this.name could not be set');
            }

            if (this.argumentTypes.length > 0 && this.argumentTypes.length !== this.argumentNames.length) {
              throw new Error("argumentTypes count of ".concat(this.argumentTypes.length, " exceeds ").concat(this.argumentNames.length));
            }

            if (this.output.length < 1) {
              throw new Error('this.output is not big enough');
            }
          }
        }, {
          key: "isIdentifierConstant",
          value: function isIdentifierConstant(name) {
            if (!this.constants) return false;
            return this.constants.hasOwnProperty(name);
          }
        }, {
          key: "isInput",
          value: function isInput(argumentName) {
            return this.argumentTypes[this.argumentNames.indexOf(argumentName)] === 'Input';
          }
        }, {
          key: "pushState",
          value: function pushState(state) {
            this.states.push(state);
          }
        }, {
          key: "popState",
          value: function popState(state) {
            if (this.state !== state) {
              throw new Error("Cannot popState ".concat(state, " when in ").concat(this.state));
            }

            this.states.pop();
          }
        }, {
          key: "isState",
          value: function isState(state) {
            return this.state === state;
          }
        }, {
          key: "astMemberExpressionUnroll",
          value: function astMemberExpressionUnroll(ast) {
            if (ast.type === 'Identifier') {
              return ast.name;
            } else if (ast.type === 'ThisExpression') {
              return 'this';
            }

            if (ast.type === 'MemberExpression') {
              if (ast.object && ast.property) {
                if (ast.object.hasOwnProperty('name') && ast.object.name[0] === '_') {
                  return this.astMemberExpressionUnroll(ast.property);
                }

                return this.astMemberExpressionUnroll(ast.object) + '.' + this.astMemberExpressionUnroll(ast.property);
              }
            }

            if (ast.hasOwnProperty('expressions')) {
              var firstExpression = ast.expressions[0];

              if (firstExpression.type === 'Literal' && firstExpression.value === 0 && ast.expressions.length === 2) {
                return this.astMemberExpressionUnroll(ast.expressions[1]);
              }
            }

            throw this.astErrorOutput('Unknown astMemberExpressionUnroll', ast);
          }
        }, {
          key: "getJsAST",
          value: function getJsAST(inParser) {
            if (this.ast) {
              return this.ast;
            }

            if (_typeof(this.source) === 'object') {
              this.traceFunctionAST(this.source);
              return this.ast = this.source;
            }

            inParser = inParser || acorn;

            if (inParser === null) {
              throw new Error('Missing JS to AST parser');
            }

            var ast = Object.freeze(inParser.parse("const parser_".concat(this.name, " = ").concat(this.source, ";"), {
              locations: true
            }));
            var functionAST = ast.body[0].declarations[0].init;
            this.traceFunctionAST(functionAST);

            if (!ast) {
              throw new Error('Failed to parse JS code');
            }

            return this.ast = functionAST;
          }
        }, {
          key: "traceFunctionAST",
          value: function traceFunctionAST(ast) {
            var _ref = new FunctionTracer(ast),
                contexts = _ref.contexts,
                declarations = _ref.declarations,
                functions = _ref.functions,
                identifiers = _ref.identifiers,
                functionCalls = _ref.functionCalls;

            this.contexts = contexts;
            this.identifiers = identifiers;
            this.functionCalls = functionCalls;
            this.declarations = [];
            this.functions = functions;

            for (var i = 0; i < declarations.length; i++) {
              var declaration = declarations[i];
              var _ast = declaration.ast,
                  context = declaration.context,
                  _name5 = declaration.name,
                  origin = declaration.origin,
                  forceInteger = declaration.forceInteger,
                  assignable = declaration.assignable;
              var init = _ast.init;
              var dependencies = this.getDependencies(init);
              var valueType = null;

              if (forceInteger) {
                valueType = 'Integer';
              } else {
                if (init) {
                  var realType = this.getType(init);

                  switch (realType) {
                    case 'Integer':
                    case 'Float':
                    case 'Number':
                      if (init.type === 'MemberExpression') {
                        valueType = realType;
                      } else {
                        valueType = 'Number';
                      }

                      break;

                    case 'LiteralInteger':
                      valueType = 'Number';
                      break;

                    default:
                      valueType = realType;
                  }
                }
              }

              this.declarations.push({
                valueType: valueType,
                dependencies: dependencies,
                isSafe: this.isSafeDependencies(dependencies),
                ast: _ast,
                name: _name5,
                context: context,
                origin: origin,
                assignable: assignable
              });
            }

            for (var _i9 = 0; _i9 < functions.length; _i9++) {
              this.onNestedFunction(functions[_i9]);
            }
          }
        }, {
          key: "getDeclaration",
          value: function getDeclaration(ast) {
            for (var i = 0; i < this.identifiers.length; i++) {
              var identifier = this.identifiers[i];

              if (ast === identifier.ast && identifier.context.hasOwnProperty(ast.name)) {
                for (var j = 0; j < this.declarations.length; j++) {
                  var declaration = this.declarations[j];

                  if (declaration.name === ast.name && declaration.context[ast.name] === identifier.context[ast.name]) {
                    return declaration;
                  }
                }
              }
            }

            return null;
          }
        }, {
          key: "getVariableType",
          value: function getVariableType(ast) {
            if (ast.type !== 'Identifier') {
              throw new Error("ast of ".concat(ast.type, " not \"Identifier\""));
            }

            var type = null;
            var argumentIndex = this.argumentNames.indexOf(ast.name);

            if (argumentIndex === -1) {
              var declaration = this.getDeclaration(ast);

              if (declaration) {
                return declaration.valueType;
              }
            } else {
              var argumentType = this.argumentTypes[argumentIndex];

              if (argumentType) {
                type = argumentType;
              }
            }

            if (!type && this.strictTypingChecking) {
              throw new Error("Declaration of ".concat(name, " not found"));
            }

            return type;
          }
        }, {
          key: "getLookupType",
          value: function getLookupType(type) {
            if (!typeLookupMap.hasOwnProperty(type)) {
              throw new Error("unknown typeLookupMap ".concat(type));
            }

            return typeLookupMap[type];
          }
        }, {
          key: "getConstantType",
          value: function getConstantType(constantName) {
            if (this.constantTypes[constantName]) {
              var type = this.constantTypes[constantName];

              if (type === 'Float') {
                return 'Number';
              } else {
                return type;
              }
            }

            throw new Error("Type for constant \"".concat(constantName, "\" not declared"));
          }
        }, {
          key: "toString",
          value: function toString() {
            if (this._string) return this._string;
            return this._string = this.astGeneric(this.getJsAST(), []).join('').trim();
          }
        }, {
          key: "toJSON",
          value: function toJSON() {
            var settings = {
              source: this.source,
              name: this.name,
              constants: this.constants,
              constantTypes: this.constantTypes,
              isRootKernel: this.isRootKernel,
              isSubKernel: this.isSubKernel,
              debug: this.debug,
              output: this.output,
              loopMaxIterations: this.loopMaxIterations,
              argumentNames: this.argumentNames,
              argumentTypes: this.argumentTypes,
              argumentSizes: this.argumentSizes,
              returnType: this.returnType,
              leadingReturnStatement: this.leadingReturnStatement,
              followingReturnStatement: this.followingReturnStatement
            };
            return {
              ast: this.ast,
              settings: settings
            };
          }
        }, {
          key: "getType",
          value: function getType(ast) {
            if (Array.isArray(ast)) {
              return this.getType(ast[ast.length - 1]);
            }

            switch (ast.type) {
              case 'BlockStatement':
                return this.getType(ast.body);

              case 'ArrayExpression':
                return "Array(".concat(ast.elements.length, ")");

              case 'Literal':
                var literalKey = this.astKey(ast);

                if (this.literalTypes[literalKey]) {
                  return this.literalTypes[literalKey];
                }

                if (Number.isInteger(ast.value)) {
                  return 'LiteralInteger';
                } else if (ast.value === true || ast.value === false) {
                  return 'Boolean';
                } else {
                  return 'Number';
                }

              case 'AssignmentExpression':
                return this.getType(ast.left);

              case 'CallExpression':
                if (this.isAstMathFunction(ast)) {
                  return 'Number';
                }

                if (!ast.callee || !ast.callee.name) {
                  if (ast.callee.type === 'SequenceExpression' && ast.callee.expressions[ast.callee.expressions.length - 1].property.name) {
                    var functionName = ast.callee.expressions[ast.callee.expressions.length - 1].property.name;
                    this.inferArgumentTypesIfNeeded(functionName, ast.arguments);
                    return this.lookupReturnType(functionName, ast, this);
                  }

                  throw this.astErrorOutput('Unknown call expression', ast);
                }

                if (ast.callee && ast.callee.name) {
                  var _functionName = ast.callee.name;
                  this.inferArgumentTypesIfNeeded(_functionName, ast.arguments);
                  return this.lookupReturnType(_functionName, ast, this);
                }

                throw this.astErrorOutput("Unhandled getType Type \"".concat(ast.type, "\""), ast);

              case 'BinaryExpression':
                switch (ast.operator) {
                  case '%':
                  case '/':
                    if (this.fixIntegerDivisionAccuracy) {
                      return 'Number';
                    } else {
                      break;
                    }

                  case '>':
                  case '<':
                    return 'Boolean';

                  case '&':
                  case '|':
                  case '^':
                  case '<<':
                  case '>>':
                  case '>>>':
                    return 'Integer';
                }

                var type = this.getType(ast.left);
                if (this.isState('skip-literal-correction')) return type;

                if (type === 'LiteralInteger') {
                  var rightType = this.getType(ast.right);

                  if (rightType === 'LiteralInteger') {
                    if (ast.left.value % 1 === 0) {
                      return 'Integer';
                    } else {
                      return 'Float';
                    }
                  }

                  return rightType;
                }

                return typeLookupMap[type] || type;

              case 'UpdateExpression':
                return this.getType(ast.argument);

              case 'UnaryExpression':
                if (ast.operator === '~') {
                  return 'Integer';
                }

                return this.getType(ast.argument);

              case 'VariableDeclaration':
                {
                  var declarations = ast.declarations;
                  var lastType;

                  for (var i = 0; i < declarations.length; i++) {
                    var _declaration = declarations[i];
                    lastType = this.getType(_declaration);
                  }

                  if (!lastType) {
                    throw this.astErrorOutput("Unable to find type for declaration", ast);
                  }

                  return lastType;
                }

              case 'VariableDeclarator':
                var declaration = this.getDeclaration(ast.id);

                if (!declaration) {
                  throw this.astErrorOutput("Unable to find declarator", ast);
                }

                if (!declaration.valueType) {
                  throw this.astErrorOutput("Unable to find declarator valueType", ast);
                }

                return declaration.valueType;

              case 'Identifier':
                if (ast.name === 'Infinity') {
                  return 'Number';
                }

                if (this.isAstVariable(ast)) {
                  var signature = this.getVariableSignature(ast);

                  if (signature === 'value') {
                    var _type = this.getVariableType(ast);

                    if (!_type) {
                      throw this.astErrorOutput("Unable to find identifier valueType", ast);
                    }

                    return _type;
                  }
                }

                var origin = this.findIdentifierOrigin(ast);

                if (origin && origin.init) {
                  return this.getType(origin.init);
                }

                return null;

              case 'ReturnStatement':
                return this.getType(ast.argument);

              case 'MemberExpression':
                if (this.isAstMathFunction(ast)) {
                  switch (ast.property.name) {
                    case 'ceil':
                      return 'Integer';

                    case 'floor':
                      return 'Integer';

                    case 'round':
                      return 'Integer';
                  }

                  return 'Number';
                }

                if (this.isAstVariable(ast)) {
                  var variableSignature = this.getVariableSignature(ast);

                  switch (variableSignature) {
                    case 'value[]':
                      return this.getLookupType(this.getVariableType(ast.object));

                    case 'value[][]':
                      return this.getLookupType(this.getVariableType(ast.object.object));

                    case 'value[][][]':
                      return this.getLookupType(this.getVariableType(ast.object.object.object));

                    case 'value[][][][]':
                      return this.getLookupType(this.getVariableType(ast.object.object.object.object));

                    case 'value.thread.value':
                    case 'this.thread.value':
                      return 'Integer';

                    case 'this.output.value':
                      return this.dynamicOutput ? 'Integer' : 'LiteralInteger';

                    case 'this.constants.value':
                      return this.getConstantType(ast.property.name);

                    case 'this.constants.value[]':
                      return this.getLookupType(this.getConstantType(ast.object.property.name));

                    case 'this.constants.value[][]':
                      return this.getLookupType(this.getConstantType(ast.object.object.property.name));

                    case 'this.constants.value[][][]':
                      return this.getLookupType(this.getConstantType(ast.object.object.object.property.name));

                    case 'this.constants.value[][][][]':
                      return this.getLookupType(this.getConstantType(ast.object.object.object.object.property.name));

                    case 'fn()[]':
                      return this.getLookupType(this.getType(ast.object));

                    case 'fn()[][]':
                      return this.getLookupType(this.getType(ast.object));

                    case 'fn()[][][]':
                      return this.getLookupType(this.getType(ast.object));

                    case 'value.value':
                      if (this.isAstMathVariable(ast)) {
                        return 'Number';
                      }

                      switch (ast.property.name) {
                        case 'r':
                          return this.getLookupType(this.getVariableType(ast.object));

                        case 'g':
                          return this.getLookupType(this.getVariableType(ast.object));

                        case 'b':
                          return this.getLookupType(this.getVariableType(ast.object));

                        case 'a':
                          return this.getLookupType(this.getVariableType(ast.object));
                      }

                    case '[][]':
                      return 'Number';
                  }

                  throw this.astErrorOutput('Unhandled getType MemberExpression', ast);
                }

                throw this.astErrorOutput('Unhandled getType MemberExpression', ast);

              case 'ConditionalExpression':
                return this.getType(ast.consequent);

              case 'FunctionDeclaration':
              case 'FunctionExpression':
                var lastReturn = this.findLastReturn(ast.body);

                if (lastReturn) {
                  return this.getType(lastReturn);
                }

                return null;

              case 'IfStatement':
                return this.getType(ast.consequent);

              case 'SequenceExpression':
                return this.getType(ast.expressions[ast.expressions.length - 1]);

              default:
                throw this.astErrorOutput("Unhandled getType Type \"".concat(ast.type, "\""), ast);
            }
          }
        }, {
          key: "inferArgumentTypesIfNeeded",
          value: function inferArgumentTypesIfNeeded(functionName, args) {
            for (var i = 0; i < args.length; i++) {
              if (!this.needsArgumentType(functionName, i)) continue;
              var type = this.getType(args[i]);

              if (!type) {
                throw this.astErrorOutput("Unable to infer argument ".concat(i), args[i]);
              }

              this.assignArgumentType(functionName, i, type);
            }
          }
        }, {
          key: "isAstMathVariable",
          value: function isAstMathVariable(ast) {
            var mathProperties = ['E', 'PI', 'SQRT2', 'SQRT1_2', 'LN2', 'LN10', 'LOG2E', 'LOG10E'];
            return ast.type === 'MemberExpression' && ast.object && ast.object.type === 'Identifier' && ast.object.name === 'Math' && ast.property && ast.property.type === 'Identifier' && mathProperties.indexOf(ast.property.name) > -1;
          }
        }, {
          key: "isAstMathFunction",
          value: function isAstMathFunction(ast) {
            var mathFunctions = ['abs', 'acos', 'asin', 'atan', 'atan2', 'ceil', 'cos', 'exp', 'floor', 'log', 'log2', 'max', 'min', 'pow', 'random', 'round', 'sign', 'sin', 'sqrt', 'tan'];
            return ast.type === 'CallExpression' && ast.callee && ast.callee.type === 'MemberExpression' && ast.callee.object && ast.callee.object.type === 'Identifier' && ast.callee.object.name === 'Math' && ast.callee.property && ast.callee.property.type === 'Identifier' && mathFunctions.indexOf(ast.callee.property.name) > -1;
          }
        }, {
          key: "isAstVariable",
          value: function isAstVariable(ast) {
            return ast.type === 'Identifier' || ast.type === 'MemberExpression';
          }
        }, {
          key: "isSafe",
          value: function isSafe(ast) {
            return this.isSafeDependencies(this.getDependencies(ast));
          }
        }, {
          key: "isSafeDependencies",
          value: function isSafeDependencies(dependencies) {
            return dependencies && dependencies.every ? dependencies.every(function (dependency) {
              return dependency.isSafe;
            }) : true;
          }
        }, {
          key: "getDependencies",
          value: function getDependencies(ast, dependencies, isNotSafe) {
            if (!dependencies) {
              dependencies = [];
            }

            if (!ast) return null;

            if (Array.isArray(ast)) {
              for (var i = 0; i < ast.length; i++) {
                this.getDependencies(ast[i], dependencies, isNotSafe);
              }

              return dependencies;
            }

            switch (ast.type) {
              case 'AssignmentExpression':
                this.getDependencies(ast.left, dependencies, isNotSafe);
                this.getDependencies(ast.right, dependencies, isNotSafe);
                return dependencies;

              case 'ConditionalExpression':
                this.getDependencies(ast.test, dependencies, isNotSafe);
                this.getDependencies(ast.alternate, dependencies, isNotSafe);
                this.getDependencies(ast.consequent, dependencies, isNotSafe);
                return dependencies;

              case 'Literal':
                dependencies.push({
                  origin: 'literal',
                  value: ast.value,
                  isSafe: isNotSafe === true ? false : ast.value > -Infinity && ast.value < Infinity && !isNaN(ast.value)
                });
                break;

              case 'VariableDeclarator':
                return this.getDependencies(ast.init, dependencies, isNotSafe);

              case 'Identifier':
                var declaration = this.getDeclaration(ast);

                if (declaration) {
                  dependencies.push({
                    name: ast.name,
                    origin: 'declaration',
                    isSafe: isNotSafe ? false : this.isSafeDependencies(declaration.dependencies)
                  });
                } else if (this.argumentNames.indexOf(ast.name) > -1) {
                  dependencies.push({
                    name: ast.name,
                    origin: 'argument',
                    isSafe: false
                  });
                } else if (this.strictTypingChecking) {
                  throw new Error("Cannot find identifier origin \"".concat(ast.name, "\""));
                }

                break;

              case 'FunctionDeclaration':
                return this.getDependencies(ast.body.body[ast.body.body.length - 1], dependencies, isNotSafe);

              case 'ReturnStatement':
                return this.getDependencies(ast.argument, dependencies);

              case 'BinaryExpression':
                isNotSafe = ast.operator === '/' || ast.operator === '*';
                this.getDependencies(ast.left, dependencies, isNotSafe);
                this.getDependencies(ast.right, dependencies, isNotSafe);
                return dependencies;

              case 'UnaryExpression':
              case 'UpdateExpression':
                return this.getDependencies(ast.argument, dependencies, isNotSafe);

              case 'VariableDeclaration':
                return this.getDependencies(ast.declarations, dependencies, isNotSafe);

              case 'ArrayExpression':
                dependencies.push({
                  origin: 'declaration',
                  isSafe: true
                });
                return dependencies;

              case 'CallExpression':
                dependencies.push({
                  origin: 'function',
                  isSafe: true
                });
                return dependencies;

              case 'MemberExpression':
                var details = this.getMemberExpressionDetails(ast);

                switch (details.signature) {
                  case 'value[]':
                    this.getDependencies(ast.object, dependencies, isNotSafe);
                    break;

                  case 'value[][]':
                    this.getDependencies(ast.object.object, dependencies, isNotSafe);
                    break;

                  case 'value[][][]':
                    this.getDependencies(ast.object.object.object, dependencies, isNotSafe);
                    break;

                  case 'this.output.value':
                    if (this.dynamicOutput) {
                      dependencies.push({
                        name: details.name,
                        origin: 'output',
                        isSafe: false
                      });
                    }

                    break;
                }

                if (details) {
                  if (details.property) {
                    this.getDependencies(details.property, dependencies, isNotSafe);
                  }

                  if (details.xProperty) {
                    this.getDependencies(details.xProperty, dependencies, isNotSafe);
                  }

                  if (details.yProperty) {
                    this.getDependencies(details.yProperty, dependencies, isNotSafe);
                  }

                  if (details.zProperty) {
                    this.getDependencies(details.zProperty, dependencies, isNotSafe);
                  }

                  return dependencies;
                }

              case 'SequenceExpression':
                return this.getDependencies(ast.expressions, dependencies, isNotSafe);

              default:
                throw this.astErrorOutput("Unhandled type ".concat(ast.type, " in getDependencies"), ast);
            }

            return dependencies;
          }
        }, {
          key: "getVariableSignature",
          value: function getVariableSignature(ast) {
            if (!this.isAstVariable(ast)) {
              throw new Error("ast of type \"".concat(ast.type, "\" is not a variable signature"));
            }

            if (ast.type === 'Identifier') {
              return 'value';
            }

            var signature = [];

            while (true) {
              if (!ast) break;

              if (ast.computed) {
                signature.push('[]');
              } else if (ast.type === 'ThisExpression') {
                signature.unshift('this');
              } else if (ast.property && ast.property.name) {
                if (ast.property.name === 'x' || ast.property.name === 'y' || ast.property.name === 'z') {
                  signature.unshift('.value');
                } else if (ast.property.name === 'constants' || ast.property.name === 'thread' || ast.property.name === 'output') {
                  signature.unshift('.' + ast.property.name);
                } else {
                  signature.unshift('.value');
                }
              } else if (ast.name) {
                signature.unshift('value');
              } else if (ast.callee && ast.callee.name) {
                signature.unshift('fn()');
              } else if (ast.elements) {
                signature.unshift('[]');
              } else {
                signature.unshift('unknown');
              }

              ast = ast.object;
            }

            var signatureString = signature.join('');
            var allowedExpressions = ['value', 'value[]', 'value[][]', 'value[][][]', 'value[][][][]', 'value.value', 'value.value[]', 'value.value[][]', 'value.thread.value', 'this.thread.value', 'this.output.value', 'this.constants.value', 'this.constants.value[]', 'this.constants.value[][]', 'this.constants.value[][][]', 'this.constants.value[][][][]', 'fn()[]', 'fn()[][]', 'fn()[][][]', '[][]'];

            if (allowedExpressions.indexOf(signatureString) > -1) {
              return signatureString;
            }

            return null;
          }
        }, {
          key: "build",
          value: function build() {
            return this.toString().length > 0;
          }
        }, {
          key: "astGeneric",
          value: function astGeneric(ast, retArr) {
            if (ast === null) {
              throw this.astErrorOutput('NULL ast', ast);
            } else {
              if (Array.isArray(ast)) {
                for (var i = 0; i < ast.length; i++) {
                  this.astGeneric(ast[i], retArr);
                }

                return retArr;
              }

              switch (ast.type) {
                case 'FunctionDeclaration':
                  return this.astFunctionDeclaration(ast, retArr);

                case 'FunctionExpression':
                  return this.astFunctionExpression(ast, retArr);

                case 'ReturnStatement':
                  return this.astReturnStatement(ast, retArr);

                case 'Literal':
                  return this.astLiteral(ast, retArr);

                case 'BinaryExpression':
                  return this.astBinaryExpression(ast, retArr);

                case 'Identifier':
                  return this.astIdentifierExpression(ast, retArr);

                case 'AssignmentExpression':
                  return this.astAssignmentExpression(ast, retArr);

                case 'ExpressionStatement':
                  return this.astExpressionStatement(ast, retArr);

                case 'EmptyStatement':
                  return this.astEmptyStatement(ast, retArr);

                case 'BlockStatement':
                  return this.astBlockStatement(ast, retArr);

                case 'IfStatement':
                  return this.astIfStatement(ast, retArr);

                case 'SwitchStatement':
                  return this.astSwitchStatement(ast, retArr);

                case 'BreakStatement':
                  return this.astBreakStatement(ast, retArr);

                case 'ContinueStatement':
                  return this.astContinueStatement(ast, retArr);

                case 'ForStatement':
                  return this.astForStatement(ast, retArr);

                case 'WhileStatement':
                  return this.astWhileStatement(ast, retArr);

                case 'DoWhileStatement':
                  return this.astDoWhileStatement(ast, retArr);

                case 'VariableDeclaration':
                  return this.astVariableDeclaration(ast, retArr);

                case 'VariableDeclarator':
                  return this.astVariableDeclarator(ast, retArr);

                case 'ThisExpression':
                  return this.astThisExpression(ast, retArr);

                case 'SequenceExpression':
                  return this.astSequenceExpression(ast, retArr);

                case 'UnaryExpression':
                  return this.astUnaryExpression(ast, retArr);

                case 'UpdateExpression':
                  return this.astUpdateExpression(ast, retArr);

                case 'LogicalExpression':
                  return this.astLogicalExpression(ast, retArr);

                case 'MemberExpression':
                  return this.astMemberExpression(ast, retArr);

                case 'CallExpression':
                  return this.astCallExpression(ast, retArr);

                case 'ArrayExpression':
                  return this.astArrayExpression(ast, retArr);

                case 'DebuggerStatement':
                  return this.astDebuggerStatement(ast, retArr);

                case 'ConditionalExpression':
                  return this.astConditionalExpression(ast, retArr);
              }

              throw this.astErrorOutput('Unknown ast type : ' + ast.type, ast);
            }
          }
        }, {
          key: "astErrorOutput",
          value: function astErrorOutput(error, ast) {
            if (typeof this.source !== 'string') {
              return new Error(error);
            }

            var debugString = utils.getAstString(this.source, ast);
            var leadingSource = this.source.substr(ast.start);
            var splitLines = leadingSource.split(/\n/);
            var lineBefore = splitLines.length > 0 ? splitLines[splitLines.length - 1] : 0;
            return new Error("".concat(error, " on line ").concat(splitLines.length, ", position ").concat(lineBefore.length, ":\n ").concat(debugString));
          }
        }, {
          key: "astDebuggerStatement",
          value: function astDebuggerStatement(arrNode, retArr) {
            return retArr;
          }
        }, {
          key: "astConditionalExpression",
          value: function astConditionalExpression(ast, retArr) {
            if (ast.type !== 'ConditionalExpression') {
              throw this.astErrorOutput('Not a conditional expression', ast);
            }

            retArr.push('(');
            this.astGeneric(ast.test, retArr);
            retArr.push('?');
            this.astGeneric(ast.consequent, retArr);
            retArr.push(':');
            this.astGeneric(ast.alternate, retArr);
            retArr.push(')');
            return retArr;
          }
        }, {
          key: "astFunction",
          value: function astFunction(ast, retArr) {
            throw new Error("\"astFunction\" not defined on ".concat(this.constructor.name));
          }
        }, {
          key: "astFunctionDeclaration",
          value: function astFunctionDeclaration(ast, retArr) {
            if (this.isChildFunction(ast)) {
              return retArr;
            }

            return this.astFunction(ast, retArr);
          }
        }, {
          key: "astFunctionExpression",
          value: function astFunctionExpression(ast, retArr) {
            if (this.isChildFunction(ast)) {
              return retArr;
            }

            return this.astFunction(ast, retArr);
          }
        }, {
          key: "isChildFunction",
          value: function isChildFunction(ast) {
            for (var i = 0; i < this.functions.length; i++) {
              if (this.functions[i] === ast) {
                return true;
              }
            }

            return false;
          }
        }, {
          key: "astReturnStatement",
          value: function astReturnStatement(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astLiteral",
          value: function astLiteral(ast, retArr) {
            this.literalTypes[this.astKey(ast)] = 'Number';
            return retArr;
          }
        }, {
          key: "astBinaryExpression",
          value: function astBinaryExpression(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astIdentifierExpression",
          value: function astIdentifierExpression(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astAssignmentExpression",
          value: function astAssignmentExpression(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astExpressionStatement",
          value: function astExpressionStatement(esNode, retArr) {
            this.astGeneric(esNode.expression, retArr);
            retArr.push(';');
            return retArr;
          }
        }, {
          key: "astEmptyStatement",
          value: function astEmptyStatement(eNode, retArr) {
            return retArr;
          }
        }, {
          key: "astBlockStatement",
          value: function astBlockStatement(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astIfStatement",
          value: function astIfStatement(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astSwitchStatement",
          value: function astSwitchStatement(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astBreakStatement",
          value: function astBreakStatement(brNode, retArr) {
            retArr.push('break;');
            return retArr;
          }
        }, {
          key: "astContinueStatement",
          value: function astContinueStatement(crNode, retArr) {
            retArr.push('continue;\n');
            return retArr;
          }
        }, {
          key: "astForStatement",
          value: function astForStatement(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astWhileStatement",
          value: function astWhileStatement(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astDoWhileStatement",
          value: function astDoWhileStatement(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astVariableDeclaration",
          value: function astVariableDeclaration(varDecNode, retArr) {
            var declarations = varDecNode.declarations;

            if (!declarations || !declarations[0] || !declarations[0].init) {
              throw this.astErrorOutput('Unexpected expression', varDecNode);
            }

            var result = [];
            var firstDeclaration = declarations[0];
            var init = firstDeclaration.init;
            var type = this.isState('in-for-loop-init') ? 'Integer' : this.getType(init);

            if (type === 'LiteralInteger') {
              type = 'Number';
            }

            var markupType = typeMap[type];

            if (!markupType) {
              throw this.astErrorOutput("Markup type ".concat(markupType, " not handled"), varDecNode);
            }

            var dependencies = this.getDependencies(firstDeclaration.init);
            throw new Error('remove me');
            this.declarations[firstDeclaration.id.name] = Object.freeze({
              type: type,
              dependencies: dependencies,
              isSafe: dependencies.every(function (dependency) {
                return dependency.isSafe;
              })
            });
            var initResult = ["".concat(type, " user_").concat(firstDeclaration.id.name, "=")];
            this.astGeneric(init, initResult);
            result.push(initResult.join(''));

            for (var i = 1; i < declarations.length; i++) {
              var declaration = declarations[i];
              dependencies = this.getDependencies(declaration);
              throw new Error('Remove me');
              this.declarations[declaration.id.name] = Object.freeze({
                type: type,
                dependencies: dependencies,
                isSafe: false
              });
              this.astGeneric(declaration, result);
            }

            retArr.push(retArr, result.join(','));
            retArr.push(';');
            return retArr;
          }
        }, {
          key: "astVariableDeclarator",
          value: function astVariableDeclarator(iVarDecNode, retArr) {
            this.astGeneric(iVarDecNode.id, retArr);

            if (iVarDecNode.init !== null) {
              retArr.push('=');
              this.astGeneric(iVarDecNode.init, retArr);
            }

            return retArr;
          }
        }, {
          key: "astThisExpression",
          value: function astThisExpression(ast, retArr) {
            return retArr;
          }
        }, {
          key: "isIstanbulAST",
          value: function isIstanbulAST(ast) {
            var variableSignature = this.getVariableSignature(ast);
            return variableSignature === 'value.value[]' || variableSignature === 'value.value[][]';
          }
        }, {
          key: "astSequenceExpression",
          value: function astSequenceExpression(sNode, retArr) {
            var expressions = sNode.expressions;
            var sequenceResult = [];

            for (var i = 0; i < expressions.length; i++) {
              var expression = expressions[i];

              if (this.removeIstanbulCoverage) {
                if (expression.type === 'UpdateExpression' && this.isIstanbulAST(expression.argument)) {
                  continue;
                }
              }

              var expressionResult = [];
              this.astGeneric(expression, expressionResult);
              sequenceResult.push(expressionResult.join(''));
            }

            if (sequenceResult.length > 1) {
              retArr.push('(', sequenceResult.join(','), ')');
            } else {
              retArr.push(sequenceResult[0]);
            }

            return retArr;
          }
        }, {
          key: "astUnaryExpression",
          value: function astUnaryExpression(uNode, retArr) {
            var unaryResult = this.checkAndUpconvertBitwiseUnary(uNode, retArr);

            if (unaryResult) {
              return retArr;
            }

            if (uNode.prefix) {
              retArr.push(uNode.operator);
              this.astGeneric(uNode.argument, retArr);
            } else {
              this.astGeneric(uNode.argument, retArr);
              retArr.push(uNode.operator);
            }

            return retArr;
          }
        }, {
          key: "checkAndUpconvertBitwiseUnary",
          value: function checkAndUpconvertBitwiseUnary(uNode, retArr) {}
        }, {
          key: "astUpdateExpression",
          value: function astUpdateExpression(uNode, retArr) {
            if (this.removeIstanbulCoverage) {
              var signature = this.getVariableSignature(uNode.argument);

              if (this.isIstanbulAST(uNode.argument)) {
                return retArr;
              }
            }

            if (uNode.prefix) {
              retArr.push(uNode.operator);
              this.astGeneric(uNode.argument, retArr);
            } else {
              this.astGeneric(uNode.argument, retArr);
              retArr.push(uNode.operator);
            }

            return retArr;
          }
        }, {
          key: "astLogicalExpression",
          value: function astLogicalExpression(logNode, retArr) {
            retArr.push('(');
            this.astGeneric(logNode.left, retArr);
            retArr.push(logNode.operator);
            this.astGeneric(logNode.right, retArr);
            retArr.push(')');
            return retArr;
          }
        }, {
          key: "astMemberExpression",
          value: function astMemberExpression(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astCallExpression",
          value: function astCallExpression(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astArrayExpression",
          value: function astArrayExpression(ast, retArr) {
            return retArr;
          }
        }, {
          key: "getMemberExpressionDetails",
          value: function getMemberExpressionDetails(ast) {
            if (ast.type !== 'MemberExpression') {
              throw this.astErrorOutput("Expression ".concat(ast.type, " not a MemberExpression"), ast);
            }

            var name = null;
            var type = null;
            var variableSignature = this.getVariableSignature(ast);

            switch (variableSignature) {
              case 'value':
                return null;

              case 'value.thread.value':
              case 'this.thread.value':
              case 'this.output.value':
                return {
                  signature: variableSignature,
                  type: 'Integer',
                  name: ast.property.name
                };

              case 'value[]':
                if (typeof ast.object.name !== 'string') {
                  throw this.astErrorOutput('Unexpected expression', ast);
                }

                name = ast.object.name;
                return {
                  name: name,
                  origin: 'user',
                  signature: variableSignature,
                  type: this.getVariableType(ast.object),
                  xProperty: ast.property
                };

              case 'value[][]':
                if (typeof ast.object.object.name !== 'string') {
                  throw this.astErrorOutput('Unexpected expression', ast);
                }

                name = ast.object.object.name;
                return {
                  name: name,
                  origin: 'user',
                  signature: variableSignature,
                  type: this.getVariableType(ast.object.object),
                  yProperty: ast.object.property,
                  xProperty: ast.property
                };

              case 'value[][][]':
                if (typeof ast.object.object.object.name !== 'string') {
                  throw this.astErrorOutput('Unexpected expression', ast);
                }

                name = ast.object.object.object.name;
                return {
                  name: name,
                  origin: 'user',
                  signature: variableSignature,
                  type: this.getVariableType(ast.object.object.object),
                  zProperty: ast.object.object.property,
                  yProperty: ast.object.property,
                  xProperty: ast.property
                };

              case 'value[][][][]':
                if (typeof ast.object.object.object.object.name !== 'string') {
                  throw this.astErrorOutput('Unexpected expression', ast);
                }

                name = ast.object.object.object.object.name;
                return {
                  name: name,
                  origin: 'user',
                  signature: variableSignature,
                  type: this.getVariableType(ast.object.object.object.object),
                  zProperty: ast.object.object.property,
                  yProperty: ast.object.property,
                  xProperty: ast.property
                };

              case 'value.value':
                if (typeof ast.property.name !== 'string') {
                  throw this.astErrorOutput('Unexpected expression', ast);
                }

                if (this.isAstMathVariable(ast)) {
                  name = ast.property.name;
                  return {
                    name: name,
                    origin: 'Math',
                    type: 'Number',
                    signature: variableSignature
                  };
                }

                switch (ast.property.name) {
                  case 'r':
                  case 'g':
                  case 'b':
                  case 'a':
                    name = ast.object.name;
                    return {
                      name: name,
                      property: ast.property.name,
                      origin: 'user',
                      signature: variableSignature,
                      type: 'Number'
                    };

                  default:
                    throw this.astErrorOutput('Unexpected expression', ast);
                }

              case 'this.constants.value':
                if (typeof ast.property.name !== 'string') {
                  throw this.astErrorOutput('Unexpected expression', ast);
                }

                name = ast.property.name;
                type = this.getConstantType(name);

                if (!type) {
                  throw this.astErrorOutput('Constant has no type', ast);
                }

                return {
                  name: name,
                  type: type,
                  origin: 'constants',
                  signature: variableSignature
                };

              case 'this.constants.value[]':
                if (typeof ast.object.property.name !== 'string') {
                  throw this.astErrorOutput('Unexpected expression', ast);
                }

                name = ast.object.property.name;
                type = this.getConstantType(name);

                if (!type) {
                  throw this.astErrorOutput('Constant has no type', ast);
                }

                return {
                  name: name,
                  type: type,
                  origin: 'constants',
                  signature: variableSignature,
                  xProperty: ast.property
                };

              case 'this.constants.value[][]':
                {
                  if (typeof ast.object.object.property.name !== 'string') {
                    throw this.astErrorOutput('Unexpected expression', ast);
                  }

                  name = ast.object.object.property.name;
                  type = this.getConstantType(name);

                  if (!type) {
                    throw this.astErrorOutput('Constant has no type', ast);
                  }

                  return {
                    name: name,
                    type: type,
                    origin: 'constants',
                    signature: variableSignature,
                    yProperty: ast.object.property,
                    xProperty: ast.property
                  };
                }

              case 'this.constants.value[][][]':
                {
                  if (typeof ast.object.object.object.property.name !== 'string') {
                    throw this.astErrorOutput('Unexpected expression', ast);
                  }

                  name = ast.object.object.object.property.name;
                  type = this.getConstantType(name);

                  if (!type) {
                    throw this.astErrorOutput('Constant has no type', ast);
                  }

                  return {
                    name: name,
                    type: type,
                    origin: 'constants',
                    signature: variableSignature,
                    zProperty: ast.object.object.property,
                    yProperty: ast.object.property,
                    xProperty: ast.property
                  };
                }

              case 'fn()[]':
              case '[][]':
                return {
                  signature: variableSignature,
                  property: ast.property
                };

              case 'value.value[]':
                if (this.removeIstanbulCoverage) {
                  return {
                    signature: variableSignature
                  };
                }

                if (this.onIstanbulCoverageVariable) {
                  this.onIstanbulCoverageVariable(ast.object.object.name);
                  return {
                    signature: variableSignature
                  };
                }

              case 'value.value[][]':
                if (this.removeIstanbulCoverage) {
                  return {
                    signature: variableSignature
                  };
                }

                if (this.onIstanbulCoverageVariable) {
                  this.onIstanbulCoverageVariable(ast.object.object.object.name);
                  return {
                    signature: variableSignature
                  };
                }

              default:
                throw this.astErrorOutput('Unexpected expression', ast);
            }
          }
        }, {
          key: "findIdentifierOrigin",
          value: function findIdentifierOrigin(astToFind) {
            var stack = [this.ast];

            while (stack.length > 0) {
              var atNode = stack[0];

              if (atNode.type === 'VariableDeclarator' && atNode.id && atNode.id.name && atNode.id.name === astToFind.name) {
                return atNode;
              }

              stack.shift();

              if (atNode.argument) {
                stack.push(atNode.argument);
              } else if (atNode.body) {
                stack.push(atNode.body);
              } else if (atNode.declarations) {
                stack.push(atNode.declarations);
              } else if (Array.isArray(atNode)) {
                for (var i = 0; i < atNode.length; i++) {
                  stack.push(atNode[i]);
                }
              }
            }

            return null;
          }
        }, {
          key: "findLastReturn",
          value: function findLastReturn(ast) {
            var stack = [ast || this.ast];

            while (stack.length > 0) {
              var atNode = stack.pop();

              if (atNode.type === 'ReturnStatement') {
                return atNode;
              }

              if (atNode.type === 'FunctionDeclaration') {
                continue;
              }

              if (atNode.argument) {
                stack.push(atNode.argument);
              } else if (atNode.body) {
                stack.push(atNode.body);
              } else if (atNode.declarations) {
                stack.push(atNode.declarations);
              } else if (Array.isArray(atNode)) {
                for (var i = 0; i < atNode.length; i++) {
                  stack.push(atNode[i]);
                }
              } else if (atNode.consequent) {
                stack.push(atNode.consequent);
              } else if (atNode.cases) {
                stack.push(atNode.cases);
              }
            }

            return null;
          }
        }, {
          key: "getInternalVariableName",
          value: function getInternalVariableName(name) {
            if (!this._internalVariableNames.hasOwnProperty(name)) {
              this._internalVariableNames[name] = 0;
            }

            this._internalVariableNames[name]++;

            if (this._internalVariableNames[name] === 1) {
              return name;
            }

            return name + this._internalVariableNames[name];
          }
        }, {
          key: "varWarn",
          value: function varWarn() {
            console.warn('var declarations are deprecated, weird things happen when falling back to CPU because var scope differs in javascript than in most languages.  Use const or let');
          }
        }, {
          key: "astKey",
          value: function astKey(ast) {
            var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';
            if (!ast.start || !ast.end) throw new Error('AST start and end needed');
            return "".concat(ast.start).concat(separator).concat(ast.end);
          }
        }, {
          key: "state",
          get: function get() {
            return this.states[this.states.length - 1];
          }
        }]);

        return FunctionNode;
      }();

      var typeLookupMap = {
        'Number': 'Number',
        'Float': 'Float',
        'Integer': 'Integer',
        'Array': 'Number',
        'Array(2)': 'Number',
        'Array(3)': 'Number',
        'Array(4)': 'Number',
        'Array2D': 'Number',
        'Array3D': 'Number',
        'Input': 'Number',
        'HTMLImage': 'Array(4)',
        'HTMLVideo': 'Array(4)',
        'HTMLImageArray': 'Array(4)',
        'NumberTexture': 'Number',
        'MemoryOptimizedNumberTexture': 'Number',
        'Array1D(2)': 'Array(2)',
        'Array1D(3)': 'Array(3)',
        'Array1D(4)': 'Array(4)',
        'Array2D(2)': 'Array(2)',
        'Array2D(3)': 'Array(3)',
        'Array2D(4)': 'Array(4)',
        'Array3D(2)': 'Array(2)',
        'Array3D(3)': 'Array(3)',
        'Array3D(4)': 'Array(4)',
        'ArrayTexture(1)': 'Number',
        'ArrayTexture(2)': 'Array(2)',
        'ArrayTexture(3)': 'Array(3)',
        'ArrayTexture(4)': 'Array(4)'
      };
      module.exports = {
        FunctionNode: FunctionNode
      };
    }, {
      "../utils": 113,
      "./function-tracer": 11,
      "acorn": 1
    }],
    11: [function (require, module, exports) {
      var _require11 = require('../utils'),
          utils = _require11.utils;

      var FunctionTracer =
      /*#__PURE__*/
      function () {
        function FunctionTracer(ast) {
          _classCallCheck(this, FunctionTracer);

          this.runningContexts = [];
          this.contexts = [];
          this.functionCalls = [];
          this.declarations = [];
          this.identifiers = [];
          this.functions = [];
          this.returnStatements = [];
          this.inLoopInit = false;
          this.scan(ast);
        }

        _createClass(FunctionTracer, [{
          key: "newContext",
          value: function newContext(run) {
            var newContext = Object.assign({}, this.currentContext);
            this.contexts.push(newContext);
            this.runningContexts.push(newContext);
            run();
            this.runningContexts.pop();
          }
        }, {
          key: "scan",
          value: function scan(ast) {
            var _this3 = this;

            if (!ast) return;

            if (Array.isArray(ast)) {
              for (var i = 0; i < ast.length; i++) {
                this.scan(ast[i]);
              }

              return;
            }

            switch (ast.type) {
              case 'Program':
                this.scan(ast.body);
                break;

              case 'BlockStatement':
                this.newContext(function () {
                  _this3.scan(ast.body);
                });
                break;

              case 'AssignmentExpression':
              case 'LogicalExpression':
                this.scan(ast.left);
                this.scan(ast.right);
                break;

              case 'BinaryExpression':
                this.scan(ast.left);
                this.scan(ast.right);
                break;

              case 'UpdateExpression':
              case 'UnaryExpression':
                this.scan(ast.argument);
                break;

              case 'VariableDeclaration':
                ast.declarations = utils.normalizeDeclarations(ast);
                this.scan(ast.declarations);
                break;

              case 'VariableDeclarator':
                var currentContext = this.currentContext;
                var declaration = {
                  ast: ast,
                  context: currentContext,
                  name: ast.id.name,
                  origin: 'declaration',
                  forceInteger: this.inLoopInit,
                  assignable: !this.inLoopInit && !currentContext.hasOwnProperty(ast.id.name)
                };
                currentContext[ast.id.name] = declaration;
                this.declarations.push(declaration);
                this.scan(ast.id);
                this.scan(ast.init);
                break;

              case 'FunctionExpression':
              case 'FunctionDeclaration':
                if (this.runningContexts.length === 0) {
                  this.scan(ast.body);
                } else {
                  this.functions.push(ast);
                }

                break;

              case 'IfStatement':
                this.scan(ast.test);
                this.scan(ast.consequent);
                if (ast.alternate) this.scan(ast.alternate);
                break;

              case 'ForStatement':
                this.newContext(function () {
                  _this3.inLoopInit = true;

                  _this3.scan(ast.init);

                  _this3.inLoopInit = false;

                  _this3.scan(ast.test);

                  _this3.scan(ast.update);

                  _this3.newContext(function () {
                    _this3.scan(ast.body);
                  });
                });
                break;

              case 'DoWhileStatement':
              case 'WhileStatement':
                this.newContext(function () {
                  _this3.scan(ast.body);

                  _this3.scan(ast.test);
                });
                break;

              case 'Identifier':
                this.identifiers.push({
                  context: this.currentContext,
                  ast: ast
                });
                break;

              case 'ReturnStatement':
                this.returnStatements.push(ast);
                this.scan(ast.argument);
                break;

              case 'MemberExpression':
                this.scan(ast.object);
                this.scan(ast.property);
                break;

              case 'ExpressionStatement':
                this.scan(ast.expression);
                break;

              case 'SequenceExpression':
                this.scan(ast.expressions);
                break;

              case 'CallExpression':
                this.functionCalls.push({
                  context: this.currentContext,
                  ast: ast
                });
                this.scan(ast.arguments);
                break;

              case 'ArrayExpression':
                this.scan(ast.elements);
                break;

              case 'ConditionalExpression':
                this.scan(ast.test);
                this.scan(ast.alternate);
                this.scan(ast.consequent);
                break;

              case 'SwitchStatement':
                this.scan(ast.discriminant);
                this.scan(ast.cases);
                break;

              case 'SwitchCase':
                this.scan(ast.test);
                this.scan(ast.consequent);
                break;

              case 'ThisExpression':
              case 'Literal':
              case 'DebuggerStatement':
              case 'EmptyStatement':
              case 'BreakStatement':
              case 'ContinueStatement':
                break;

              default:
                throw new Error("unhandled type \"".concat(ast.type, "\""));
            }
          }
        }, {
          key: "currentContext",
          get: function get() {
            return this.runningContexts.length > 0 ? this.runningContexts[this.runningContexts.length - 1] : null;
          }
        }]);

        return FunctionTracer;
      }();

      module.exports = {
        FunctionTracer: FunctionTracer
      };
    }, {
      "../utils": 113
    }],
    12: [function (require, module, exports) {
      var _require12 = require('gl-wiretap'),
          glWiretap = _require12.glWiretap;

      var _require13 = require('../../utils'),
          utils = _require13.utils;

      function toStringWithoutUtils(fn) {
        return fn.toString().replace('=>', '').replace(/^function /, '').replace(/utils[.]/g, '/*utils.*/');
      }

      function glKernelString(Kernel, args, originKernel, setupContextString, destroyContextString) {
        if (!originKernel.built) {
          originKernel.build.apply(originKernel, args);
        }

        args = args ? Array.from(args).map(function (arg) {
          switch (_typeof(arg)) {
            case 'boolean':
              return new Boolean(arg);

            case 'number':
              return new Number(arg);

            default:
              return arg;
          }
        }) : null;
        var uploadedValues = [];
        var postResult = [];
        var context = glWiretap(originKernel.context, {
          useTrackablePrimitives: true,
          onReadPixels: function onReadPixels(targetName) {
            if (kernel.subKernels) {
              if (!subKernelsResultVariableSetup) {
                postResult.push("    const result = { result: ".concat(getRenderString(targetName, kernel), " };"));
                subKernelsResultVariableSetup = true;
              } else {
                var property = kernel.subKernels[subKernelsResultIndex++].property;
                postResult.push("    result".concat(isNaN(property) ? '.' + property : "[".concat(property, "]"), " = ").concat(getRenderString(targetName, kernel), ";"));
              }

              if (subKernelsResultIndex === kernel.subKernels.length) {
                postResult.push('    return result;');
              }

              return;
            }

            if (targetName) {
              postResult.push("    return ".concat(getRenderString(targetName, kernel), ";"));
            } else {
              postResult.push("    return null;");
            }
          },
          onUnrecognizedArgumentLookup: function onUnrecognizedArgumentLookup(argument) {
            var argumentName = findKernelValue(argument, kernel.kernelArguments, [], context, uploadedValues);

            if (argumentName) {
              return argumentName;
            }

            var constantName = findKernelValue(argument, kernel.kernelConstants, constants ? Object.keys(constants).map(function (key) {
              return constants[key];
            }) : [], context, uploadedValues);

            if (constantName) {
              return constantName;
            }

            return null;
          }
        });
        var subKernelsResultVariableSetup = false;
        var subKernelsResultIndex = 0;
        var source = originKernel.source,
            canvas = originKernel.canvas,
            output = originKernel.output,
            pipeline = originKernel.pipeline,
            graphical = originKernel.graphical,
            loopMaxIterations = originKernel.loopMaxIterations,
            constants = originKernel.constants,
            optimizeFloatMemory = originKernel.optimizeFloatMemory,
            precision = originKernel.precision,
            fixIntegerDivisionAccuracy = originKernel.fixIntegerDivisionAccuracy,
            functions = originKernel.functions,
            nativeFunctions = originKernel.nativeFunctions,
            subKernels = originKernel.subKernels,
            immutable = originKernel.immutable,
            argumentTypes = originKernel.argumentTypes,
            constantTypes = originKernel.constantTypes,
            kernelArguments = originKernel.kernelArguments,
            kernelConstants = originKernel.kernelConstants,
            tactic = originKernel.tactic;
        var kernel = new Kernel(source, {
          canvas: canvas,
          context: context,
          checkContext: false,
          output: output,
          pipeline: pipeline,
          graphical: graphical,
          loopMaxIterations: loopMaxIterations,
          constants: constants,
          optimizeFloatMemory: optimizeFloatMemory,
          precision: precision,
          fixIntegerDivisionAccuracy: fixIntegerDivisionAccuracy,
          functions: functions,
          nativeFunctions: nativeFunctions,
          subKernels: subKernels,
          immutable: immutable,
          argumentTypes: argumentTypes,
          constantTypes: constantTypes,
          tactic: tactic
        });
        var result = [];
        context.setIndent(2);
        kernel.build.apply(kernel, args);
        result.push(context.toString());
        context.reset();
        kernel.kernelArguments.forEach(function (kernelArgument, i) {
          switch (kernelArgument.type) {
            case 'Integer':
            case 'Boolean':
            case 'Number':
            case 'Float':
            case 'Array':
            case 'Array(2)':
            case 'Array(3)':
            case 'Array(4)':
            case 'HTMLImage':
            case 'HTMLVideo':
              context.insertVariable("uploadValue_".concat(kernelArgument.name), kernelArgument.uploadValue);
              break;

            case 'HTMLImageArray':
              for (var imageIndex = 0; imageIndex < args[i].length; imageIndex++) {
                var arg = args[i];
                context.insertVariable("uploadValue_".concat(kernelArgument.name, "[").concat(imageIndex, "]"), arg[imageIndex]);
              }

              break;

            case 'Input':
              context.insertVariable("uploadValue_".concat(kernelArgument.name), kernelArgument.uploadValue);
              break;

            case 'MemoryOptimizedNumberTexture':
            case 'NumberTexture':
            case 'Array1D(2)':
            case 'Array1D(3)':
            case 'Array1D(4)':
            case 'Array2D(2)':
            case 'Array2D(3)':
            case 'Array2D(4)':
            case 'Array3D(2)':
            case 'Array3D(3)':
            case 'Array3D(4)':
            case 'ArrayTexture(1)':
            case 'ArrayTexture(2)':
            case 'ArrayTexture(3)':
            case 'ArrayTexture(4)':
              context.insertVariable("uploadValue_".concat(kernelArgument.name), args[i].texture);
              break;

            default:
              throw new Error("unhandled kernelArgumentType insertion for glWiretap of type ".concat(kernelArgument.type));
          }
        });
        result.push('/** start of injected functions **/');
        result.push("function ".concat(toStringWithoutUtils(utils.flattenTo)));
        result.push("function ".concat(toStringWithoutUtils(utils.flatten2dArrayTo)));
        result.push("function ".concat(toStringWithoutUtils(utils.flatten3dArrayTo)));
        result.push("function ".concat(toStringWithoutUtils(utils.flatten4dArrayTo)));
        result.push("function ".concat(toStringWithoutUtils(utils.isArray)));

        if (kernel.renderOutput !== kernel.renderTexture && kernel.formatValues) {
          result.push("  const renderOutput = function ".concat(toStringWithoutUtils(kernel.formatValues), ";"));
        }

        result.push('/** end of injected functions **/');
        result.push("  const innerKernel = function (".concat(kernel.kernelArguments.map(function (kernelArgument) {
          return kernelArgument.varName;
        }).join(', '), ") {"));
        context.setIndent(4);
        kernel.run.apply(kernel, args);

        if (kernel.renderKernels) {
          kernel.renderKernels();
        } else if (kernel.renderOutput) {
          kernel.renderOutput();
        }

        result.push('    /** start setup uploads for kernel values **/');
        kernel.kernelArguments.forEach(function (kernelArgument) {
          result.push('    ' + kernelArgument.getStringValueHandler().split('\n').join('\n    '));
        });
        result.push('    /** end setup uploads for kernel values **/');
        result.push(context.toString());

        if (kernel.renderOutput === kernel.renderTexture) {
          context.reset();

          if (kernel.renderKernels) {
            var results = kernel.renderKernels();
            var textureName = context.getContextVariableName(kernel.outputTexture);
            result.push("    return {\n      result: {\n        texture: ".concat(textureName, ",\n        type: '").concat(results.result.type, "',\n        toArray: ").concat(getToArrayString(results.result, textureName), "\n      },"));
            var _subKernels = kernel.subKernels,
                subKernelOutputTextures = kernel.subKernelOutputTextures;

            for (var i = 0; i < _subKernels.length; i++) {
              var texture = subKernelOutputTextures[i];
              var subKernel = _subKernels[i];
              var subKernelResult = results[subKernel.property];
              var subKernelTextureName = context.getContextVariableName(texture);
              result.push("\n      ".concat(subKernel.property, ": {\n        texture: ").concat(subKernelTextureName, ",\n        type: '").concat(subKernelResult.type, "',\n        toArray: ").concat(getToArrayString(subKernelResult, subKernelTextureName), "\n      },"));
            }

            result.push("    };");
          } else {
            var rendered = kernel.renderOutput();

            var _textureName = context.getContextVariableName(kernel.outputTexture);

            result.push("    return {\n        texture: ".concat(_textureName, ",\n        type: '").concat(rendered.type, "',\n        toArray: ").concat(getToArrayString(rendered, _textureName), "\n      };"));
          }
        }

        result.push("    ".concat(destroyContextString ? '\n' + destroyContextString + '    ' : ''));
        result.push(postResult.join('\n'));
        result.push('  };');

        if (kernel.graphical) {
          result.push(getGetPixelsString(kernel));
          result.push("  innerKernel.getPixels = getPixels;");
        }

        result.push('  return innerKernel;');
        var constantsUpload = [];
        kernelConstants.forEach(function (kernelConstant) {
          constantsUpload.push("".concat(kernelConstant.getStringValueHandler()));
        });
        return "function kernel(settings) {\n  const { context, constants } = settings;\n  ".concat(constantsUpload.join(''), "\n  ").concat(setupContextString ? setupContextString : '', "\n").concat(result.join('\n'), "\n}");
      }

      function getRenderString(targetName, kernel) {
        var readBackValue = kernel.precision === 'single' ? targetName : "new Float32Array(".concat(targetName, ".buffer)");

        if (kernel.output[2]) {
          return "renderOutput(".concat(readBackValue, ", ").concat(kernel.output[0], ", ").concat(kernel.output[1], ", ").concat(kernel.output[2], ")");
        }

        if (kernel.output[1]) {
          return "renderOutput(".concat(readBackValue, ", ").concat(kernel.output[0], ", ").concat(kernel.output[1], ")");
        }

        return "renderOutput(".concat(readBackValue, ", ").concat(kernel.output[0], ")");
      }

      function getGetPixelsString(kernel) {
        var getPixels = kernel.getPixels.toString();
        var useFunctionKeyword = !/^function/.test(getPixels);
        return utils.flattenFunctionToString("".concat(useFunctionKeyword ? 'function ' : '').concat(getPixels), {
          findDependency: function findDependency(object, name) {
            if (object === 'utils') {
              return "const ".concat(name, " = ").concat(utils[name].toString(), ";");
            }

            return null;
          },
          thisLookup: function thisLookup(property) {
            if (property === 'context') {
              return null;
            }

            if (kernel.hasOwnProperty(property)) {
              return JSON.stringify(kernel[property]);
            }

            throw new Error("unhandled thisLookup ".concat(property));
          }
        });
      }

      function getToArrayString(kernelResult, textureName) {
        var toArray = kernelResult.toArray.toString();
        var useFunctionKeyword = !/^function/.test(toArray);
        var flattenedFunctions = utils.flattenFunctionToString("".concat(useFunctionKeyword ? 'function ' : '').concat(toArray), {
          findDependency: function findDependency(object, name) {
            if (object === 'utils') {
              return "const ".concat(name, " = ").concat(utils[name].toString(), ";");
            } else if (object === 'this') {
              return "".concat(useFunctionKeyword ? 'function ' : '').concat(kernelResult[name].toString());
            } else {
              throw new Error('unhandled fromObject');
            }
          },
          thisLookup: function thisLookup(property) {
            if (property === 'texture') {
              return textureName;
            }

            if (property === 'context') {
              return null;
            }

            if (kernelResult.hasOwnProperty(property)) {
              return JSON.stringify(kernelResult[property]);
            }

            throw new Error("unhandled thisLookup ".concat(property));
          }
        });
        return "() => {\n  ".concat(flattenedFunctions, "\n  return toArray();\n  }");
      }

      function findKernelValue(argument, kernelValues, values, context, uploadedValues) {
        if (argument === null) return null;

        switch (_typeof(argument)) {
          case 'boolean':
          case 'number':
            return null;
        }

        if (typeof HTMLImageElement !== 'undefined' && argument instanceof HTMLImageElement) {
          for (var i = 0; i < kernelValues.length; i++) {
            var kernelValue = kernelValues[i];
            if (kernelValue.type !== 'HTMLImageArray') continue;
            if (kernelValue.uploadValue !== argument) continue;
            var variableIndex = values[i].indexOf(argument);
            if (variableIndex === -1) continue;
            var variableName = "uploadValue_".concat(kernelValue.name, "[").concat(variableIndex, "]");
            context.insertVariable(variableName, argument);
            return variableName;
          }

          return null;
        }

        for (var _i10 = 0; _i10 < kernelValues.length; _i10++) {
          var _kernelValue = kernelValues[_i10];
          if (argument !== _kernelValue.uploadValue) continue;
          var variable = "uploadValue_".concat(_kernelValue.name);
          context.insertVariable(variable, _kernelValue);
          return variable;
        }

        return null;
      }

      module.exports = {
        glKernelString: glKernelString
      };
    }, {
      "../../utils": 113,
      "gl-wiretap": 3
    }],
    13: [function (require, module, exports) {
      var _require14 = require('../kernel'),
          Kernel = _require14.Kernel;

      var _require15 = require('../../utils'),
          utils = _require15.utils;

      var _require16 = require('./texture/array-2-float'),
          GLTextureArray2Float = _require16.GLTextureArray2Float;

      var _require17 = require('./texture/array-2-float-2d'),
          GLTextureArray2Float2D = _require17.GLTextureArray2Float2D;

      var _require18 = require('./texture/array-2-float-3d'),
          GLTextureArray2Float3D = _require18.GLTextureArray2Float3D;

      var _require19 = require('./texture/array-3-float'),
          GLTextureArray3Float = _require19.GLTextureArray3Float;

      var _require20 = require('./texture/array-3-float-2d'),
          GLTextureArray3Float2D = _require20.GLTextureArray3Float2D;

      var _require21 = require('./texture/array-3-float-3d'),
          GLTextureArray3Float3D = _require21.GLTextureArray3Float3D;

      var _require22 = require('./texture/array-4-float'),
          GLTextureArray4Float = _require22.GLTextureArray4Float;

      var _require23 = require('./texture/array-4-float-2d'),
          GLTextureArray4Float2D = _require23.GLTextureArray4Float2D;

      var _require24 = require('./texture/array-4-float-3d'),
          GLTextureArray4Float3D = _require24.GLTextureArray4Float3D;

      var _require25 = require('./texture/float'),
          GLTextureFloat = _require25.GLTextureFloat;

      var _require26 = require('./texture/float-2d'),
          GLTextureFloat2D = _require26.GLTextureFloat2D;

      var _require27 = require('./texture/float-3d'),
          GLTextureFloat3D = _require27.GLTextureFloat3D;

      var _require28 = require('./texture/memory-optimized'),
          GLTextureMemoryOptimized = _require28.GLTextureMemoryOptimized;

      var _require29 = require('./texture/memory-optimized-2d'),
          GLTextureMemoryOptimized2D = _require29.GLTextureMemoryOptimized2D;

      var _require30 = require('./texture/memory-optimized-3d'),
          GLTextureMemoryOptimized3D = _require30.GLTextureMemoryOptimized3D;

      var _require31 = require('./texture/unsigned'),
          GLTextureUnsigned = _require31.GLTextureUnsigned;

      var _require32 = require('./texture/unsigned-2d'),
          GLTextureUnsigned2D = _require32.GLTextureUnsigned2D;

      var _require33 = require('./texture/unsigned-3d'),
          GLTextureUnsigned3D = _require33.GLTextureUnsigned3D;

      var _require34 = require('./texture/graphical'),
          GLTextureGraphical = _require34.GLTextureGraphical;

      var GLKernel =
      /*#__PURE__*/
      function (_Kernel2) {
        _inherits(GLKernel, _Kernel2);

        _createClass(GLKernel, [{
          key: "setFixIntegerDivisionAccuracy",
          value: function setFixIntegerDivisionAccuracy(fix) {
            this.fixIntegerDivisionAccuracy = fix;
            return this;
          }
        }, {
          key: "setPrecision",
          value: function setPrecision(flag) {
            this.precision = flag;
            return this;
          }
        }, {
          key: "setFloatTextures",
          value: function setFloatTextures(flag) {
            utils.warnDeprecated('method', 'setFloatTextures', 'setOptimizeFloatMemory');
            this.floatTextures = flag;
            return this;
          }
        }], [{
          key: "getIsFloatRead",
          value: function getIsFloatRead() {
            var kernelString = "function kernelFunction() {\n      return 1;\n    }";
            var kernel = new this(kernelString, {
              context: this.testContext,
              canvas: this.testCanvas,
              validate: false,
              output: [1],
              precision: 'single',
              returnType: 'Number',
              tactic: 'speed'
            });
            kernel.build();
            kernel.run();
            var result = kernel.renderOutput();
            kernel.destroy(true);
            return result[0] === 1;
          }
        }, {
          key: "getIsIntegerDivisionAccurate",
          value: function getIsIntegerDivisionAccurate() {
            function kernelFunction(v1, v2) {
              return v1[this.thread.x] / v2[this.thread.x];
            }

            var kernel = new this(kernelFunction.toString(), {
              context: this.testContext,
              canvas: this.testCanvas,
              validate: false,
              output: [2],
              returnType: 'Number',
              precision: 'unsigned',
              tactic: 'speed'
            });
            var args = [[6, 6030401], [3, 3991]];
            kernel.build.apply(kernel, args);
            kernel.run.apply(kernel, args);
            var result = kernel.renderOutput();
            kernel.destroy(true);
            return result[0] === 2 && result[1] === 1511;
          }
        }, {
          key: "getFeatures",
          value: function getFeatures() {
            var gl = this.testContext;
            var isDrawBuffers = this.getIsDrawBuffers();
            return Object.freeze({
              isFloatRead: this.getIsFloatRead(),
              isIntegerDivisionAccurate: this.getIsIntegerDivisionAccurate(),
              isTextureFloat: this.getIsTextureFloat(),
              isDrawBuffers: isDrawBuffers,
              kernelMap: isDrawBuffers,
              channelCount: this.getChannelCount(),
              maxTextureSize: this.getMaxTextureSize(),
              lowIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT),
              lowFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT),
              mediumIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT),
              mediumFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT),
              highIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT),
              highFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT)
            });
          }
        }, {
          key: "setupFeatureChecks",
          value: function setupFeatureChecks() {
            throw new Error("\"setupFeatureChecks\" not defined on ".concat(this.name));
          }
        }, {
          key: "nativeFunctionArguments",
          value: function nativeFunctionArguments(source) {
            var argumentTypes = [];
            var argumentNames = [];
            var states = [];
            var isStartingVariableName = /^[a-zA-Z_]/;
            var isVariableChar = /[a-zA-Z_0-9]/;
            var i = 0;
            var argumentName = null;
            var argumentType = null;

            while (i < source.length) {
              var char = source[i];
              var nextChar = source[i + 1];
              var state = states.length > 0 ? states[states.length - 1] : null;

              if (state === 'FUNCTION_ARGUMENTS' && char === '/' && nextChar === '*') {
                states.push('MULTI_LINE_COMMENT');
                i += 2;
                continue;
              } else if (state === 'MULTI_LINE_COMMENT' && char === '*' && nextChar === '/') {
                states.pop();
                i += 2;
                continue;
              } else if (state === 'FUNCTION_ARGUMENTS' && char === '/' && nextChar === '/') {
                states.push('COMMENT');
                i += 2;
                continue;
              } else if (state === 'COMMENT' && char === '\n') {
                states.pop();
                i++;
                continue;
              } else if (state === null && char === '(') {
                states.push('FUNCTION_ARGUMENTS');
                i++;
                continue;
              } else if (state === 'FUNCTION_ARGUMENTS') {
                if (char === ')') {
                  states.pop();
                  break;
                }

                if (char === 'f' && nextChar === 'l' && source[i + 2] === 'o' && source[i + 3] === 'a' && source[i + 4] === 't' && source[i + 5] === ' ') {
                  states.push('DECLARE_VARIABLE');
                  argumentType = 'float';
                  argumentName = '';
                  i += 6;
                  continue;
                } else if (char === 'i' && nextChar === 'n' && source[i + 2] === 't' && source[i + 3] === ' ') {
                  states.push('DECLARE_VARIABLE');
                  argumentType = 'int';
                  argumentName = '';
                  i += 4;
                  continue;
                } else if (char === 'v' && nextChar === 'e' && source[i + 2] === 'c' && source[i + 3] === '2' && source[i + 4] === ' ') {
                  states.push('DECLARE_VARIABLE');
                  argumentType = 'vec2';
                  argumentName = '';
                  i += 5;
                  continue;
                } else if (char === 'v' && nextChar === 'e' && source[i + 2] === 'c' && source[i + 3] === '3' && source[i + 4] === ' ') {
                  states.push('DECLARE_VARIABLE');
                  argumentType = 'vec3';
                  argumentName = '';
                  i += 5;
                  continue;
                } else if (char === 'v' && nextChar === 'e' && source[i + 2] === 'c' && source[i + 3] === '4' && source[i + 4] === ' ') {
                  states.push('DECLARE_VARIABLE');
                  argumentType = 'vec4';
                  argumentName = '';
                  i += 5;
                  continue;
                }
              } else if (state === 'DECLARE_VARIABLE') {
                if (argumentName === '') {
                  if (char === ' ') {
                    i++;
                    continue;
                  }

                  if (!isStartingVariableName.test(char)) {
                    throw new Error('variable name is not expected string');
                  }
                }

                argumentName += char;

                if (!isVariableChar.test(nextChar)) {
                  states.pop();
                  argumentNames.push(argumentName);
                  argumentTypes.push(typeMap[argumentType]);
                }
              }

              i++;
            }

            if (states.length > 0) {
              throw new Error('GLSL function was not parsable');
            }

            return {
              argumentNames: argumentNames,
              argumentTypes: argumentTypes
            };
          }
        }, {
          key: "nativeFunctionReturnType",
          value: function nativeFunctionReturnType(source) {
            return typeMap[source.match(/int|float|vec[2-4]/)[0]];
          }
        }, {
          key: "combineKernels",
          value: function combineKernels(combinedKernel, lastKernel) {
            combinedKernel.apply(null, arguments);
            var _lastKernel$texSize = lastKernel.texSize,
                texSize = _lastKernel$texSize.texSize,
                context = _lastKernel$texSize.context,
                threadDim = _lastKernel$texSize.threadDim;
            var result;

            if (lastKernel.precision === 'single') {
              var w = texSize[0];
              var h = Math.ceil(texSize[1] / 4);
              result = new Float32Array(w * h * 4 * 4);
              context.readPixels(0, 0, w, h * 4, context.RGBA, context.FLOAT, result);
            } else {
              var bytes = new Uint8Array(texSize[0] * texSize[1] * 4);
              context.readPixels(0, 0, texSize[0], texSize[1], context.RGBA, context.UNSIGNED_BYTE, bytes);
              result = new Float32Array(bytes.buffer);
            }

            result = result.subarray(0, threadDim[0] * threadDim[1] * threadDim[2]);

            if (lastKernel.output.length === 1) {
              return result;
            } else if (lastKernel.output.length === 2) {
              return utils.splitArray(result, lastKernel.output[0]);
            } else if (lastKernel.output.length === 3) {
              var cube = utils.splitArray(result, lastKernel.output[0] * lastKernel.output[1]);
              return cube.map(function (x) {
                return utils.splitArray(x, lastKernel.output[0]);
              });
            }
          }
        }, {
          key: "mode",
          get: function get() {
            return 'gpu';
          }
        }, {
          key: "testCanvas",
          get: function get() {
            throw new Error("\"testCanvas\" not defined on ".concat(this.name));
          }
        }, {
          key: "testContext",
          get: function get() {
            throw new Error("\"testContext\" not defined on ".concat(this.name));
          }
        }]);

        function GLKernel(source, settings) {
          var _this4;

          _classCallCheck(this, GLKernel);

          _this4 = _possibleConstructorReturn(this, _getPrototypeOf(GLKernel).call(this, source, settings));
          _this4.transferValues = null;
          _this4.formatValues = null;
          _this4.TextureConstructor = null;
          _this4.renderOutput = null;
          _this4.renderRawOutput = null;
          _this4.texSize = null;
          _this4.translatedSource = null;
          _this4.renderStrategy = null;
          _this4.compiledFragmentShader = null;
          _this4.compiledVertexShader = null;
          _this4.switchingKernels = null;
          return _this4;
        }

        _createClass(GLKernel, [{
          key: "checkTextureSize",
          value: function checkTextureSize() {
            var features = this.constructor.features;

            if (this.texSize[0] > features.maxTextureSize || this.texSize[1] > features.maxTextureSize) {
              throw new Error("Texture size [".concat(this.texSize[0], ",").concat(this.texSize[1], "] generated by kernel is larger than supported size [").concat(features.maxTextureSize, ",").concat(features.maxTextureSize, "]"));
            }
          }
        }, {
          key: "translateSource",
          value: function translateSource() {
            throw new Error("\"translateSource\" not defined on ".concat(this.constructor.name));
          }
        }, {
          key: "pickRenderStrategy",
          value: function pickRenderStrategy(args) {
            if (this.graphical) {
              this.renderRawOutput = this.readPackedPixelsToUint8Array;

              this.transferValues = function (pixels) {
                return pixels;
              };

              this.TextureConstructor = GLTextureGraphical;
              return null;
            }

            if (this.precision === 'unsigned') {
              this.renderRawOutput = this.readPackedPixelsToUint8Array;
              this.transferValues = this.readPackedPixelsToFloat32Array;

              if (this.pipeline) {
                this.renderOutput = this.renderTexture;

                if (this.subKernels !== null) {
                  this.renderKernels = this.renderKernelsToTextures;
                }

                switch (this.returnType) {
                  case 'LiteralInteger':
                  case 'Float':
                  case 'Number':
                  case 'Integer':
                    if (this.output[2] > 0) {
                      this.TextureConstructor = GLTextureUnsigned3D;
                      this.renderStrategy = renderStrategy.PackedPixelTo3DFloat;
                      return null;
                    } else if (this.output[1] > 0) {
                      this.TextureConstructor = GLTextureUnsigned2D;
                      this.renderStrategy = renderStrategy.PackedPixelTo2DFloat;
                      return null;
                    } else {
                      this.TextureConstructor = GLTextureUnsigned;
                      this.renderStrategy = renderStrategy.PackedPixelToFloat;
                      return null;
                    }

                  case 'Array(2)':
                  case 'Array(3)':
                  case 'Array(4)':
                    return this.requestFallback(args);
                }
              } else {
                if (this.subKernels !== null) {
                  this.renderKernels = this.renderKernelsToArrays;
                }

                switch (this.returnType) {
                  case 'LiteralInteger':
                  case 'Float':
                  case 'Number':
                  case 'Integer':
                    this.renderOutput = this.renderValues;

                    if (this.output[2] > 0) {
                      this.TextureConstructor = GLTextureUnsigned3D;
                      this.renderStrategy = renderStrategy.PackedPixelTo3DFloat;
                      this.formatValues = utils.erect3DPackedFloat;
                      return null;
                    } else if (this.output[1] > 0) {
                      this.TextureConstructor = GLTextureUnsigned2D;
                      this.renderStrategy = renderStrategy.PackedPixelTo2DFloat;
                      this.formatValues = utils.erect2DPackedFloat;
                      return null;
                    } else {
                      this.TextureConstructor = GLTextureUnsigned;
                      this.renderStrategy = renderStrategy.PackedPixelToFloat;
                      this.formatValues = utils.erectPackedFloat;
                      return null;
                    }

                  case 'Array(2)':
                  case 'Array(3)':
                  case 'Array(4)':
                    return this.requestFallback(args);
                }
              }
            } else if (this.precision === 'single') {
              this.renderRawOutput = this.readFloatPixelsToFloat32Array;
              this.transferValues = this.readFloatPixelsToFloat32Array;

              if (this.pipeline) {
                this.renderStrategy = renderStrategy.FloatTexture;
                this.renderOutput = this.renderTexture;

                if (this.subKernels !== null) {
                  this.renderKernels = this.renderKernelsToTextures;
                }

                switch (this.returnType) {
                  case 'LiteralInteger':
                  case 'Float':
                  case 'Number':
                  case 'Integer':
                    if (this.optimizeFloatMemory) {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureMemoryOptimized3D;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureMemoryOptimized2D;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureMemoryOptimized;
                        return null;
                      }
                    } else {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureFloat3D;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureFloat2D;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureFloat;
                        return null;
                      }
                    }

                  case 'Array(2)':
                    if (this.output[2] > 0) {
                      this.TextureConstructor = GLTextureArray2Float3D;
                      return null;
                    } else if (this.output[1] > 0) {
                      this.TextureConstructor = GLTextureArray2Float2D;
                      return null;
                    } else {
                      this.TextureConstructor = GLTextureArray2Float;
                      return null;
                    }

                  case 'Array(3)':
                    if (this.output[2] > 0) {
                      this.TextureConstructor = GLTextureArray3Float3D;
                      return null;
                    } else if (this.output[1] > 0) {
                      this.TextureConstructor = GLTextureArray3Float2D;
                      return null;
                    } else {
                      this.TextureConstructor = GLTextureArray3Float;
                      return null;
                    }

                  case 'Array(4)':
                    if (this.output[2] > 0) {
                      this.TextureConstructor = GLTextureArray4Float3D;
                      return null;
                    } else if (this.output[1] > 0) {
                      this.TextureConstructor = GLTextureArray4Float2D;
                      return null;
                    } else {
                      this.TextureConstructor = GLTextureArray4Float;
                      return null;
                    }

                }
              }

              this.renderOutput = this.renderValues;

              if (this.subKernels !== null) {
                this.renderKernels = this.renderKernelsToArrays;
              }

              if (this.optimizeFloatMemory) {
                switch (this.returnType) {
                  case 'LiteralInteger':
                  case 'Float':
                  case 'Number':
                  case 'Integer':
                    if (this.output[2] > 0) {
                      this.TextureConstructor = GLTextureMemoryOptimized3D;
                      this.renderStrategy = renderStrategy.MemoryOptimizedFloatPixelToMemoryOptimized3DFloat;
                      this.formatValues = utils.erectMemoryOptimized3DFloat;
                      return null;
                    } else if (this.output[1] > 0) {
                      this.TextureConstructor = GLTextureMemoryOptimized2D;
                      this.renderStrategy = renderStrategy.MemoryOptimizedFloatPixelToMemoryOptimized2DFloat;
                      this.formatValues = utils.erectMemoryOptimized2DFloat;
                      return null;
                    } else {
                      this.TextureConstructor = GLTextureMemoryOptimized;
                      this.renderStrategy = renderStrategy.MemoryOptimizedFloatPixelToMemoryOptimizedFloat;
                      this.formatValues = utils.erectMemoryOptimizedFloat;
                      return null;
                    }

                  case 'Array(2)':
                    if (this.output[2] > 0) {
                      this.TextureConstructor = GLTextureArray2Float3D;
                      this.renderStrategy = renderStrategy.FloatPixelTo3DArray2;
                      this.formatValues = utils.erect3DArray2;
                      return null;
                    } else if (this.output[1] > 0) {
                      this.TextureConstructor = GLTextureArray2Float2D;
                      this.renderStrategy = renderStrategy.FloatPixelTo2DArray2;
                      this.formatValues = utils.erect2DArray2;
                      return null;
                    } else {
                      this.TextureConstructor = GLTextureArray2Float;
                      this.renderStrategy = renderStrategy.FloatPixelToArray2;
                      this.formatValues = utils.erectArray2;
                      return null;
                    }

                  case 'Array(3)':
                    if (this.output[2] > 0) {
                      this.TextureConstructor = GLTextureArray3Float3D;
                      this.renderStrategy = renderStrategy.FloatPixelTo3DArray3;
                      this.formatValues = utils.erect3DArray3;
                      return null;
                    } else if (this.output[1] > 0) {
                      this.TextureConstructor = GLTextureArray3Float2D;
                      this.renderStrategy = renderStrategy.FloatPixelTo2DArray3;
                      this.formatValues = utils.erect2DArray3;
                      return null;
                    } else {
                      this.TextureConstructor = GLTextureArray3Float;
                      this.renderStrategy = renderStrategy.FloatPixelToArray3;
                      this.formatValues = utils.erectArray3;
                      return null;
                    }

                  case 'Array(4)':
                    if (this.output[2] > 0) {
                      this.TextureConstructor = GLTextureArray4Float3D;
                      this.renderStrategy = renderStrategy.FloatPixelTo3DArray4;
                      this.formatValues = utils.erect3DArray4;
                      return null;
                    } else if (this.output[1] > 0) {
                      this.TextureConstructor = GLTextureArray4Float2D;
                      this.renderStrategy = renderStrategy.FloatPixelTo2DArray4;
                      this.formatValues = utils.erect2DArray4;
                      return null;
                    } else {
                      this.TextureConstructor = GLTextureArray4Float;
                      this.renderStrategy = renderStrategy.FloatPixelToArray4;
                      this.formatValues = utils.erectArray4;
                      return null;
                    }

                }
              } else {
                switch (this.returnType) {
                  case 'LiteralInteger':
                  case 'Float':
                  case 'Number':
                  case 'Integer':
                    if (this.output[2] > 0) {
                      this.TextureConstructor = GLTextureFloat3D;
                      this.renderStrategy = renderStrategy.FloatPixelTo3DFloat;
                      this.formatValues = utils.erect3DFloat;
                      return null;
                    } else if (this.output[1] > 0) {
                      this.TextureConstructor = GLTextureFloat2D;
                      this.renderStrategy = renderStrategy.FloatPixelTo2DFloat;
                      this.formatValues = utils.erect2DFloat;
                      return null;
                    } else {
                      this.TextureConstructor = GLTextureFloat;
                      this.renderStrategy = renderStrategy.FloatPixelToFloat;
                      this.formatValues = utils.erectFloat;
                      return null;
                    }

                  case 'Array(2)':
                    if (this.output[2] > 0) {
                      this.TextureConstructor = GLTextureArray2Float3D;
                      this.renderStrategy = renderStrategy.FloatPixelTo3DArray2;
                      this.formatValues = utils.erect3DArray2;
                      return null;
                    } else if (this.output[1] > 0) {
                      this.TextureConstructor = GLTextureArray2Float2D;
                      this.renderStrategy = renderStrategy.FloatPixelTo2DArray2;
                      this.formatValues = utils.erect2DArray2;
                      return null;
                    } else {
                      this.TextureConstructor = GLTextureArray2Float;
                      this.renderStrategy = renderStrategy.FloatPixelToArray2;
                      this.formatValues = utils.erectArray2;
                      return null;
                    }

                  case 'Array(3)':
                    if (this.output[2] > 0) {
                      this.TextureConstructor = GLTextureArray3Float3D;
                      this.renderStrategy = renderStrategy.FloatPixelTo3DArray3;
                      this.formatValues = utils.erect3DArray3;
                      return null;
                    } else if (this.output[1] > 0) {
                      this.TextureConstructor = GLTextureArray3Float2D;
                      this.renderStrategy = renderStrategy.FloatPixelTo2DArray3;
                      this.formatValues = utils.erect2DArray3;
                      return null;
                    } else {
                      this.TextureConstructor = GLTextureArray3Float;
                      this.renderStrategy = renderStrategy.FloatPixelToArray3;
                      this.formatValues = utils.erectArray3;
                      return null;
                    }

                  case 'Array(4)':
                    if (this.output[2] > 0) {
                      this.TextureConstructor = GLTextureArray4Float3D;
                      this.renderStrategy = renderStrategy.FloatPixelTo3DArray4;
                      this.formatValues = utils.erect3DArray4;
                      return null;
                    } else if (this.output[1] > 0) {
                      this.TextureConstructor = GLTextureArray4Float2D;
                      this.renderStrategy = renderStrategy.FloatPixelTo2DArray4;
                      this.formatValues = utils.erect2DArray4;
                      return null;
                    } else {
                      this.TextureConstructor = GLTextureArray4Float;
                      this.renderStrategy = renderStrategy.FloatPixelToArray4;
                      this.formatValues = utils.erectArray4;
                      return null;
                    }

                }
              }
            } else {
              throw new Error("unhandled precision of \"".concat(this.precision, "\""));
            }

            throw new Error("unhandled return type \"".concat(this.returnType, "\""));
          }
        }, {
          key: "getKernelString",
          value: function getKernelString() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultTexture",
          value: function getMainResultTexture() {
            switch (this.returnType) {
              case 'LiteralInteger':
              case 'Float':
              case 'Integer':
              case 'Number':
                return this.getMainResultNumberTexture();

              case 'Array(2)':
                return this.getMainResultArray2Texture();

              case 'Array(3)':
                return this.getMainResultArray3Texture();

              case 'Array(4)':
                return this.getMainResultArray4Texture();

              default:
                throw new Error("unhandled returnType type ".concat(this.returnType));
            }
          }
        }, {
          key: "getMainResultKernelNumberTexture",
          value: function getMainResultKernelNumberTexture() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultSubKernelNumberTexture",
          value: function getMainResultSubKernelNumberTexture() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultKernelArray2Texture",
          value: function getMainResultKernelArray2Texture() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultSubKernelArray2Texture",
          value: function getMainResultSubKernelArray2Texture() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultKernelArray3Texture",
          value: function getMainResultKernelArray3Texture() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultSubKernelArray3Texture",
          value: function getMainResultSubKernelArray3Texture() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultKernelArray4Texture",
          value: function getMainResultKernelArray4Texture() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultSubKernelArray4Texture",
          value: function getMainResultSubKernelArray4Texture() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultGraphical",
          value: function getMainResultGraphical() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultMemoryOptimizedFloats",
          value: function getMainResultMemoryOptimizedFloats() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultPackedPixels",
          value: function getMainResultPackedPixels() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultString",
          value: function getMainResultString() {
            if (this.graphical) {
              return this.getMainResultGraphical();
            } else if (this.precision === 'single') {
              if (this.optimizeFloatMemory) {
                return this.getMainResultMemoryOptimizedFloats();
              }

              return this.getMainResultTexture();
            } else {
              return this.getMainResultPackedPixels();
            }
          }
        }, {
          key: "getMainResultNumberTexture",
          value: function getMainResultNumberTexture() {
            return utils.linesToString(this.getMainResultKernelNumberTexture()) + utils.linesToString(this.getMainResultSubKernelNumberTexture());
          }
        }, {
          key: "getMainResultArray2Texture",
          value: function getMainResultArray2Texture() {
            return utils.linesToString(this.getMainResultKernelArray2Texture()) + utils.linesToString(this.getMainResultSubKernelArray2Texture());
          }
        }, {
          key: "getMainResultArray3Texture",
          value: function getMainResultArray3Texture() {
            return utils.linesToString(this.getMainResultKernelArray3Texture()) + utils.linesToString(this.getMainResultSubKernelArray3Texture());
          }
        }, {
          key: "getMainResultArray4Texture",
          value: function getMainResultArray4Texture() {
            return utils.linesToString(this.getMainResultKernelArray4Texture()) + utils.linesToString(this.getMainResultSubKernelArray4Texture());
          }
        }, {
          key: "getFloatTacticDeclaration",
          value: function getFloatTacticDeclaration() {
            var variablePrecision = this.getVariablePrecisionString(this.texSize, this.tactic);
            return "precision ".concat(variablePrecision, " float;\n");
          }
        }, {
          key: "getIntTacticDeclaration",
          value: function getIntTacticDeclaration() {
            return "precision ".concat(this.getVariablePrecisionString(this.texSize, this.tactic, true), " int;\n");
          }
        }, {
          key: "getSampler2DTacticDeclaration",
          value: function getSampler2DTacticDeclaration() {
            return "precision ".concat(this.getVariablePrecisionString(this.texSize, this.tactic), " sampler2D;\n");
          }
        }, {
          key: "getSampler2DArrayTacticDeclaration",
          value: function getSampler2DArrayTacticDeclaration() {
            return "precision ".concat(this.getVariablePrecisionString(this.texSize, this.tactic), " sampler2DArray;\n");
          }
        }, {
          key: "renderTexture",
          value: function renderTexture() {
            return new this.TextureConstructor({
              texture: this.outputTexture,
              size: this.texSize,
              dimensions: this.threadDim,
              output: this.output,
              context: this.context,
              kernel: this,
              internalFormat: this.getInternalFormat(),
              textureFormat: this.getTextureFormat()
            });
          }
        }, {
          key: "readPackedPixelsToUint8Array",
          value: function readPackedPixelsToUint8Array() {
            if (this.precision !== 'unsigned') throw new Error('Requires this.precision to be "unsigned"');
            var texSize = this.texSize,
                gl = this.context;
            var result = new Uint8Array(texSize[0] * texSize[1] * 4);
            gl.readPixels(0, 0, texSize[0], texSize[1], gl.RGBA, gl.UNSIGNED_BYTE, result);
            return result;
          }
        }, {
          key: "readPackedPixelsToFloat32Array",
          value: function readPackedPixelsToFloat32Array() {
            return new Float32Array(this.readPackedPixelsToUint8Array().buffer);
          }
        }, {
          key: "readFloatPixelsToFloat32Array",
          value: function readFloatPixelsToFloat32Array() {
            if (this.precision !== 'single') throw new Error('Requires this.precision to be "single"');
            var texSize = this.texSize,
                gl = this.context;
            var w = texSize[0];
            var h = texSize[1];
            var result = new Float32Array(w * h * 4);
            gl.readPixels(0, 0, w, h, gl.RGBA, gl.FLOAT, result);
            return result;
          }
        }, {
          key: "getPixels",
          value: function getPixels(flip) {
            var gl = this.context,
                output = this.output;

            var _output4 = _slicedToArray(output, 2),
                width = _output4[0],
                height = _output4[1];

            var pixels = new Uint8Array(width * height * 4);
            gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
            return new Uint8ClampedArray((flip ? pixels : utils.flipPixels(pixels, width, height)).buffer);
          }
        }, {
          key: "renderKernelsToArrays",
          value: function renderKernelsToArrays() {
            var result = {
              result: this.renderOutput()
            };

            for (var i = 0; i < this.subKernels.length; i++) {
              result[this.subKernels[i].property] = new this.TextureConstructor({
                texture: this.subKernelOutputTextures[i],
                size: this.texSize,
                dimensions: this.threadDim,
                output: this.output,
                context: this.context,
                internalFormat: this.getInternalFormat(),
                textureFormat: this.getTextureFormat()
              }).toArray();
            }

            return result;
          }
        }, {
          key: "renderKernelsToTextures",
          value: function renderKernelsToTextures() {
            var result = {
              result: this.renderOutput()
            };

            for (var i = 0; i < this.subKernels.length; i++) {
              result[this.subKernels[i].property] = new this.TextureConstructor({
                texture: this.subKernelOutputTextures[i],
                size: this.texSize,
                dimensions: this.threadDim,
                output: this.output,
                context: this.context,
                internalFormat: this.getInternalFormat(),
                textureFormat: this.getTextureFormat()
              });
            }

            return result;
          }
        }, {
          key: "resetSwitchingKernels",
          value: function resetSwitchingKernels() {
            var existingValue = this.switchingKernels;
            this.switchingKernels = null;
            return existingValue;
          }
        }, {
          key: "setOutput",
          value: function setOutput(output) {
            var newOutput = this.toKernelOutput(output);

            if (this.program) {
              if (!this.dynamicOutput) {
                throw new Error('Resizing a kernel with dynamicOutput: false is not possible');
              }

              var newThreadDim = [newOutput[0], newOutput[1] || 1, newOutput[2] || 1];
              var newTexSize = utils.getKernelTextureSize({
                optimizeFloatMemory: this.optimizeFloatMemory,
                precision: this.precision
              }, newThreadDim);
              var oldTexSize = this.texSize;

              if (oldTexSize) {
                var oldPrecision = this.getVariablePrecisionString(oldTexSize, this.tactic);
                var newPrecision = this.getVariablePrecisionString(newTexSize, this.tactic);

                if (oldPrecision !== newPrecision) {
                  console.warn('Precision requirement changed, asking GPU instance to recompile');
                  this.switchKernels({
                    type: 'outputPrecisionMismatch',
                    precision: newPrecision,
                    needed: output
                  });
                  return;
                }
              }

              this.output = newOutput;
              this.threadDim = newThreadDim;
              this.texSize = newTexSize;
              var gl = this.context;
              gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
              this.updateMaxTexSize();
              this.framebuffer.width = this.texSize[0];
              this.framebuffer.height = this.texSize[1];
              gl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);
              this.canvas.width = this.maxTexSize[0];
              this.canvas.height = this.maxTexSize[1];

              this._setupOutputTexture();

              if (this.subKernels && this.subKernels.length > 0) {
                this._setupSubOutputTextures();
              }
            } else {
              this.output = newOutput;
            }

            return this;
          }
        }, {
          key: "renderValues",
          value: function renderValues() {
            return this.formatValues(this.transferValues(), this.output[0], this.output[1], this.output[2]);
          }
        }, {
          key: "switchKernels",
          value: function switchKernels(reason) {
            if (this.switchingKernels) {
              this.switchingKernels.push(reason);
            } else {
              this.switchingKernels = [reason];
            }
          }
        }, {
          key: "getVariablePrecisionString",
          value: function getVariablePrecisionString() {
            var textureSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.texSize;
            var tactic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.tactic;
            var isInt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            if (!tactic) {
              var low = this.constructor.features[isInt ? 'lowIntPrecision' : 'lowFloatPrecision'];
              var medium = this.constructor.features[isInt ? 'mediumIntPrecision' : 'mediumFloatPrecision'];
              var high = this.constructor.features[isInt ? 'highIntPrecision' : 'highFloatPrecision'];
              var requiredSize = Math.log2(textureSize[0] * textureSize[1]);

              if (requiredSize <= low.rangeMax) {
                return 'lowp';
              } else if (requiredSize <= medium.rangeMax) {
                return 'mediump';
              } else if (requiredSize <= high.rangeMax) {
                return 'highp';
              } else {
                throw new Error("The required size exceeds that of the ability of your system");
              }
            }

            switch (tactic) {
              case 'speed':
                return 'lowp';

              case 'balanced':
                return 'mediump';

              case 'precision':
                return 'highp';

              default:
                throw new Error("Unknown tactic \"".concat(tactic, "\" use \"speed\", \"balanced\", \"precision\", or empty for auto"));
            }
          }
        }]);

        return GLKernel;
      }(Kernel);

      var renderStrategy = Object.freeze({
        PackedPixelToUint8Array: Symbol('PackedPixelToUint8Array'),
        PackedPixelToFloat: Symbol('PackedPixelToFloat'),
        PackedPixelTo2DFloat: Symbol('PackedPixelTo2DFloat'),
        PackedPixelTo3DFloat: Symbol('PackedPixelTo3DFloat'),
        PackedTexture: Symbol('PackedTexture'),
        FloatPixelToFloat32Array: Symbol('FloatPixelToFloat32Array'),
        FloatPixelToFloat: Symbol('FloatPixelToFloat'),
        FloatPixelTo2DFloat: Symbol('FloatPixelTo2DFloat'),
        FloatPixelTo3DFloat: Symbol('FloatPixelTo3DFloat'),
        FloatPixelToArray2: Symbol('FloatPixelToArray2'),
        FloatPixelTo2DArray2: Symbol('FloatPixelTo2DArray2'),
        FloatPixelTo3DArray2: Symbol('FloatPixelTo3DArray2'),
        FloatPixelToArray3: Symbol('FloatPixelToArray3'),
        FloatPixelTo2DArray3: Symbol('FloatPixelTo2DArray3'),
        FloatPixelTo3DArray3: Symbol('FloatPixelTo3DArray3'),
        FloatPixelToArray4: Symbol('FloatPixelToArray4'),
        FloatPixelTo2DArray4: Symbol('FloatPixelTo2DArray4'),
        FloatPixelTo3DArray4: Symbol('FloatPixelTo3DArray4'),
        FloatTexture: Symbol('FloatTexture'),
        MemoryOptimizedFloatPixelToMemoryOptimizedFloat: Symbol('MemoryOptimizedFloatPixelToFloat'),
        MemoryOptimizedFloatPixelToMemoryOptimized2DFloat: Symbol('MemoryOptimizedFloatPixelTo2DFloat'),
        MemoryOptimizedFloatPixelToMemoryOptimized3DFloat: Symbol('MemoryOptimizedFloatPixelTo3DFloat')
      });
      var typeMap = {
        int: 'Integer',
        float: 'Number',
        vec2: 'Array(2)',
        vec3: 'Array(3)',
        vec4: 'Array(4)'
      };
      module.exports = {
        GLKernel: GLKernel,
        renderStrategy: renderStrategy
      };
    }, {
      "../../utils": 113,
      "../kernel": 36,
      "./texture/array-2-float": 16,
      "./texture/array-2-float-2d": 14,
      "./texture/array-2-float-3d": 15,
      "./texture/array-3-float": 19,
      "./texture/array-3-float-2d": 17,
      "./texture/array-3-float-3d": 18,
      "./texture/array-4-float": 22,
      "./texture/array-4-float-2d": 20,
      "./texture/array-4-float-3d": 21,
      "./texture/float": 25,
      "./texture/float-2d": 23,
      "./texture/float-3d": 24,
      "./texture/graphical": 26,
      "./texture/memory-optimized": 30,
      "./texture/memory-optimized-2d": 28,
      "./texture/memory-optimized-3d": 29,
      "./texture/unsigned": 33,
      "./texture/unsigned-2d": 31,
      "./texture/unsigned-3d": 32
    }],
    14: [function (require, module, exports) {
      var _require35 = require('../../../utils'),
          utils = _require35.utils;

      var _require36 = require('./float'),
          GLTextureFloat = _require36.GLTextureFloat;

      var GLTextureArray2Float2D =
      /*#__PURE__*/
      function (_GLTextureFloat) {
        _inherits(GLTextureArray2Float2D, _GLTextureFloat);

        function GLTextureArray2Float2D(settings) {
          var _this5;

          _classCallCheck(this, GLTextureArray2Float2D);

          _this5 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureArray2Float2D).call(this, settings));
          _this5.type = 'ArrayTexture(2)';
          return _this5;
        }

        _createClass(GLTextureArray2Float2D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect2DArray2(this.renderValues(), this.output[0], this.output[1]);
          }
        }]);

        return GLTextureArray2Float2D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureArray2Float2D: GLTextureArray2Float2D
      };
    }, {
      "../../../utils": 113,
      "./float": 25
    }],
    15: [function (require, module, exports) {
      var _require37 = require('../../../utils'),
          utils = _require37.utils;

      var _require38 = require('./float'),
          GLTextureFloat = _require38.GLTextureFloat;

      var GLTextureArray2Float3D =
      /*#__PURE__*/
      function (_GLTextureFloat2) {
        _inherits(GLTextureArray2Float3D, _GLTextureFloat2);

        function GLTextureArray2Float3D(settings) {
          var _this6;

          _classCallCheck(this, GLTextureArray2Float3D);

          _this6 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureArray2Float3D).call(this, settings));
          _this6.type = 'ArrayTexture(2)';
          return _this6;
        }

        _createClass(GLTextureArray2Float3D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect3DArray2(this.renderValues(), this.output[0], this.output[1], this.output[2]);
          }
        }]);

        return GLTextureArray2Float3D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureArray2Float3D: GLTextureArray2Float3D
      };
    }, {
      "../../../utils": 113,
      "./float": 25
    }],
    16: [function (require, module, exports) {
      var _require39 = require('../../../utils'),
          utils = _require39.utils;

      var _require40 = require('./float'),
          GLTextureFloat = _require40.GLTextureFloat;

      var GLTextureArray2Float =
      /*#__PURE__*/
      function (_GLTextureFloat3) {
        _inherits(GLTextureArray2Float, _GLTextureFloat3);

        function GLTextureArray2Float(settings) {
          var _this7;

          _classCallCheck(this, GLTextureArray2Float);

          _this7 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureArray2Float).call(this, settings));
          _this7.type = 'ArrayTexture(2)';
          return _this7;
        }

        _createClass(GLTextureArray2Float, [{
          key: "toArray",
          value: function toArray() {
            return utils.erectArray2(this.renderValues(), this.output[0], this.output[1]);
          }
        }]);

        return GLTextureArray2Float;
      }(GLTextureFloat);

      module.exports = {
        GLTextureArray2Float: GLTextureArray2Float
      };
    }, {
      "../../../utils": 113,
      "./float": 25
    }],
    17: [function (require, module, exports) {
      var _require41 = require('../../../utils'),
          utils = _require41.utils;

      var _require42 = require('./float'),
          GLTextureFloat = _require42.GLTextureFloat;

      var GLTextureArray3Float2D =
      /*#__PURE__*/
      function (_GLTextureFloat4) {
        _inherits(GLTextureArray3Float2D, _GLTextureFloat4);

        function GLTextureArray3Float2D(settings) {
          var _this8;

          _classCallCheck(this, GLTextureArray3Float2D);

          _this8 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureArray3Float2D).call(this, settings));
          _this8.type = 'ArrayTexture(3)';
          return _this8;
        }

        _createClass(GLTextureArray3Float2D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect2DArray3(this.renderValues(), this.output[0], this.output[1]);
          }
        }]);

        return GLTextureArray3Float2D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureArray3Float2D: GLTextureArray3Float2D
      };
    }, {
      "../../../utils": 113,
      "./float": 25
    }],
    18: [function (require, module, exports) {
      var _require43 = require('../../../utils'),
          utils = _require43.utils;

      var _require44 = require('./float'),
          GLTextureFloat = _require44.GLTextureFloat;

      var GLTextureArray3Float3D =
      /*#__PURE__*/
      function (_GLTextureFloat5) {
        _inherits(GLTextureArray3Float3D, _GLTextureFloat5);

        function GLTextureArray3Float3D(settings) {
          var _this9;

          _classCallCheck(this, GLTextureArray3Float3D);

          _this9 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureArray3Float3D).call(this, settings));
          _this9.type = 'ArrayTexture(3)';
          return _this9;
        }

        _createClass(GLTextureArray3Float3D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect3DArray3(this.renderValues(), this.output[0], this.output[1], this.output[2]);
          }
        }]);

        return GLTextureArray3Float3D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureArray3Float3D: GLTextureArray3Float3D
      };
    }, {
      "../../../utils": 113,
      "./float": 25
    }],
    19: [function (require, module, exports) {
      var _require45 = require('../../../utils'),
          utils = _require45.utils;

      var _require46 = require('./float'),
          GLTextureFloat = _require46.GLTextureFloat;

      var GLTextureArray3Float =
      /*#__PURE__*/
      function (_GLTextureFloat6) {
        _inherits(GLTextureArray3Float, _GLTextureFloat6);

        function GLTextureArray3Float(settings) {
          var _this10;

          _classCallCheck(this, GLTextureArray3Float);

          _this10 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureArray3Float).call(this, settings));
          _this10.type = 'ArrayTexture(3)';
          return _this10;
        }

        _createClass(GLTextureArray3Float, [{
          key: "toArray",
          value: function toArray() {
            return utils.erectArray3(this.renderValues(), this.output[0]);
          }
        }]);

        return GLTextureArray3Float;
      }(GLTextureFloat);

      module.exports = {
        GLTextureArray3Float: GLTextureArray3Float
      };
    }, {
      "../../../utils": 113,
      "./float": 25
    }],
    20: [function (require, module, exports) {
      var _require47 = require('../../../utils'),
          utils = _require47.utils;

      var _require48 = require('./float'),
          GLTextureFloat = _require48.GLTextureFloat;

      var GLTextureArray4Float2D =
      /*#__PURE__*/
      function (_GLTextureFloat7) {
        _inherits(GLTextureArray4Float2D, _GLTextureFloat7);

        function GLTextureArray4Float2D(settings) {
          var _this11;

          _classCallCheck(this, GLTextureArray4Float2D);

          _this11 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureArray4Float2D).call(this, settings));
          _this11.type = 'ArrayTexture(4)';
          return _this11;
        }

        _createClass(GLTextureArray4Float2D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect2DArray4(this.renderValues(), this.output[0], this.output[1]);
          }
        }]);

        return GLTextureArray4Float2D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureArray4Float2D: GLTextureArray4Float2D
      };
    }, {
      "../../../utils": 113,
      "./float": 25
    }],
    21: [function (require, module, exports) {
      var _require49 = require('../../../utils'),
          utils = _require49.utils;

      var _require50 = require('./float'),
          GLTextureFloat = _require50.GLTextureFloat;

      var GLTextureArray4Float3D =
      /*#__PURE__*/
      function (_GLTextureFloat8) {
        _inherits(GLTextureArray4Float3D, _GLTextureFloat8);

        function GLTextureArray4Float3D(settings) {
          var _this12;

          _classCallCheck(this, GLTextureArray4Float3D);

          _this12 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureArray4Float3D).call(this, settings));
          _this12.type = 'ArrayTexture(4)';
          return _this12;
        }

        _createClass(GLTextureArray4Float3D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect3DArray4(this.renderValues(), this.output[0], this.output[1], this.output[2]);
          }
        }]);

        return GLTextureArray4Float3D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureArray4Float3D: GLTextureArray4Float3D
      };
    }, {
      "../../../utils": 113,
      "./float": 25
    }],
    22: [function (require, module, exports) {
      var _require51 = require('../../../utils'),
          utils = _require51.utils;

      var _require52 = require('./float'),
          GLTextureFloat = _require52.GLTextureFloat;

      var GLTextureArray4Float =
      /*#__PURE__*/
      function (_GLTextureFloat9) {
        _inherits(GLTextureArray4Float, _GLTextureFloat9);

        function GLTextureArray4Float(settings) {
          var _this13;

          _classCallCheck(this, GLTextureArray4Float);

          _this13 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureArray4Float).call(this, settings));
          _this13.type = 'ArrayTexture(4)';
          return _this13;
        }

        _createClass(GLTextureArray4Float, [{
          key: "toArray",
          value: function toArray() {
            return utils.erectArray4(this.renderValues(), this.output[0]);
          }
        }]);

        return GLTextureArray4Float;
      }(GLTextureFloat);

      module.exports = {
        GLTextureArray4Float: GLTextureArray4Float
      };
    }, {
      "../../../utils": 113,
      "./float": 25
    }],
    23: [function (require, module, exports) {
      var _require53 = require('../../../utils'),
          utils = _require53.utils;

      var _require54 = require('./float'),
          GLTextureFloat = _require54.GLTextureFloat;

      var GLTextureFloat2D =
      /*#__PURE__*/
      function (_GLTextureFloat10) {
        _inherits(GLTextureFloat2D, _GLTextureFloat10);

        function GLTextureFloat2D(settings) {
          var _this14;

          _classCallCheck(this, GLTextureFloat2D);

          _this14 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureFloat2D).call(this, settings));
          _this14.type = 'ArrayTexture(1)';
          return _this14;
        }

        _createClass(GLTextureFloat2D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect2DFloat(this.renderValues(), this.output[0], this.output[1]);
          }
        }]);

        return GLTextureFloat2D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureFloat2D: GLTextureFloat2D
      };
    }, {
      "../../../utils": 113,
      "./float": 25
    }],
    24: [function (require, module, exports) {
      var _require55 = require('../../../utils'),
          utils = _require55.utils;

      var _require56 = require('./float'),
          GLTextureFloat = _require56.GLTextureFloat;

      var GLTextureFloat3D =
      /*#__PURE__*/
      function (_GLTextureFloat11) {
        _inherits(GLTextureFloat3D, _GLTextureFloat11);

        function GLTextureFloat3D(settings) {
          var _this15;

          _classCallCheck(this, GLTextureFloat3D);

          _this15 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureFloat3D).call(this, settings));
          _this15.type = 'ArrayTexture(1)';
          return _this15;
        }

        _createClass(GLTextureFloat3D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect3DFloat(this.renderValues(), this.output[0], this.output[1], this.output[2]);
          }
        }]);

        return GLTextureFloat3D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureFloat3D: GLTextureFloat3D
      };
    }, {
      "../../../utils": 113,
      "./float": 25
    }],
    25: [function (require, module, exports) {
      var _require57 = require('../../../utils'),
          utils = _require57.utils;

      var _require58 = require('./index'),
          GLTexture = _require58.GLTexture;

      var GLTextureFloat =
      /*#__PURE__*/
      function (_GLTexture) {
        _inherits(GLTextureFloat, _GLTexture);

        _createClass(GLTextureFloat, [{
          key: "textureType",
          get: function get() {
            return this.context.FLOAT;
          }
        }]);

        function GLTextureFloat(settings) {
          var _this16;

          _classCallCheck(this, GLTextureFloat);

          _this16 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureFloat).call(this, settings));
          _this16.type = 'ArrayTexture(1)';
          return _this16;
        }

        _createClass(GLTextureFloat, [{
          key: "renderRawOutput",
          value: function renderRawOutput() {
            var gl = this.context;
            var framebuffer = gl.createFramebuffer();
            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0);
            var result = new Float32Array(this.size[0] * this.size[1] * 4);
            gl.readPixels(0, 0, this.size[0], this.size[1], gl.RGBA, gl.FLOAT, result);
            return result;
          }
        }, {
          key: "renderValues",
          value: function renderValues() {
            if (this._deleted) return null;
            return this.renderRawOutput();
          }
        }, {
          key: "toArray",
          value: function toArray() {
            return utils.erectFloat(this.renderValues(), this.output[0]);
          }
        }]);

        return GLTextureFloat;
      }(GLTexture);

      module.exports = {
        GLTextureFloat: GLTextureFloat
      };
    }, {
      "../../../utils": 113,
      "./index": 27
    }],
    26: [function (require, module, exports) {
      var _require59 = require('./unsigned'),
          GLTextureUnsigned = _require59.GLTextureUnsigned;

      var GLTextureGraphical =
      /*#__PURE__*/
      function (_GLTextureUnsigned) {
        _inherits(GLTextureGraphical, _GLTextureUnsigned);

        function GLTextureGraphical(settings) {
          var _this17;

          _classCallCheck(this, GLTextureGraphical);

          _this17 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureGraphical).call(this, settings));
          _this17.type = 'ArrayTexture(4)';
          return _this17;
        }

        _createClass(GLTextureGraphical, [{
          key: "toArray",
          value: function toArray() {
            return this.renderValues();
          }
        }]);

        return GLTextureGraphical;
      }(GLTextureUnsigned);

      module.exports = {
        GLTextureGraphical: GLTextureGraphical
      };
    }, {
      "./unsigned": 33
    }],
    27: [function (require, module, exports) {
      var _require60 = require('../../../texture'),
          Texture = _require60.Texture;

      var GLTexture =
      /*#__PURE__*/
      function (_Texture) {
        _inherits(GLTexture, _Texture);

        function GLTexture() {
          _classCallCheck(this, GLTexture);

          return _possibleConstructorReturn(this, _getPrototypeOf(GLTexture).apply(this, arguments));
        }

        _createClass(GLTexture, [{
          key: "clone",
          value: function clone() {
            var gl = this.context,
                size = this.size,
                texture = this.texture;
            gl.activeTexture(gl.TEXTURE0);
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
            var target = gl.createTexture();
            gl.activeTexture(gl.TEXTURE0);
            gl.bindTexture(gl.TEXTURE_2D, target);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            gl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat, size[0], size[1], 0, this.textureFormat, this.textureType, null);
            gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, size[0], size[1]);
            return new this.constructor(Object.assign({}, this, {
              texture: target
            }));
          }
        }, {
          key: "textureType",
          get: function get() {
            throw new Error("\"textureType\" not implemented on ".concat(this.name));
          }
        }]);

        return GLTexture;
      }(Texture);

      module.exports = {
        GLTexture: GLTexture
      };
    }, {
      "../../../texture": 112
    }],
    28: [function (require, module, exports) {
      var _require61 = require('../../../utils'),
          utils = _require61.utils;

      var _require62 = require('./float'),
          GLTextureFloat = _require62.GLTextureFloat;

      var GLTextureMemoryOptimized2D =
      /*#__PURE__*/
      function (_GLTextureFloat12) {
        _inherits(GLTextureMemoryOptimized2D, _GLTextureFloat12);

        function GLTextureMemoryOptimized2D(settings) {
          var _this18;

          _classCallCheck(this, GLTextureMemoryOptimized2D);

          _this18 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureMemoryOptimized2D).call(this, settings));
          _this18.type = 'MemoryOptimizedNumberTexture';
          return _this18;
        }

        _createClass(GLTextureMemoryOptimized2D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erectMemoryOptimized2DFloat(this.renderValues(), this.output[0], this.output[1]);
          }
        }]);

        return GLTextureMemoryOptimized2D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureMemoryOptimized2D: GLTextureMemoryOptimized2D
      };
    }, {
      "../../../utils": 113,
      "./float": 25
    }],
    29: [function (require, module, exports) {
      var _require63 = require('../../../utils'),
          utils = _require63.utils;

      var _require64 = require('./float'),
          GLTextureFloat = _require64.GLTextureFloat;

      var GLTextureMemoryOptimized3D =
      /*#__PURE__*/
      function (_GLTextureFloat13) {
        _inherits(GLTextureMemoryOptimized3D, _GLTextureFloat13);

        function GLTextureMemoryOptimized3D(settings) {
          var _this19;

          _classCallCheck(this, GLTextureMemoryOptimized3D);

          _this19 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureMemoryOptimized3D).call(this, settings));
          _this19.type = 'MemoryOptimizedNumberTexture';
          return _this19;
        }

        _createClass(GLTextureMemoryOptimized3D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erectMemoryOptimized3DFloat(this.renderValues(), this.output[0], this.output[1], this.output[2]);
          }
        }]);

        return GLTextureMemoryOptimized3D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureMemoryOptimized3D: GLTextureMemoryOptimized3D
      };
    }, {
      "../../../utils": 113,
      "./float": 25
    }],
    30: [function (require, module, exports) {
      var _require65 = require('../../../utils'),
          utils = _require65.utils;

      var _require66 = require('./float'),
          GLTextureFloat = _require66.GLTextureFloat;

      var GLTextureMemoryOptimized =
      /*#__PURE__*/
      function (_GLTextureFloat14) {
        _inherits(GLTextureMemoryOptimized, _GLTextureFloat14);

        function GLTextureMemoryOptimized(settings) {
          var _this20;

          _classCallCheck(this, GLTextureMemoryOptimized);

          _this20 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureMemoryOptimized).call(this, settings));
          _this20.type = 'MemoryOptimizedNumberTexture';
          return _this20;
        }

        _createClass(GLTextureMemoryOptimized, [{
          key: "toArray",
          value: function toArray() {
            return utils.erectMemoryOptimizedFloat(this.renderValues(), this.output[0]);
          }
        }]);

        return GLTextureMemoryOptimized;
      }(GLTextureFloat);

      module.exports = {
        GLTextureMemoryOptimized: GLTextureMemoryOptimized
      };
    }, {
      "../../../utils": 113,
      "./float": 25
    }],
    31: [function (require, module, exports) {
      var _require67 = require('../../../utils'),
          utils = _require67.utils;

      var _require68 = require('./unsigned'),
          GLTextureUnsigned = _require68.GLTextureUnsigned;

      var GLTextureUnsigned2D =
      /*#__PURE__*/
      function (_GLTextureUnsigned2) {
        _inherits(GLTextureUnsigned2D, _GLTextureUnsigned2);

        function GLTextureUnsigned2D(settings) {
          var _this21;

          _classCallCheck(this, GLTextureUnsigned2D);

          _this21 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureUnsigned2D).call(this, settings));
          _this21.type = 'NumberTexture';
          return _this21;
        }

        _createClass(GLTextureUnsigned2D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect2DPackedFloat(this.renderValues(), this.output[0], this.output[1]);
          }
        }]);

        return GLTextureUnsigned2D;
      }(GLTextureUnsigned);

      module.exports = {
        GLTextureUnsigned2D: GLTextureUnsigned2D
      };
    }, {
      "../../../utils": 113,
      "./unsigned": 33
    }],
    32: [function (require, module, exports) {
      var _require69 = require('../../../utils'),
          utils = _require69.utils;

      var _require70 = require('./unsigned'),
          GLTextureUnsigned = _require70.GLTextureUnsigned;

      var GLTextureUnsigned3D =
      /*#__PURE__*/
      function (_GLTextureUnsigned3) {
        _inherits(GLTextureUnsigned3D, _GLTextureUnsigned3);

        function GLTextureUnsigned3D(settings) {
          var _this22;

          _classCallCheck(this, GLTextureUnsigned3D);

          _this22 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureUnsigned3D).call(this, settings));
          _this22.type = 'NumberTexture';
          return _this22;
        }

        _createClass(GLTextureUnsigned3D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect3DPackedFloat(this.renderValues(), this.output[0], this.output[1], this.output[2]);
          }
        }]);

        return GLTextureUnsigned3D;
      }(GLTextureUnsigned);

      module.exports = {
        GLTextureUnsigned3D: GLTextureUnsigned3D
      };
    }, {
      "../../../utils": 113,
      "./unsigned": 33
    }],
    33: [function (require, module, exports) {
      var _require71 = require('../../../utils'),
          utils = _require71.utils;

      var _require72 = require('./index'),
          GLTexture = _require72.GLTexture;

      var GLTextureUnsigned =
      /*#__PURE__*/
      function (_GLTexture2) {
        _inherits(GLTextureUnsigned, _GLTexture2);

        _createClass(GLTextureUnsigned, [{
          key: "textureType",
          get: function get() {
            return this.context.UNSIGNED_BYTE;
          }
        }]);

        function GLTextureUnsigned(settings) {
          var _this23;

          _classCallCheck(this, GLTextureUnsigned);

          _this23 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureUnsigned).call(this, settings));
          _this23.type = 'NumberTexture';
          return _this23;
        }

        _createClass(GLTextureUnsigned, [{
          key: "renderRawOutput",
          value: function renderRawOutput() {
            var gl = this.context;
            var framebuffer = gl.createFramebuffer();
            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0);
            var result = new Uint8Array(this.size[0] * this.size[1] * 4);
            gl.readPixels(0, 0, this.size[0], this.size[1], gl.RGBA, gl.UNSIGNED_BYTE, result);
            return result;
          }
        }, {
          key: "renderValues",
          value: function renderValues() {
            if (this._deleted) return null;
            return new Float32Array(this.renderRawOutput().buffer);
          }
        }, {
          key: "toArray",
          value: function toArray() {
            return utils.erectPackedFloat(this.renderValues(), this.output[0]);
          }
        }]);

        return GLTextureUnsigned;
      }(GLTexture);

      module.exports = {
        GLTextureUnsigned: GLTextureUnsigned
      };
    }, {
      "../../../utils": 113,
      "./index": 27
    }],
    34: [function (require, module, exports) {
      var getContext = require('gl');

      var _require73 = require('../web-gl/kernel'),
          WebGLKernel = _require73.WebGLKernel;

      var _require74 = require('../gl/kernel-string'),
          glKernelString = _require74.glKernelString;

      var isSupported = null;
      var testCanvas = null;
      var testContext = null;
      var testExtensions = null;
      var features = null;

      var HeadlessGLKernel =
      /*#__PURE__*/
      function (_WebGLKernel) {
        _inherits(HeadlessGLKernel, _WebGLKernel);

        function HeadlessGLKernel() {
          _classCallCheck(this, HeadlessGLKernel);

          return _possibleConstructorReturn(this, _getPrototypeOf(HeadlessGLKernel).apply(this, arguments));
        }

        _createClass(HeadlessGLKernel, [{
          key: "initCanvas",
          value: function initCanvas() {
            return {};
          }
        }, {
          key: "initContext",
          value: function initContext() {
            return getContext(2, 2, {
              preserveDrawingBuffer: true
            });
          }
        }, {
          key: "initExtensions",
          value: function initExtensions() {
            this.extensions = {
              STACKGL_resize_drawingbuffer: this.context.getExtension('STACKGL_resize_drawingbuffer'),
              STACKGL_destroy_context: this.context.getExtension('STACKGL_destroy_context'),
              OES_texture_float: this.context.getExtension('OES_texture_float'),
              OES_texture_float_linear: this.context.getExtension('OES_texture_float_linear'),
              OES_element_index_uint: this.context.getExtension('OES_element_index_uint'),
              WEBGL_draw_buffers: this.context.getExtension('WEBGL_draw_buffers')
            };
          }
        }, {
          key: "build",
          value: function build() {
            _get(_getPrototypeOf(HeadlessGLKernel.prototype), "build", this).apply(this, arguments);

            if (!this.fallbackRequested) {
              this.extensions.STACKGL_resize_drawingbuffer.resize(this.maxTexSize[0], this.maxTexSize[1]);
            }
          }
        }, {
          key: "destroyExtensions",
          value: function destroyExtensions() {
            this.extensions.STACKGL_resize_drawingbuffer = null;
            this.extensions.STACKGL_destroy_context = null;
            this.extensions.OES_texture_float = null;
            this.extensions.OES_texture_float_linear = null;
            this.extensions.OES_element_index_uint = null;
            this.extensions.WEBGL_draw_buffers = null;
          }
        }, {
          key: "toString",
          value: function toString() {
            var setupContextString = "const gl = context || require('gl')(1, 1);\n";
            var destroyContextString = "    if (!context) { gl.getExtension('STACKGL_destroy_context').destroy(); }\n";
            return glKernelString(this.constructor, arguments, this, setupContextString, destroyContextString);
          }
        }, {
          key: "setOutput",
          value: function setOutput(output) {
            _get(_getPrototypeOf(HeadlessGLKernel.prototype), "setOutput", this).call(this, output);

            if (this.graphical && this.extensions.STACKGL_resize_drawingbuffer) {
              this.extensions.STACKGL_resize_drawingbuffer.resize(this.maxTexSize[0], this.maxTexSize[1]);
            }

            return this;
          }
        }], [{
          key: "setupFeatureChecks",
          value: function setupFeatureChecks() {
            testCanvas = null;
            testExtensions = null;
            if (typeof getContext !== 'function') return;

            try {
              testContext = getContext(2, 2, {
                preserveDrawingBuffer: true
              });
              if (!testContext || !testContext.getExtension) return;
              testExtensions = {
                STACKGL_resize_drawingbuffer: testContext.getExtension('STACKGL_resize_drawingbuffer'),
                STACKGL_destroy_context: testContext.getExtension('STACKGL_destroy_context'),
                OES_texture_float: testContext.getExtension('OES_texture_float'),
                OES_texture_float_linear: testContext.getExtension('OES_texture_float_linear'),
                OES_element_index_uint: testContext.getExtension('OES_element_index_uint'),
                WEBGL_draw_buffers: testContext.getExtension('WEBGL_draw_buffers'),
                WEBGL_color_buffer_float: testContext.getExtension('WEBGL_color_buffer_float')
              };
              features = this.getFeatures();
            } catch (e) {
              console.warn(e);
            }
          }
        }, {
          key: "isContextMatch",
          value: function isContextMatch(context) {
            try {
              return context.getParameter(context.RENDERER) === 'ANGLE';
            } catch (e) {
              return false;
            }
          }
        }, {
          key: "getIsTextureFloat",
          value: function getIsTextureFloat() {
            return Boolean(testExtensions.OES_texture_float);
          }
        }, {
          key: "getIsDrawBuffers",
          value: function getIsDrawBuffers() {
            return Boolean(testExtensions.WEBGL_draw_buffers);
          }
        }, {
          key: "getChannelCount",
          value: function getChannelCount() {
            return testExtensions.WEBGL_draw_buffers ? testContext.getParameter(testExtensions.WEBGL_draw_buffers.MAX_DRAW_BUFFERS_WEBGL) : 1;
          }
        }, {
          key: "getMaxTextureSize",
          value: function getMaxTextureSize() {
            return testContext.getParameter(testContext.MAX_TEXTURE_SIZE);
          }
        }, {
          key: "destroyContext",
          value: function destroyContext(context) {
            var extension = context.getExtension('STACKGL_destroy_context');

            if (extension && extension.destroy) {
              extension.destroy();
            }
          }
        }, {
          key: "isSupported",
          get: function get() {
            if (isSupported !== null) return isSupported;
            this.setupFeatureChecks();
            isSupported = testContext !== null;
            return isSupported;
          }
        }, {
          key: "testCanvas",
          get: function get() {
            return testCanvas;
          }
        }, {
          key: "testContext",
          get: function get() {
            return testContext;
          }
        }, {
          key: "features",
          get: function get() {
            return features;
          }
        }]);

        return HeadlessGLKernel;
      }(WebGLKernel);

      module.exports = {
        HeadlessGLKernel: HeadlessGLKernel
      };
    }, {
      "../gl/kernel-string": 12,
      "../web-gl/kernel": 69,
      "gl": 2
    }],
    35: [function (require, module, exports) {
      var KernelValue =
      /*#__PURE__*/
      function () {
        function KernelValue(value, settings) {
          _classCallCheck(this, KernelValue);

          var name = settings.name,
              kernel = settings.kernel,
              context = settings.context,
              checkContext = settings.checkContext,
              onRequestContextHandle = settings.onRequestContextHandle,
              onUpdateValueMismatch = settings.onUpdateValueMismatch,
              origin = settings.origin,
              strictIntegers = settings.strictIntegers,
              type = settings.type,
              tactic = settings.tactic;

          if (!name) {
            throw new Error('name not set');
          }

          if (!type) {
            throw new Error('type not set');
          }

          if (!origin) {
            throw new Error('origin not set');
          }

          if (origin !== 'user' && origin !== 'constants') {
            throw new Error("origin must be \"user\" or \"constants\" value is \"".concat(origin, "\""));
          }

          if (!onRequestContextHandle) {
            throw new Error('onRequestContextHandle is not set');
          }

          this.name = name;
          this.origin = origin;
          this.tactic = tactic;
          this.id = "".concat(this.origin, "_").concat(name);
          this.varName = origin === 'constants' ? "constants.".concat(name) : name;
          this.kernel = kernel;
          this.strictIntegers = strictIntegers;
          this.type = value.type || type;
          this.size = value.size || null;
          this.index = null;
          this.context = context;
          this.checkContext = checkContext !== null && checkContext !== undefined ? checkContext : true;
          this.contextHandle = null;
          this.onRequestContextHandle = onRequestContextHandle;
          this.onUpdateValueMismatch = onUpdateValueMismatch;
          this.forceUploadEachRun = null;
        }

        _createClass(KernelValue, [{
          key: "getSource",
          value: function getSource() {
            throw new Error("\"getSource\" not defined on ".concat(this.constructor.name));
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            throw new Error("\"updateValue\" not defined on ".concat(this.constructor.name));
          }
        }]);

        return KernelValue;
      }();

      module.exports = {
        KernelValue: KernelValue
      };
    }, {}],
    36: [function (require, module, exports) {
      var _require75 = require('../utils'),
          utils = _require75.utils;

      var _require76 = require('../input'),
          Input = _require76.Input;

      var Kernel =
      /*#__PURE__*/
      function () {
        _createClass(Kernel, null, [{
          key: "isContextMatch",
          value: function isContextMatch(context) {
            throw new Error("\"isContextMatch\" not implemented on ".concat(this.name));
          }
        }, {
          key: "getFeatures",
          value: function getFeatures() {
            throw new Error("\"getFeatures\" not implemented on ".concat(this.name));
          }
        }, {
          key: "destroyContext",
          value: function destroyContext(context) {
            throw new Error("\"destroyContext\" called on ".concat(this.name));
          }
        }, {
          key: "nativeFunctionArguments",
          value: function nativeFunctionArguments() {
            throw new Error("\"nativeFunctionArguments\" called on ".concat(this.name));
          }
        }, {
          key: "nativeFunctionReturnType",
          value: function nativeFunctionReturnType() {
            throw new Error("\"nativeFunctionReturnType\" called on ".concat(this.name));
          }
        }, {
          key: "combineKernels",
          value: function combineKernels() {
            throw new Error("\"combineKernels\" called on ".concat(this.name));
          }
        }, {
          key: "isSupported",
          get: function get() {
            throw new Error("\"isSupported\" not implemented on ".concat(this.name));
          }
        }]);

        function Kernel(source, settings) {
          _classCallCheck(this, Kernel);

          if (_typeof(source) !== 'object') {
            if (typeof source !== 'string') {
              throw new Error('source not a string');
            }

            if (!utils.isFunctionString(source)) {
              throw new Error('source not a function string');
            }
          }

          this.useLegacyEncoder = false;
          this.fallbackRequested = false;
          this.onRequestFallback = null;
          this.argumentNames = typeof source === 'string' ? utils.getArgumentNamesFromString(source) : null;
          this.argumentTypes = null;
          this.argumentSizes = null;
          this.argumentBitRatios = null;
          this.kernelArguments = null;
          this.kernelConstants = null;
          this.forceUploadKernelConstants = null;
          this.source = source;
          this.output = null;
          this.debug = false;
          this.graphical = false;
          this.loopMaxIterations = 0;
          this.constants = null;
          this.constantTypes = null;
          this.constantBitRatios = null;
          this.dynamicArguments = false;
          this.dynamicOutput = false;
          this.canvas = null;
          this.context = null;
          this.checkContext = null;
          this.gpu = null;
          this.functions = null;
          this.nativeFunctions = null;
          this.injectedNative = null;
          this.subKernels = null;
          this.validate = true;
          this.immutable = false;
          this.pipeline = false;
          this.precision = null;
          this.tactic = null;
          this.plugins = null;
          this.returnType = null;
          this.leadingReturnStatement = null;
          this.followingReturnStatement = null;
          this.optimizeFloatMemory = null;
          this.strictIntegers = false;
          this.fixIntegerDivisionAccuracy = null;
          this.warnVarUsage = true;
          this.onIstanbulCoverageVariable = null;
          this.removeIstanbulCoverage = false;
          this.built = false;
        }

        _createClass(Kernel, [{
          key: "mergeSettings",
          value: function mergeSettings(settings) {
            for (var p in settings) {
              if (!settings.hasOwnProperty(p) || !this.hasOwnProperty(p)) continue;

              switch (p) {
                case 'output':
                  if (!Array.isArray(settings.output)) {
                    this.setOutput(settings.output);
                    continue;
                  }

                  break;

                case 'functions':
                  if (typeof settings.functions[0] === 'function') {
                    this.functions = settings.functions.map(function (source) {
                      return utils.functionToIFunction(source);
                    });
                    continue;
                  }

                  break;

                case 'graphical':
                  if (settings[p] && !settings.hasOwnProperty('precision')) {
                    this.precision = 'unsigned';
                  }

                  this[p] = settings[p];
                  continue;

                case 'removeIstanbulCoverage':
                  if (settings[p] !== null) {
                    this[p] = settings[p];
                  }

                  continue;
              }

              this[p] = settings[p];
            }

            if (!this.canvas) this.canvas = this.initCanvas();
            if (!this.context) this.context = this.initContext();
            if (!this.plugins) this.plugins = this.initPlugins(settings);
          }
        }, {
          key: "build",
          value: function build() {
            throw new Error("\"build\" not defined on ".concat(this.constructor.name));
          }
        }, {
          key: "run",
          value: function run() {
            throw new Error("\"run\" not defined on ".concat(this.constructor.name));
          }
        }, {
          key: "initCanvas",
          value: function initCanvas() {
            throw new Error("\"initCanvas\" not defined on ".concat(this.constructor.name));
          }
        }, {
          key: "initContext",
          value: function initContext() {
            throw new Error("\"initContext\" not defined on ".concat(this.constructor.name));
          }
        }, {
          key: "initPlugins",
          value: function initPlugins(settings) {
            throw new Error("\"initPlugins\" not defined on ".concat(this.constructor.name));
          }
        }, {
          key: "setupArguments",
          value: function setupArguments(args) {
            this.kernelArguments = [];

            if (!this.argumentTypes) {
              if (!this.argumentTypes) {
                this.argumentTypes = [];

                for (var i = 0; i < args.length; i++) {
                  var argType = utils.getVariableType(args[i], this.strictIntegers);
                  var type = argType === 'Integer' ? 'Number' : argType;
                  this.argumentTypes.push(type);
                  this.kernelArguments.push({
                    type: type
                  });
                }
              }
            } else {
              for (var _i11 = 0; _i11 < this.argumentTypes.length; _i11++) {
                this.kernelArguments.push({
                  type: this.argumentTypes[_i11]
                });
              }
            }

            this.argumentSizes = new Array(args.length);
            this.argumentBitRatios = new Int32Array(args.length);

            for (var _i12 = 0; _i12 < args.length; _i12++) {
              var arg = args[_i12];
              this.argumentSizes[_i12] = arg.constructor === Input ? arg.size : null;
              this.argumentBitRatios[_i12] = this.getBitRatio(arg);
            }

            if (this.argumentNames.length !== args.length) {
              throw new Error("arguments are miss-aligned");
            }
          }
        }, {
          key: "setupConstants",
          value: function setupConstants() {
            this.kernelConstants = [];
            var needsConstantTypes = this.constantTypes === null;

            if (needsConstantTypes) {
              this.constantTypes = {};
            }

            this.constantBitRatios = {};

            if (this.constants) {
              for (var _name6 in this.constants) {
                if (needsConstantTypes) {
                  var type = utils.getVariableType(this.constants[_name6], this.strictIntegers);
                  this.constantTypes[_name6] = type;
                  this.kernelConstants.push({
                    name: _name6,
                    type: type
                  });
                } else {
                  this.kernelConstants.push({
                    name: _name6,
                    type: this.constantTypes[_name6]
                  });
                }

                this.constantBitRatios[_name6] = this.getBitRatio(this.constants[_name6]);
              }
            }
          }
        }, {
          key: "setOptimizeFloatMemory",
          value: function setOptimizeFloatMemory(flag) {
            this.optimizeFloatMemory = flag;
            return this;
          }
        }, {
          key: "toKernelOutput",
          value: function toKernelOutput(output) {
            if (output.hasOwnProperty('x')) {
              if (output.hasOwnProperty('y')) {
                if (output.hasOwnProperty('z')) {
                  return [output.x, output.y, output.z];
                } else {
                  return [output.x, output.y];
                }
              } else {
                return [output.x];
              }
            } else {
              return output;
            }
          }
        }, {
          key: "setOutput",
          value: function setOutput(output) {
            this.output = this.toKernelOutput(output);
            return this;
          }
        }, {
          key: "setDebug",
          value: function setDebug(flag) {
            this.debug = flag;
            return this;
          }
        }, {
          key: "setGraphical",
          value: function setGraphical(flag) {
            this.graphical = flag;
            this.precision = 'unsigned';
            return this;
          }
        }, {
          key: "setLoopMaxIterations",
          value: function setLoopMaxIterations(max) {
            this.loopMaxIterations = max;
            return this;
          }
        }, {
          key: "setConstants",
          value: function setConstants(constants) {
            this.constants = constants;
            return this;
          }
        }, {
          key: "setConstantTypes",
          value: function setConstantTypes(constantTypes) {
            this.constantTypes = constantTypes;
            return this;
          }
        }, {
          key: "setFunctions",
          value: function setFunctions(functions) {
            if (typeof functions[0] === 'function') {
              this.functions = functions.map(function (source) {
                return utils.functionToIFunction(source);
              });
            } else {
              this.functions = functions;
            }

            return this;
          }
        }, {
          key: "setNativeFunctions",
          value: function setNativeFunctions(nativeFunctions) {
            this.nativeFunctions = nativeFunctions;
            return this;
          }
        }, {
          key: "setInjectedNative",
          value: function setInjectedNative(injectedNative) {
            this.injectedNative = injectedNative;
            return this;
          }
        }, {
          key: "setPipeline",
          value: function setPipeline(flag) {
            this.pipeline = flag;
            return this;
          }
        }, {
          key: "setPrecision",
          value: function setPrecision(flag) {
            this.precision = flag;
            return this;
          }
        }, {
          key: "setOutputToTexture",
          value: function setOutputToTexture(flag) {
            utils.warnDeprecated('method', 'setOutputToTexture', 'setPipeline');
            this.pipeline = flag;
            return this;
          }
        }, {
          key: "setImmutable",
          value: function setImmutable(flag) {
            this.immutable = flag;
            return this;
          }
        }, {
          key: "setCanvas",
          value: function setCanvas(canvas) {
            this.canvas = canvas;
            return this;
          }
        }, {
          key: "setStrictIntegers",
          value: function setStrictIntegers(flag) {
            this.strictIntegers = flag;
            return this;
          }
        }, {
          key: "setDynamicOutput",
          value: function setDynamicOutput(flag) {
            this.dynamicOutput = flag;
            return this;
          }
        }, {
          key: "setHardcodeConstants",
          value: function setHardcodeConstants(flag) {
            utils.warnDeprecated('method', 'setHardcodeConstants');
            this.setDynamicOutput(flag);
            this.setDynamicArguments(flag);
            return this;
          }
        }, {
          key: "setDynamicArguments",
          value: function setDynamicArguments(flag) {
            this.dynamicArguments = flag;
            return this;
          }
        }, {
          key: "setUseLegacyEncoder",
          value: function setUseLegacyEncoder(flag) {
            this.useLegacyEncoder = flag;
            return this;
          }
        }, {
          key: "setWarnVarUsage",
          value: function setWarnVarUsage(flag) {
            this.warnVarUsage = flag;
            return this;
          }
        }, {
          key: "getCanvas",
          value: function getCanvas() {
            utils.warnDeprecated('method', 'getCanvas');
            return this.canvas;
          }
        }, {
          key: "getWebGl",
          value: function getWebGl() {
            utils.warnDeprecated('method', 'getWebGl');
            return this.context;
          }
        }, {
          key: "setContext",
          value: function setContext(context) {
            this.context = context;
            return this;
          }
        }, {
          key: "setArgumentTypes",
          value: function setArgumentTypes(argumentTypes) {
            if (Array.isArray(argumentTypes)) {
              this.argumentTypes = argumentTypes;
            } else {
              this.argumentTypes = [];

              for (var p in argumentTypes) {
                if (!argumentTypes.hasOwnProperty(p)) continue;
                var argumentIndex = this.argumentNames.indexOf(p);
                if (argumentIndex === -1) throw new Error("unable to find argument ".concat(p));
                this.argumentTypes[argumentIndex] = argumentTypes[p];
              }
            }

            return this;
          }
        }, {
          key: "setTactic",
          value: function setTactic(tactic) {
            this.tactic = tactic;
            return this;
          }
        }, {
          key: "requestFallback",
          value: function requestFallback(args) {
            if (!this.onRequestFallback) {
              throw new Error("\"onRequestFallback\" not defined on ".concat(this.constructor.name));
            }

            this.fallbackRequested = true;
            return this.onRequestFallback(args);
          }
        }, {
          key: "validateSettings",
          value: function validateSettings() {
            throw new Error("\"validateSettings\" not defined on ".concat(this.constructor.name));
          }
        }, {
          key: "addSubKernel",
          value: function addSubKernel(subKernel) {
            if (this.subKernels === null) {
              this.subKernels = [];
            }

            if (!subKernel.source) throw new Error('subKernel missing "source" property');
            if (!subKernel.property && isNaN(subKernel.property)) throw new Error('subKernel missing "property" property');
            if (!subKernel.name) throw new Error('subKernel missing "name" property');
            this.subKernels.push(subKernel);
            return this;
          }
        }, {
          key: "destroy",
          value: function destroy(removeCanvasReferences) {
            throw new Error("\"destroy\" called on ".concat(this.constructor.name));
          }
        }, {
          key: "getBitRatio",
          value: function getBitRatio(value) {
            if (this.precision === 'single') {
              return 4;
            } else if (Array.isArray(value[0])) {
              return this.getBitRatio(value[0]);
            } else if (value.constructor === Input) {
              return this.getBitRatio(value.value);
            }

            switch (value.constructor) {
              case Uint8ClampedArray:
              case Uint8Array:
              case Int8Array:
                return 1;

              case Uint16Array:
              case Int16Array:
                return 2;

              case Float32Array:
              case Int32Array:
              default:
                return 4;
            }
          }
        }, {
          key: "getPixels",
          value: function getPixels(flip) {
            throw new Error("\"getPixels\" called on ".concat(this.constructor.name));
          }
        }, {
          key: "checkOutput",
          value: function checkOutput() {
            if (!this.output || !utils.isArray(this.output)) throw new Error('kernel.output not an array');
            if (this.output.length < 1) throw new Error('kernel.output is empty, needs at least 1 value');

            for (var i = 0; i < this.output.length; i++) {
              if (isNaN(this.output[i]) || this.output[i] < 1) {
                throw new Error("".concat(this.constructor.name, ".output[").concat(i, "] incorrectly defined as `").concat(this.output[i], "`, needs to be numeric, and greater than 0"));
              }
            }
          }
        }, {
          key: "prependString",
          value: function prependString(value) {
            throw new Error("\"prependString\" called on ".concat(this.constructor.name));
          }
        }, {
          key: "hasPrependString",
          value: function hasPrependString(value) {
            throw new Error("\"hasPrependString\" called on ".concat(this.constructor.name));
          }
        }, {
          key: "toJSON",
          value: function toJSON() {
            return {
              settings: {
                output: this.output,
                pipeline: this.pipeline,
                argumentNames: this.argumentNames,
                argumentsTypes: this.argumentTypes,
                constants: this.constants,
                pluginNames: this.plugins ? this.plugins.map(function (plugin) {
                  return plugin.name;
                }) : null,
                returnType: this.returnType
              }
            };
          }
        }]);

        return Kernel;
      }();

      module.exports = {
        Kernel: Kernel
      };
    }, {
      "../input": 109,
      "../utils": 113
    }],
    37: [function (require, module, exports) {
      var fragmentShader = "__HEADER__;\n__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n\nconst int LOOP_MAX = __LOOP_MAX__;\n\n__PLUGINS__;\n__CONSTANTS__;\n\nvarying vec2 vTexCoord;\n\nvec4 round(vec4 x) {\n  return floor(x + 0.5);\n}\n\nfloat round(float x) {\n  return floor(x + 0.5);\n}\n\nconst int BIT_COUNT = 32;\nint modi(int x, int y) {\n  return x - y * (x / y);\n}\n\nint bitwiseOr(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) || (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseXOR(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) != (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseAnd(int a, int b) {\n  int result = 0;\n  int n = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) && (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 && b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseNot(int a) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (modi(a, 2) == 0) {\n      result += n;    \n    }\n    a = a / 2;\n    n = n * 2;\n  }\n  return result;\n}\nint bitwiseZeroFillLeftShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n *= 2;\n  }\n\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nint bitwiseSignedRightShift(int num, int shifts) {\n  return int(floor(float(num) / pow(2.0, float(shifts))));\n}\n\nint bitwiseZeroFillRightShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n /= 2;\n  }\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nvec2 integerMod(vec2 x, float y) {\n  vec2 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec3 integerMod(vec3 x, float y) {\n  vec3 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec4 integerMod(vec4 x, vec4 y) {\n  vec4 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nfloat integerMod(float x, float y) {\n  float res = floor(mod(x, y));\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\n}\n\nint integerMod(int x, int y) {\n  return x - (y * int(x / y));\n}\n\n__DIVIDE_WITH_INTEGER_CHECK__;\n\n// Here be dragons!\n// DO NOT OPTIMIZE THIS CODE\n// YOU WILL BREAK SOMETHING ON SOMEBODY'S MACHINE\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\nfloat decode32(vec4 texel) {\n  __DECODE32_ENDIANNESS__;\n  texel *= 255.0;\n  vec2 gte128;\n  gte128.x = texel.b >= 128.0 ? 1.0 : 0.0;\n  gte128.y = texel.a >= 128.0 ? 1.0 : 0.0;\n  float exponent = 2.0 * texel.a - 127.0 + dot(gte128, MAGIC_VEC);\n  float res = exp2(round(exponent));\n  texel.b = texel.b - 128.0 * gte128.x;\n  res = dot(texel, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;\n  res *= gte128.y * -2.0 + 1.0;\n  return res;\n}\n\nfloat decode16(vec4 texel, int index) {\n  int channel = integerMod(index, 2);\n  if (channel == 0) return texel.r * 255.0 + texel.g * 65280.0;\n  if (channel == 1) return texel.b * 255.0 + texel.a * 65280.0;\n  return 0.0;\n}\n\nfloat decode8(vec4 texel, int index) {\n  int channel = integerMod(index, 4);\n  if (channel == 0) return texel.r * 255.0;\n  if (channel == 1) return texel.g * 255.0;\n  if (channel == 2) return texel.b * 255.0;\n  if (channel == 3) return texel.a * 255.0;\n  return 0.0;\n}\n\nvec4 legacyEncode32(float f) {\n  float F = abs(f);\n  float sign = f < 0.0 ? 1.0 : 0.0;\n  float exponent = floor(log2(F));\n  float mantissa = (exp2(-exponent) * F);\n  // exponent += floor(log2(mantissa));\n  vec4 texel = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\n  texel.rg = integerMod(texel.rg, 256.0);\n  texel.b = integerMod(texel.b, 128.0);\n  texel.a = exponent*0.5 + 63.5;\n  texel.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\n  texel = floor(texel);\n  texel *= 0.003921569; // 1/255\n  __ENCODE32_ENDIANNESS__;\n  return texel;\n}\n\n// https://github.com/gpujs/gpu.js/wiki/Encoder-details\nvec4 encode32(float value) {\n  if (value == 0.0) return vec4(0, 0, 0, 0);\n\n  float exponent;\n  float mantissa;\n  vec4  result;\n  float sgn;\n\n  sgn = step(0.0, -value);\n  value = abs(value);\n\n  exponent = floor(log2(value));\n\n  mantissa = value*pow(2.0, -exponent)-1.0;\n  exponent = exponent+127.0;\n  result   = vec4(0,0,0,0);\n\n  result.a = floor(exponent/2.0);\n  exponent = exponent - result.a*2.0;\n  result.a = result.a + 128.0*sgn;\n\n  result.b = floor(mantissa * 128.0);\n  mantissa = mantissa - result.b / 128.0;\n  result.b = result.b + exponent*128.0;\n\n  result.g = floor(mantissa*32768.0);\n  mantissa = mantissa - result.g/32768.0;\n\n  result.r = floor(mantissa*8388608.0);\n  return result/255.0;\n}\n// Dragons end here\n\nint index;\nivec3 threadId;\n\nivec3 indexTo3D(int idx, ivec3 texDim) {\n  int z = int(idx / (texDim.x * texDim.y));\n  idx -= z * int(texDim.x * texDim.y);\n  int y = int(idx / texDim.x);\n  int x = int(integerMod(idx, texDim.x));\n  return ivec3(x, y, z);\n}\n\nfloat get32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  return decode32(texel);\n}\n\nfloat get16(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x * 2;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize.x * 2, texSize.y));\n  return decode16(texel, index);\n}\n\nfloat get8(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x * 4;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize.x * 4, texSize.y));\n  return decode8(texel, index);\n}\n\nfloat getMemoryOptimized32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 4);\n  index = index / 4;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  if (channel == 0) return texel.r;\n  if (channel == 1) return texel.g;\n  if (channel == 2) return texel.b;\n  if (channel == 3) return texel.a;\n  return 0.0;\n}\n\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  return texture2D(tex, st / vec2(texSize));\n}\n\nfloat getFloatFromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return result[0];\n}\n\nvec2 getVec2FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec2(result[0], result[1]);\n}\n\nvec2 getMemoryOptimizedVec2(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int channel = integerMod(index, 2);\n  index = index / 2;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  if (channel == 0) return vec2(texel.r, texel.g);\n  if (channel == 1) return vec2(texel.b, texel.a);\n  return vec2(0.0, 0.0);\n}\n\nvec3 getVec3FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec3(result[0], result[1], result[2]);\n}\n\nvec3 getMemoryOptimizedVec3(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int fieldIndex = 3 * (x + texDim.x * (y + texDim.y * z));\n  int vectorIndex = fieldIndex / 4;\n  int vectorOffset = fieldIndex - vectorIndex * 4;\n  int readY = vectorIndex / texSize.x;\n  int readX = vectorIndex - readY * texSize.x;\n  vec4 tex1 = texture2D(tex, (vec2(readX, readY) + 0.5) / vec2(texSize));\n  \n  if (vectorOffset == 0) {\n    return tex1.xyz;\n  } else if (vectorOffset == 1) {\n    return tex1.yzw;\n  } else {\n    readX++;\n    if (readX >= texSize.x) {\n      readX = 0;\n      readY++;\n    }\n    vec4 tex2 = texture2D(tex, vec2(readX, readY) / vec2(texSize));\n    if (vectorOffset == 2) {\n      return vec3(tex1.z, tex1.w, tex2.x);\n    } else {\n      return vec3(tex1.w, tex2.x, tex2.y);\n    }\n  }\n}\n\nvec4 getVec4FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  return getImage2D(tex, texSize, texDim, z, y, x);\n}\n\nvec4 getMemoryOptimizedVec4(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 2);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  return vec4(texel.r, texel.g, texel.b, texel.a);\n}\n\nvec4 actualColor;\nvoid color(float r, float g, float b, float a) {\n  actualColor = vec4(r,g,b,a);\n}\n\nvoid color(float r, float g, float b) {\n  color(r,g,b,1.0);\n}\n\nvoid color(sampler2D image) {\n  actualColor = texture2D(image, vTexCoord);\n}\n\n__INJECTED_NATIVE__;\n__MAIN_CONSTANTS__;\n__MAIN_ARGUMENTS__;\n__KERNEL__;\n\nvoid main(void) {\n  index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\n  __MAIN_RESULT__;\n}";
      module.exports = {
        fragmentShader: fragmentShader
      };
    }, {}],
    38: [function (require, module, exports) {
      var _require77 = require('../function-node'),
          FunctionNode = _require77.FunctionNode;

      var WebGLFunctionNode =
      /*#__PURE__*/
      function (_FunctionNode2) {
        _inherits(WebGLFunctionNode, _FunctionNode2);

        function WebGLFunctionNode(source, settings) {
          var _this24;

          _classCallCheck(this, WebGLFunctionNode);

          _this24 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLFunctionNode).call(this, source, settings));

          if (settings && settings.hasOwnProperty('fixIntegerDivisionAccuracy')) {
            _this24.fixIntegerDivisionAccuracy = settings.fixIntegerDivisionAccuracy;
          }

          return _this24;
        }

        _createClass(WebGLFunctionNode, [{
          key: "astFunction",
          value: function astFunction(ast, retArr) {
            if (this.isRootKernel) {
              retArr.push('void');
            } else {
              if (!this.returnType) {
                var lastReturn = this.findLastReturn();

                if (lastReturn) {
                  this.returnType = this.getType(ast.body);

                  if (this.returnType === 'LiteralInteger') {
                    this.returnType = 'Number';
                  }
                }
              }

              var returnType = this.returnType;

              if (!returnType) {
                retArr.push('void');
              } else {
                var type = typeMap[returnType];

                if (!type) {
                  throw new Error("unknown type ".concat(returnType));
                }

                retArr.push(type);
              }
            }

            retArr.push(' ');
            retArr.push(this.name);
            retArr.push('(');

            if (!this.isRootKernel) {
              for (var i = 0; i < this.argumentNames.length; ++i) {
                var argumentName = this.argumentNames[i];

                if (i > 0) {
                  retArr.push(', ');
                }

                var argumentType = this.argumentTypes[this.argumentNames.indexOf(argumentName)];

                if (!argumentType) {
                  throw this.astErrorOutput("Unknown argument ".concat(argumentName, " type"), ast);
                }

                if (argumentType === 'LiteralInteger') {
                  this.argumentTypes[i] = argumentType = 'Number';
                }

                var _type2 = typeMap[argumentType];

                if (!_type2) {
                  throw this.astErrorOutput('Unexpected expression', ast);
                }

                if (_type2 === 'sampler2D' || _type2 === 'sampler2DArray') {
                  retArr.push("".concat(_type2, " user_").concat(argumentName, ",ivec2 user_").concat(argumentName, "Size,ivec3 user_").concat(argumentName, "Dim"));
                } else {
                  retArr.push("".concat(_type2, " user_").concat(argumentName));
                }
              }
            }

            retArr.push(') {\n');

            for (var _i13 = 0; _i13 < ast.body.body.length; ++_i13) {
              this.astGeneric(ast.body.body[_i13], retArr);
              retArr.push('\n');
            }

            retArr.push('}\n');
            return retArr;
          }
        }, {
          key: "astReturnStatement",
          value: function astReturnStatement(ast, retArr) {
            if (!ast.argument) throw this.astErrorOutput('Unexpected return statement', ast);
            this.pushState('skip-literal-correction');
            var type = this.getType(ast.argument);
            this.popState('skip-literal-correction');
            var result = [];

            if (!this.returnType) {
              if (type === 'LiteralInteger' || type === 'Integer') {
                this.returnType = 'Number';
              } else {
                this.returnType = type;
              }
            }

            switch (this.returnType) {
              case 'LiteralInteger':
              case 'Number':
              case 'Float':
                switch (type) {
                  case 'Integer':
                    result.push('float(');
                    this.astGeneric(ast.argument, result);
                    result.push(')');
                    break;

                  case 'LiteralInteger':
                    this.castLiteralToFloat(ast.argument, result);

                    if (this.getType(ast) === 'Integer') {
                      result.unshift('float(');
                      result.push(')');
                    }

                    break;

                  default:
                    this.astGeneric(ast.argument, result);
                }

                break;

              case 'Integer':
                switch (type) {
                  case 'Float':
                  case 'Number':
                    this.castValueToInteger(ast.argument, result);
                    break;

                  case 'LiteralInteger':
                    this.castLiteralToInteger(ast.argument, result);
                    break;

                  default:
                    this.astGeneric(ast.argument, result);
                }

                break;

              case 'Array(4)':
              case 'Array(3)':
              case 'Array(2)':
              case 'Input':
                this.astGeneric(ast.argument, result);
                break;

              default:
                throw this.astErrorOutput("unhandled return type ".concat(this.returnType), ast);
            }

            if (this.isRootKernel) {
              retArr.push("kernelResult = ".concat(result.join(''), ";"));
              retArr.push('return;');
            } else if (this.isSubKernel) {
              retArr.push("subKernelResult_".concat(this.name, " = ").concat(result.join(''), ";"));
              retArr.push("return subKernelResult_".concat(this.name, ";"));
            } else {
              retArr.push("return ".concat(result.join(''), ";"));
            }

            return retArr;
          }
        }, {
          key: "astLiteral",
          value: function astLiteral(ast, retArr) {
            if (isNaN(ast.value)) {
              throw this.astErrorOutput('Non-numeric literal not supported : ' + ast.value, ast);
            }

            var key = this.astKey(ast);

            if (Number.isInteger(ast.value)) {
              if (this.isState('in-for-loop-init') || this.isState('casting-to-integer') || this.isState('building-integer')) {
                this.literalTypes[key] = 'Integer';
                retArr.push("".concat(ast.value));
              } else if (this.isState('casting-to-float') || this.isState('building-float')) {
                this.literalTypes[key] = 'Number';
                retArr.push("".concat(ast.value, ".0"));
              } else {
                this.literalTypes[key] = 'Number';
                retArr.push("".concat(ast.value, ".0"));
              }
            } else if (this.isState('casting-to-integer') || this.isState('building-integer')) {
              this.literalTypes[key] = 'Integer';
              retArr.push(Math.round(ast.value));
            } else {
              this.literalTypes[key] = 'Number';
              retArr.push("".concat(ast.value));
            }

            return retArr;
          }
        }, {
          key: "astBinaryExpression",
          value: function astBinaryExpression(ast, retArr) {
            if (this.checkAndUpconvertOperator(ast, retArr)) {
              return retArr;
            }

            if (this.fixIntegerDivisionAccuracy && ast.operator === '/') {
              retArr.push('div_with_int_check(');
              this.pushState('building-float');

              switch (this.getType(ast.left)) {
                case 'Integer':
                  this.castValueToFloat(ast.left, retArr);
                  break;

                case 'LiteralInteger':
                  this.castLiteralToFloat(ast.left, retArr);
                  break;

                default:
                  this.astGeneric(ast.left, retArr);
              }

              retArr.push(', ');

              switch (this.getType(ast.right)) {
                case 'Integer':
                  this.castValueToFloat(ast.right, retArr);
                  break;

                case 'LiteralInteger':
                  this.castLiteralToFloat(ast.right, retArr);
                  break;

                default:
                  this.astGeneric(ast.right, retArr);
              }

              this.popState('building-float');
              retArr.push(')');
              return retArr;
            }

            retArr.push('(');
            var leftType = this.getType(ast.left) || 'Number';
            var rightType = this.getType(ast.right) || 'Number';

            if (!leftType || !rightType) {
              throw this.astErrorOutput("Unhandled binary expression", ast);
            }

            var key = leftType + ' & ' + rightType;

            switch (key) {
              case 'Integer & Integer':
                this.pushState('building-integer');
                this.astGeneric(ast.left, retArr);
                retArr.push(operatorMap[ast.operator] || ast.operator);
                this.astGeneric(ast.right, retArr);
                this.popState('building-integer');
                break;

              case 'Number & Float':
              case 'Float & Number':
              case 'Float & Float':
              case 'Number & Number':
                this.pushState('building-float');
                this.astGeneric(ast.left, retArr);
                retArr.push(operatorMap[ast.operator] || ast.operator);
                this.astGeneric(ast.right, retArr);
                this.popState('building-float');
                break;

              case 'LiteralInteger & LiteralInteger':
                if (this.isState('casting-to-integer') || this.isState('building-integer')) {
                  this.pushState('building-integer');
                  this.astGeneric(ast.left, retArr);
                  retArr.push(operatorMap[ast.operator] || ast.operator);
                  this.astGeneric(ast.right, retArr);
                  this.popState('building-integer');
                } else {
                  this.pushState('building-float');
                  this.castLiteralToFloat(ast.left, retArr);
                  retArr.push(operatorMap[ast.operator] || ast.operator);
                  this.castLiteralToFloat(ast.right, retArr);
                  this.popState('building-float');
                }

                break;

              case 'Integer & Float':
              case 'Integer & Number':
                if (ast.operator === '>' || ast.operator === '<' && ast.right.type === 'Literal') {
                  if (!Number.isInteger(ast.right.value)) {
                    this.pushState('building-float');
                    this.castValueToFloat(ast.left, retArr);
                    retArr.push(operatorMap[ast.operator] || ast.operator);
                    this.astGeneric(ast.right, retArr);
                    this.popState('building-float');
                    break;
                  }
                }

                this.pushState('building-integer');
                this.astGeneric(ast.left, retArr);
                retArr.push(operatorMap[ast.operator] || ast.operator);
                this.pushState('casting-to-integer');

                if (ast.right.type === 'Literal') {
                  var literalResult = [];
                  this.astGeneric(ast.right, literalResult);
                  var literalType = this.getType(ast.right);

                  if (literalType === 'Integer') {
                    retArr.push(literalResult.join(''));
                  } else {
                    throw this.astErrorOutput("Unhandled binary expression with literal", ast);
                  }
                } else {
                  retArr.push('int(');
                  this.astGeneric(ast.right, retArr);
                  retArr.push(')');
                }

                this.popState('casting-to-integer');
                this.popState('building-integer');
                break;

              case 'Integer & LiteralInteger':
                this.pushState('building-integer');
                this.astGeneric(ast.left, retArr);
                retArr.push(operatorMap[ast.operator] || ast.operator);
                this.castLiteralToInteger(ast.right, retArr);
                this.popState('building-integer');
                break;

              case 'Number & Integer':
                this.pushState('building-float');
                this.astGeneric(ast.left, retArr);
                retArr.push(operatorMap[ast.operator] || ast.operator);
                this.castValueToFloat(ast.right, retArr);
                this.popState('building-float');
                break;

              case 'Float & LiteralInteger':
              case 'Number & LiteralInteger':
                if (this.isState('in-for-loop-test')) {
                  this.pushState('building-integer');
                  retArr.push('int(');
                  this.astGeneric(ast.left, retArr);
                  retArr.push(')');
                  retArr.push(operatorMap[ast.operator] || ast.operator);
                  this.castLiteralToInteger(ast.right, retArr);
                  this.popState('building-integer');
                } else {
                  this.pushState('building-float');
                  this.astGeneric(ast.left, retArr);
                  retArr.push(operatorMap[ast.operator] || ast.operator);
                  this.castLiteralToFloat(ast.right, retArr);
                  this.popState('building-float');
                }

                break;

              case 'LiteralInteger & Float':
              case 'LiteralInteger & Number':
                if (this.isState('in-for-loop-test') || this.isState('in-for-loop-init') || this.isState('casting-to-integer')) {
                  this.pushState('building-integer');
                  this.castLiteralToInteger(ast.left, retArr);
                  retArr.push(operatorMap[ast.operator] || ast.operator);
                  this.castValueToInteger(ast.right, retArr);
                  this.popState('building-integer');
                } else {
                  this.pushState('building-float');
                  this.astGeneric(ast.left, retArr);
                  retArr.push(operatorMap[ast.operator] || ast.operator);
                  this.pushState('casting-to-float');
                  this.astGeneric(ast.right, retArr);
                  this.popState('casting-to-float');
                  this.popState('building-float');
                }

                break;

              case 'LiteralInteger & Integer':
                this.pushState('building-integer');
                this.castLiteralToInteger(ast.left, retArr);
                retArr.push(operatorMap[ast.operator] || ast.operator);
                this.astGeneric(ast.right, retArr);
                this.popState('building-integer');
                break;

              case 'Boolean & Boolean':
                this.pushState('building-boolean');
                this.astGeneric(ast.left, retArr);
                retArr.push(operatorMap[ast.operator] || ast.operator);
                this.astGeneric(ast.right, retArr);
                this.popState('building-boolean');
                break;

              case 'Float & Integer':
                this.pushState('building-float');
                this.astGeneric(ast.left, retArr);
                retArr.push(operatorMap[ast.operator] || ast.operator);
                this.castValueToFloat(ast.right, retArr);
                this.popState('building-float');
                break;

              default:
                throw this.astErrorOutput("Unhandled binary expression between ".concat(key), ast);
            }

            retArr.push(')');
            return retArr;
          }
        }, {
          key: "checkAndUpconvertOperator",
          value: function checkAndUpconvertOperator(ast, retArr) {
            var bitwiseResult = this.checkAndUpconvertBitwiseOperators(ast, retArr);

            if (bitwiseResult) {
              return bitwiseResult;
            }

            var upconvertableOperators = {
              '%': 'mod',
              '**': 'pow'
            };
            var foundOperator = upconvertableOperators[ast.operator];
            if (!foundOperator) return null;
            retArr.push(foundOperator);
            retArr.push('(');

            switch (this.getType(ast.left)) {
              case 'Integer':
                this.castValueToFloat(ast.left, retArr);
                break;

              case 'LiteralInteger':
                this.castLiteralToFloat(ast.left, retArr);
                break;

              default:
                this.astGeneric(ast.left, retArr);
            }

            retArr.push(',');

            switch (this.getType(ast.right)) {
              case 'Integer':
                this.castValueToFloat(ast.right, retArr);
                break;

              case 'LiteralInteger':
                this.castLiteralToFloat(ast.right, retArr);
                break;

              default:
                this.astGeneric(ast.right, retArr);
            }

            retArr.push(')');
            return retArr;
          }
        }, {
          key: "checkAndUpconvertBitwiseOperators",
          value: function checkAndUpconvertBitwiseOperators(ast, retArr) {
            var upconvertableOperators = {
              '&': 'bitwiseAnd',
              '|': 'bitwiseOr',
              '^': 'bitwiseXOR',
              '<<': 'bitwiseZeroFillLeftShift',
              '>>': 'bitwiseSignedRightShift',
              '>>>': 'bitwiseZeroFillRightShift'
            };
            var foundOperator = upconvertableOperators[ast.operator];
            if (!foundOperator) return null;
            retArr.push(foundOperator);
            retArr.push('(');
            var leftType = this.getType(ast.left);

            switch (leftType) {
              case 'Number':
              case 'Float':
                this.castValueToInteger(ast.left, retArr);
                break;

              case 'LiteralInteger':
                this.castLiteralToInteger(ast.left, retArr);
                break;

              default:
                this.astGeneric(ast.left, retArr);
            }

            retArr.push(',');
            var rightType = this.getType(ast.right);

            switch (rightType) {
              case 'Number':
              case 'Float':
                this.castValueToInteger(ast.right, retArr);
                break;

              case 'LiteralInteger':
                this.castLiteralToInteger(ast.right, retArr);
                break;

              default:
                this.astGeneric(ast.right, retArr);
            }

            retArr.push(')');
            return retArr;
          }
        }, {
          key: "checkAndUpconvertBitwiseUnary",
          value: function checkAndUpconvertBitwiseUnary(ast, retArr) {
            var upconvertableOperators = {
              '~': 'bitwiseNot'
            };
            var foundOperator = upconvertableOperators[ast.operator];
            if (!foundOperator) return null;
            retArr.push(foundOperator);
            retArr.push('(');

            switch (this.getType(ast.argument)) {
              case 'Number':
              case 'Float':
                this.castValueToInteger(ast.argument, retArr);
                break;

              case 'LiteralInteger':
                this.castLiteralToInteger(ast.argument, retArr);
                break;

              default:
                this.astGeneric(ast.argument, retArr);
            }

            retArr.push(')');
            return retArr;
          }
        }, {
          key: "castLiteralToInteger",
          value: function castLiteralToInteger(ast, retArr) {
            this.pushState('casting-to-integer');
            this.astGeneric(ast, retArr);
            this.popState('casting-to-integer');
            return retArr;
          }
        }, {
          key: "castLiteralToFloat",
          value: function castLiteralToFloat(ast, retArr) {
            this.pushState('casting-to-float');
            this.astGeneric(ast, retArr);
            this.popState('casting-to-float');
            return retArr;
          }
        }, {
          key: "castValueToInteger",
          value: function castValueToInteger(ast, retArr) {
            this.pushState('casting-to-integer');
            retArr.push('int(');
            this.astGeneric(ast, retArr);
            retArr.push(')');
            this.popState('casting-to-integer');
            return retArr;
          }
        }, {
          key: "castValueToFloat",
          value: function castValueToFloat(ast, retArr) {
            this.pushState('casting-to-float');
            retArr.push('float(');
            this.astGeneric(ast, retArr);
            retArr.push(')');
            this.popState('casting-to-float');
            return retArr;
          }
        }, {
          key: "astIdentifierExpression",
          value: function astIdentifierExpression(idtNode, retArr) {
            if (idtNode.type !== 'Identifier') {
              throw this.astErrorOutput('IdentifierExpression - not an Identifier', idtNode);
            }

            var type = this.getType(idtNode);

            if (idtNode.name === 'Infinity') {
              retArr.push('3.402823466e+38');
            } else if (type === 'Boolean') {
              if (this.argumentNames.indexOf(idtNode.name) > -1) {
                retArr.push("bool(user_".concat(idtNode.name, ")"));
              } else {
                retArr.push("user_".concat(idtNode.name));
              }
            } else {
              retArr.push("user_".concat(idtNode.name));
            }

            return retArr;
          }
        }, {
          key: "astForStatement",
          value: function astForStatement(forNode, retArr) {
            if (forNode.type !== 'ForStatement') {
              throw this.astErrorOutput('Invalid for statement', forNode);
            }

            var initArr = [];
            var testArr = [];
            var updateArr = [];
            var bodyArr = [];
            var isSafe = null;

            if (forNode.init) {
              this.pushState('in-for-loop-init');
              this.astGeneric(forNode.init, initArr);
              var declarations = forNode.init.declarations;

              for (var i = 0; i < declarations.length; i++) {
                if (declarations[i].init && declarations[i].init.type !== 'Literal') {
                  isSafe = false;
                }
              }

              if (isSafe) {
                for (var _i14 = 0; _i14 < initArr.length; _i14++) {
                  if (initArr[_i14].includes && initArr[_i14].includes(',')) {
                    isSafe = false;
                  }
                }
              }

              this.popState('in-for-loop-init');
            } else {
              isSafe = false;
            }

            if (forNode.test) {
              this.pushState('in-for-loop-test');
              this.astGeneric(forNode.test, testArr);
              this.popState('in-for-loop-test');
            } else {
              isSafe = false;
            }

            if (forNode.update) {
              this.astGeneric(forNode.update, updateArr);
            } else {
              isSafe = false;
            }

            if (forNode.body) {
              this.pushState('loop-body');
              this.astGeneric(forNode.body, bodyArr);
              this.popState('loop-body');
            }

            if (isSafe === null) {
              isSafe = this.isSafe(forNode.init) && this.isSafe(forNode.test);
            }

            if (isSafe) {
              retArr.push("for (".concat(initArr.join(''), ";").concat(testArr.join(''), ";").concat(updateArr.join(''), "){\n"));
              retArr.push(bodyArr.join(''));
              retArr.push('}\n');
            } else {
              var iVariableName = this.getInternalVariableName('safeI');

              if (initArr.length > 0) {
                retArr.push(initArr.join(''), ';\n');
              }

              retArr.push("for (int ".concat(iVariableName, "=0;").concat(iVariableName, "<LOOP_MAX;").concat(iVariableName, "++){\n"));

              if (testArr.length > 0) {
                retArr.push("if (!".concat(testArr.join(''), ") break;\n"));
              }

              retArr.push(bodyArr.join(''));
              retArr.push("\n".concat(updateArr.join(''), ";"));
              retArr.push('}\n');
            }

            return retArr;
          }
        }, {
          key: "astWhileStatement",
          value: function astWhileStatement(whileNode, retArr) {
            if (whileNode.type !== 'WhileStatement') {
              throw this.astErrorOutput('Invalid while statement', whileNode);
            }

            var iVariableName = this.getInternalVariableName('safeI');
            retArr.push("for (int ".concat(iVariableName, "=0;").concat(iVariableName, "<LOOP_MAX;").concat(iVariableName, "++){\n"));
            retArr.push('if (!');
            this.astGeneric(whileNode.test, retArr);
            retArr.push(') break;\n');
            this.astGeneric(whileNode.body, retArr);
            retArr.push('}\n');
            return retArr;
          }
        }, {
          key: "astDoWhileStatement",
          value: function astDoWhileStatement(doWhileNode, retArr) {
            if (doWhileNode.type !== 'DoWhileStatement') {
              throw this.astErrorOutput('Invalid while statement', doWhileNode);
            }

            var iVariableName = this.getInternalVariableName('safeI');
            retArr.push("for (int ".concat(iVariableName, "=0;").concat(iVariableName, "<LOOP_MAX;").concat(iVariableName, "++){\n"));
            this.astGeneric(doWhileNode.body, retArr);
            retArr.push('if (!');
            this.astGeneric(doWhileNode.test, retArr);
            retArr.push(') break;\n');
            retArr.push('}\n');
            return retArr;
          }
        }, {
          key: "astAssignmentExpression",
          value: function astAssignmentExpression(assNode, retArr) {
            if (assNode.operator === '%=') {
              this.astGeneric(assNode.left, retArr);
              retArr.push('=');
              retArr.push('mod(');
              this.astGeneric(assNode.left, retArr);
              retArr.push(',');
              this.astGeneric(assNode.right, retArr);
              retArr.push(')');
            } else if (assNode.operator === '**=') {
              this.astGeneric(assNode.left, retArr);
              retArr.push('=');
              retArr.push('pow(');
              this.astGeneric(assNode.left, retArr);
              retArr.push(',');
              this.astGeneric(assNode.right, retArr);
              retArr.push(')');
            } else {
              var leftType = this.getType(assNode.left);
              var rightType = this.getType(assNode.right);
              this.astGeneric(assNode.left, retArr);
              retArr.push(assNode.operator);

              if (leftType !== 'Integer' && rightType === 'Integer') {
                retArr.push('float(');
                this.astGeneric(assNode.right, retArr);
                retArr.push(')');
              } else {
                this.astGeneric(assNode.right, retArr);
              }

              return retArr;
            }
          }
        }, {
          key: "astBlockStatement",
          value: function astBlockStatement(bNode, retArr) {
            if (this.isState('loop-body')) {
              this.pushState('block-body');

              for (var i = 0; i < bNode.body.length; i++) {
                this.astGeneric(bNode.body[i], retArr);
              }

              this.popState('block-body');
            } else {
              retArr.push('{\n');

              for (var _i15 = 0; _i15 < bNode.body.length; _i15++) {
                this.astGeneric(bNode.body[_i15], retArr);
              }

              retArr.push('}\n');
            }

            return retArr;
          }
        }, {
          key: "astVariableDeclaration",
          value: function astVariableDeclaration(varDecNode, retArr) {
            if (varDecNode.kind === 'var' && this.warnVarUsage) {
              this.varWarn();
            }

            var declarations = varDecNode.declarations;

            if (!declarations || !declarations[0] || !declarations[0].init) {
              throw this.astErrorOutput('Unexpected expression', varDecNode);
            }

            var result = [];
            var lastType = null;
            var inForLoopInit = this.isState('in-for-loop-init');

            for (var i = 0; i < declarations.length; i++) {
              var declaration = declarations[i];
              var init = declaration.init;
              var info = this.getDeclaration(declaration.id);
              var actualType = this.getType(declaration.init);
              var type = inForLoopInit ? 'Integer' : actualType;

              if (type === 'LiteralInteger') {
                type = 'Number';
              }

              var markupType = typeMap[type];

              if (!markupType) {
                throw this.astErrorOutput("Markup type ".concat(markupType, " not handled"), varDecNode);
              }

              var declarationResult = [];

              if (actualType === 'Integer' && type === 'Integer' && !inForLoopInit) {
                info.valueType = 'Number';

                if (i === 0 || lastType === null) {
                  declarationResult.push('float ');
                } else if (type !== lastType) {
                  throw new Error('Unhandled declaration');
                } else {
                  declarationResult.push(',');
                }

                lastType = type;
                declarationResult.push("user_".concat(declaration.id.name, "="));
                declarationResult.push('float(');
                this.astGeneric(init, declarationResult);
                declarationResult.push(')');
              } else {
                info.valueType = type;

                if (i === 0 || lastType === null) {
                  declarationResult.push("".concat(markupType, " "));
                } else if (type !== lastType) {
                  result.push(';');
                  declarationResult.push("".concat(markupType, " "));
                } else {
                  declarationResult.push(',');
                }

                lastType = type;
                declarationResult.push("user_".concat(declaration.id.name, "="));

                if (actualType === 'Number' && type === 'Integer') {
                  if (init.left && init.left.type === 'Literal') {
                    this.astGeneric(init, declarationResult);
                  } else {
                    declarationResult.push('int(');
                    this.astGeneric(init, declarationResult);
                    declarationResult.push(')');
                  }
                } else {
                  this.astGeneric(init, declarationResult);
                }
              }

              result.push(declarationResult.join(''));
            }

            retArr.push(result.join(''));

            if (!inForLoopInit) {
              retArr.push(';');
            }

            return retArr;
          }
        }, {
          key: "astIfStatement",
          value: function astIfStatement(ifNode, retArr) {
            retArr.push('if (');
            this.astGeneric(ifNode.test, retArr);
            retArr.push(')');

            if (ifNode.consequent.type === 'BlockStatement') {
              this.astGeneric(ifNode.consequent, retArr);
            } else {
              retArr.push(' {\n');
              this.astGeneric(ifNode.consequent, retArr);
              retArr.push('\n}\n');
            }

            if (ifNode.alternate) {
              retArr.push('else ');

              if (ifNode.alternate.type === 'BlockStatement' || ifNode.alternate.type === 'IfStatement') {
                this.astGeneric(ifNode.alternate, retArr);
              } else {
                retArr.push(' {\n');
                this.astGeneric(ifNode.alternate, retArr);
                retArr.push('\n}\n');
              }
            }

            return retArr;
          }
        }, {
          key: "astSwitchStatement",
          value: function astSwitchStatement(ast, retArr) {
            if (ast.type !== 'SwitchStatement') {
              throw this.astErrorOutput('Invalid switch statement', ast);
            }

            var discriminant = ast.discriminant,
                cases = ast.cases;
            var type = this.getType(discriminant);
            var varName = "switchDiscriminant".concat(this.astKey(ast, '_'));

            switch (type) {
              case 'Float':
              case 'Number':
                retArr.push("float ".concat(varName, " = "));
                this.astGeneric(discriminant, retArr);
                retArr.push(';\n');
                break;

              case 'Integer':
                retArr.push("int ".concat(varName, " = "));
                this.astGeneric(discriminant, retArr);
                retArr.push(';\n');
                break;
            }

            if (cases.length === 1 && !cases[0].test) {
              this.astGeneric(cases[0].consequent, retArr);
              return retArr;
            }

            var fallingThrough = false;
            var defaultResult = [];
            var movingDefaultToEnd = false;
            var pastFirstIf = false;

            for (var i = 0; i < cases.length; i++) {
              if (!cases[i].test) {
                if (cases.length > i + 1) {
                  movingDefaultToEnd = true;
                  this.astGeneric(cases[i].consequent, defaultResult);
                  continue;
                } else {
                  retArr.push(' else {\n');
                }
              } else {
                if (i === 0 || !pastFirstIf) {
                  pastFirstIf = true;
                  retArr.push("if (".concat(varName, " == "));
                } else {
                  if (fallingThrough) {
                    retArr.push("".concat(varName, " == "));
                    fallingThrough = false;
                  } else {
                    retArr.push(" else if (".concat(varName, " == "));
                  }
                }

                if (type === 'Integer') {
                  var testType = this.getType(cases[i].test);

                  switch (testType) {
                    case 'Number':
                    case 'Float':
                      this.castValueToInteger(cases[i].test, retArr);
                      break;

                    case 'LiteralInteger':
                      this.castLiteralToInteger(cases[i].test, retArr);
                      break;
                  }
                } else if (type === 'Float') {
                  var _testType = this.getType(cases[i].test);

                  switch (_testType) {
                    case 'LiteralInteger':
                      this.castLiteralToFloat(cases[i].test, retArr);
                      break;

                    case 'Integer':
                      this.castValueToFloat(cases[i].test, retArr);
                      break;
                  }
                } else {
                  throw new Error('unhanlded');
                }

                if (!cases[i].consequent || cases[i].consequent.length === 0) {
                  fallingThrough = true;
                  retArr.push(' || ');
                  continue;
                }

                retArr.push(") {\n");
              }

              this.astGeneric(cases[i].consequent, retArr);
              retArr.push('\n}');
            }

            if (movingDefaultToEnd) {
              retArr.push(' else {');
              retArr.push(defaultResult.join(''));
              retArr.push('}');
            }

            return retArr;
          }
        }, {
          key: "astThisExpression",
          value: function astThisExpression(tNode, retArr) {
            retArr.push('this');
            return retArr;
          }
        }, {
          key: "astMemberExpression",
          value: function astMemberExpression(mNode, retArr) {
            var _this$getMemberExpres2 = this.getMemberExpressionDetails(mNode),
                property = _this$getMemberExpres2.property,
                name = _this$getMemberExpres2.name,
                signature = _this$getMemberExpres2.signature,
                origin = _this$getMemberExpres2.origin,
                type = _this$getMemberExpres2.type,
                xProperty = _this$getMemberExpres2.xProperty,
                yProperty = _this$getMemberExpres2.yProperty,
                zProperty = _this$getMemberExpres2.zProperty;

            switch (signature) {
              case 'value.thread.value':
              case 'this.thread.value':
                if (name !== 'x' && name !== 'y' && name !== 'z') {
                  throw this.astErrorOutput('Unexpected expression, expected `this.thread.x`, `this.thread.y`, or `this.thread.z`', mNode);
                }

                retArr.push("threadId.".concat(name));
                return retArr;

              case 'this.output.value':
                if (this.dynamicOutput) {
                  switch (name) {
                    case 'x':
                      if (this.isState('casting-to-float')) {
                        retArr.push('float(uOutputDim.x)');
                      } else {
                        retArr.push('uOutputDim.x');
                      }

                      break;

                    case 'y':
                      if (this.isState('casting-to-float')) {
                        retArr.push('float(uOutputDim.y)');
                      } else {
                        retArr.push('uOutputDim.y');
                      }

                      break;

                    case 'z':
                      if (this.isState('casting-to-float')) {
                        retArr.push('float(uOutputDim.z)');
                      } else {
                        retArr.push('uOutputDim.z');
                      }

                      break;

                    default:
                      throw this.astErrorOutput('Unexpected expression', mNode);
                  }
                } else {
                  switch (name) {
                    case 'x':
                      if (this.isState('casting-to-integer')) {
                        retArr.push(this.output[0]);
                      } else {
                        retArr.push(this.output[0], '.0');
                      }

                      break;

                    case 'y':
                      if (this.isState('casting-to-integer')) {
                        retArr.push(this.output[1]);
                      } else {
                        retArr.push(this.output[1], '.0');
                      }

                      break;

                    case 'z':
                      if (this.isState('casting-to-integer')) {
                        retArr.push(this.output[2]);
                      } else {
                        retArr.push(this.output[2], '.0');
                      }

                      break;

                    default:
                      throw this.astErrorOutput('Unexpected expression', mNode);
                  }
                }

                return retArr;

              case 'value':
                throw this.astErrorOutput('Unexpected expression', mNode);

              case 'value[]':
              case 'value[][]':
              case 'value[][][]':
              case 'value[][][][]':
              case 'value.value':
                if (origin === 'Math') {
                  retArr.push(Math[name]);
                  return retArr;
                }

                switch (property) {
                  case 'r':
                    retArr.push("user_".concat(name, ".r"));
                    return retArr;

                  case 'g':
                    retArr.push("user_".concat(name, ".g"));
                    return retArr;

                  case 'b':
                    retArr.push("user_".concat(name, ".b"));
                    return retArr;

                  case 'a':
                    retArr.push("user_".concat(name, ".a"));
                    return retArr;
                }

                break;

              case 'this.constants.value':
                if (typeof xProperty === 'undefined') {
                  switch (type) {
                    case 'Array(2)':
                    case 'Array(3)':
                    case 'Array(4)':
                      retArr.push("constants_".concat(name));
                      return retArr;
                  }
                }

              case 'this.constants.value[]':
              case 'this.constants.value[][]':
              case 'this.constants.value[][][]':
              case 'this.constants.value[][][][]':
                break;

              case 'fn()[]':
                this.astCallExpression(mNode.object, retArr);
                retArr.push('[');
                retArr.push(this.memberExpressionPropertyMarkup(property));
                retArr.push(']');
                return retArr;

              case '[][]':
                this.astArrayExpression(mNode.object, retArr);
                retArr.push('[');
                retArr.push(this.memberExpressionPropertyMarkup(property));
                retArr.push(']');
                return retArr;

              case 'value.value[]':
              case 'value.value[][]':
                if (this.removeIstanbulCoverage) {
                  return retArr;
                }

              default:
                throw this.astErrorOutput('Unexpected expression', mNode);
            }

            if (mNode.computed === false) {
              switch (type) {
                case 'Number':
                case 'Integer':
                case 'Float':
                case 'Boolean':
                  retArr.push("".concat(origin, "_").concat(name));
                  return retArr;
              }
            }

            var markupName = "".concat(origin, "_").concat(name);

            switch (type) {
              case 'Array(2)':
              case 'Array(3)':
              case 'Array(4)':
                this.astGeneric(mNode.object, retArr);
                retArr.push('[');
                retArr.push(this.memberExpressionPropertyMarkup(xProperty));
                retArr.push(']');
                break;

              case 'HTMLImageArray':
                retArr.push("getImage3D(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                retArr.push(')');
                break;

              case 'ArrayTexture(1)':
                retArr.push("getFloatFromSampler2D(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                retArr.push(')');
                break;

              case 'Array1D(2)':
              case 'Array2D(2)':
              case 'Array3D(2)':
                retArr.push("getMemoryOptimizedVec2(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                retArr.push(')');
                break;

              case 'ArrayTexture(2)':
                retArr.push("getVec2FromSampler2D(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                retArr.push(')');
                break;

              case 'Array1D(3)':
              case 'Array2D(3)':
              case 'Array3D(3)':
                retArr.push("getMemoryOptimizedVec3(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                retArr.push(')');
                break;

              case 'ArrayTexture(3)':
                retArr.push("getVec3FromSampler2D(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                retArr.push(')');
                break;

              case 'Array1D(4)':
              case 'Array2D(4)':
              case 'Array3D(4)':
                retArr.push("getMemoryOptimizedVec4(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                retArr.push(')');
                break;

              case 'ArrayTexture(4)':
              case 'HTMLImage':
              case 'HTMLVideo':
                retArr.push("getVec4FromSampler2D(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                retArr.push(')');
                break;

              case 'NumberTexture':
              case 'Array':
              case 'Array2D':
              case 'Array3D':
              case 'Array4D':
              case 'Input':
              case 'Number':
              case 'Float':
              case 'Integer':
                if (this.precision === 'single') {
                  retArr.push("getMemoryOptimized32(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                  this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                  retArr.push(')');
                } else {
                  var bitRatio = origin === 'user' ? this.lookupFunctionArgumentBitRatio(this.name, name) : this.constantBitRatios[name];

                  switch (bitRatio) {
                    case 1:
                      retArr.push("get8(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                      break;

                    case 2:
                      retArr.push("get16(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                      break;

                    case 4:
                    case 0:
                      retArr.push("get32(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                      break;

                    default:
                      throw new Error("unhandled bit ratio of ".concat(bitRatio));
                  }

                  this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                  retArr.push(')');
                }

                break;

              case 'MemoryOptimizedNumberTexture':
                retArr.push("getMemoryOptimized32(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                retArr.push(')');
                break;

              default:
                throw new Error("unhandled member expression \"".concat(type, "\""));
            }

            return retArr;
          }
        }, {
          key: "astCallExpression",
          value: function astCallExpression(ast, retArr) {
            if (!ast.callee) {
              throw this.astErrorOutput('Unknown CallExpression', ast);
            }

            var functionName = null;
            var isMathFunction = this.isAstMathFunction(ast);

            if (isMathFunction || ast.callee.object && ast.callee.object.type === 'ThisExpression') {
              functionName = ast.callee.property.name;
            } else if (ast.callee.type === 'SequenceExpression' && ast.callee.expressions[0].type === 'Literal' && !isNaN(ast.callee.expressions[0].raw)) {
              functionName = ast.callee.expressions[1].property.name;
            } else {
              functionName = ast.callee.name;
            }

            if (!functionName) {
              throw this.astErrorOutput("Unhandled function, couldn't find name", ast);
            }

            if (functionName === 'atan2') {
              functionName = 'atan';
            }

            if (this.calledFunctions.indexOf(functionName) < 0) {
              this.calledFunctions.push(functionName);
            }

            if (functionName === 'random' && this.plugins && this.plugins.length > 0) {
              for (var i = 0; i < this.plugins.length; i++) {
                var plugin = this.plugins[i];

                if (plugin.functionMatch === 'Math.random()' && plugin.functionReplace) {
                  retArr.push(plugin.functionReplace);
                  return retArr;
                }
              }
            }

            if (this.onFunctionCall) {
              this.onFunctionCall(this.name, functionName, ast.arguments);
            }

            retArr.push(functionName);
            retArr.push('(');

            if (isMathFunction) {
              for (var _i16 = 0; _i16 < ast.arguments.length; ++_i16) {
                var argument = ast.arguments[_i16];
                var argumentType = this.getType(argument);

                if (_i16 > 0) {
                  retArr.push(', ');
                }

                switch (argumentType) {
                  case 'Integer':
                    this.castValueToFloat(argument, retArr);
                    break;

                  default:
                    this.astGeneric(argument, retArr);
                    break;
                }
              }
            } else {
              var targetTypes = this.lookupFunctionArgumentTypes(functionName) || [];

              for (var _i17 = 0; _i17 < ast.arguments.length; ++_i17) {
                var _argument = ast.arguments[_i17];
                var targetType = targetTypes[_i17];

                if (_i17 > 0) {
                  retArr.push(', ');
                }

                var _argumentType = this.getType(_argument);

                if (!targetType) {
                  this.triggerImplyArgumentType(functionName, _i17, _argumentType, this);
                  targetType = _argumentType;
                }

                switch (_argumentType) {
                  case 'Number':
                  case 'Float':
                    if (targetType === 'Integer') {
                      retArr.push('int(');
                      this.astGeneric(_argument, retArr);
                      retArr.push(')');
                      continue;
                    } else if (targetType === 'Number' || targetType === 'Float') {
                      this.astGeneric(_argument, retArr);
                      continue;
                    } else if (targetType === 'LiteralInteger') {
                      this.castLiteralToFloat(_argument, retArr);
                      continue;
                    }

                    break;

                  case 'Integer':
                    if (targetType === 'Number' || targetType === 'Float') {
                      retArr.push('float(');
                      this.astGeneric(_argument, retArr);
                      retArr.push(')');
                      continue;
                    } else if (targetType === 'Integer') {
                      this.astGeneric(_argument, retArr);
                      continue;
                    }

                    break;

                  case 'LiteralInteger':
                    if (targetType === 'Integer') {
                      this.castLiteralToInteger(_argument, retArr);
                      continue;
                    } else if (targetType === 'Number' || targetType === 'Float') {
                      this.castLiteralToFloat(_argument, retArr);
                      continue;
                    } else if (targetType === 'LiteralInteger') {
                      this.astGeneric(_argument, retArr);
                      continue;
                    }

                    break;

                  case 'Array(2)':
                  case 'Array(3)':
                  case 'Array(4)':
                    if (targetType === _argumentType) {
                      if (_argument.type === 'Identifier') {
                        retArr.push("user_".concat(_argument.name));
                      } else if (_argument.type === 'ArrayExpression') {
                        this.astGeneric(_argument, retArr);
                      } else {
                        throw this.astErrorOutput("Unhandled argument type ".concat(_argument.type), ast);
                      }

                      continue;
                    }

                    break;

                  case 'HTMLImage':
                  case 'HTMLImageArray':
                  case 'HTMLVideo':
                  case 'ArrayTexture(1)':
                  case 'ArrayTexture(2)':
                  case 'ArrayTexture(3)':
                  case 'ArrayTexture(4)':
                  case 'Array':
                  case 'Input':
                    if (targetType === _argumentType) {
                      if (_argument.type !== 'Identifier') throw this.astErrorOutput("Unhandled argument type ".concat(_argument.type), ast);
                      this.triggerImplyArgumentBitRatio(this.name, _argument.name, functionName, _i17);
                      retArr.push("user_".concat(_argument.name, ",user_").concat(_argument.name, "Size,user_").concat(_argument.name, "Dim"));
                      continue;
                    }

                    break;
                }

                throw this.astErrorOutput("Unhandled argument combination of ".concat(_argumentType, " and ").concat(targetType, " for argument named \"").concat(_argument.name, "\""), ast);
              }
            }

            retArr.push(')');
            return retArr;
          }
        }, {
          key: "astArrayExpression",
          value: function astArrayExpression(arrNode, retArr) {
            var arrLen = arrNode.elements.length;
            retArr.push('vec' + arrLen + '(');

            for (var i = 0; i < arrLen; ++i) {
              if (i > 0) {
                retArr.push(', ');
              }

              var subNode = arrNode.elements[i];
              this.astGeneric(subNode, retArr);
            }

            retArr.push(')');
            return retArr;
          }
        }, {
          key: "memberExpressionXYZ",
          value: function memberExpressionXYZ(x, y, z, retArr) {
            if (z) {
              retArr.push(this.memberExpressionPropertyMarkup(z), ', ');
            } else {
              retArr.push('0, ');
            }

            if (y) {
              retArr.push(this.memberExpressionPropertyMarkup(y), ', ');
            } else {
              retArr.push('0, ');
            }

            retArr.push(this.memberExpressionPropertyMarkup(x));
            return retArr;
          }
        }, {
          key: "memberExpressionPropertyMarkup",
          value: function memberExpressionPropertyMarkup(property) {
            if (!property) {
              throw new Error('Property not set');
            }

            var type = this.getType(property);
            var result = [];

            switch (type) {
              case 'Number':
              case 'Float':
                this.castValueToInteger(property, result);
                break;

              case 'LiteralInteger':
                this.castLiteralToInteger(property, result);
                break;

              default:
                this.astGeneric(property, result);
            }

            return result.join('');
          }
        }]);

        return WebGLFunctionNode;
      }(FunctionNode);

      var typeMap = {
        'Array': 'sampler2D',
        'Array(2)': 'vec2',
        'Array(3)': 'vec3',
        'Array(4)': 'vec4',
        'Array2D': 'sampler2D',
        'Array3D': 'sampler2D',
        'Boolean': 'bool',
        'Float': 'float',
        'Input': 'sampler2D',
        'Integer': 'int',
        'Number': 'float',
        'LiteralInteger': 'float',
        'NumberTexture': 'sampler2D',
        'MemoryOptimizedNumberTexture': 'sampler2D',
        'ArrayTexture(1)': 'sampler2D',
        'ArrayTexture(2)': 'sampler2D',
        'ArrayTexture(3)': 'sampler2D',
        'ArrayTexture(4)': 'sampler2D',
        'HTMLVideo': 'sampler2D',
        'HTMLImage': 'sampler2D',
        'HTMLImageArray': 'sampler2DArray'
      };
      var operatorMap = {
        '===': '==',
        '!==': '!='
      };
      module.exports = {
        WebGLFunctionNode: WebGLFunctionNode
      };
    }, {
      "../function-node": 10
    }],
    39: [function (require, module, exports) {
      var _require78 = require('./kernel-value/boolean'),
          WebGLKernelValueBoolean = _require78.WebGLKernelValueBoolean;

      var _require79 = require('./kernel-value/float'),
          WebGLKernelValueFloat = _require79.WebGLKernelValueFloat;

      var _require80 = require('./kernel-value/integer'),
          WebGLKernelValueInteger = _require80.WebGLKernelValueInteger;

      var _require81 = require('./kernel-value/html-image'),
          WebGLKernelValueHTMLImage = _require81.WebGLKernelValueHTMLImage;

      var _require82 = require('./kernel-value/dynamic-html-image'),
          WebGLKernelValueDynamicHTMLImage = _require82.WebGLKernelValueDynamicHTMLImage;

      var _require83 = require('./kernel-value/html-video'),
          WebGLKernelValueHTMLVideo = _require83.WebGLKernelValueHTMLVideo;

      var _require84 = require('./kernel-value/dynamic-html-video'),
          WebGLKernelValueDynamicHTMLVideo = _require84.WebGLKernelValueDynamicHTMLVideo;

      var _require85 = require('./kernel-value/single-input'),
          WebGLKernelValueSingleInput = _require85.WebGLKernelValueSingleInput;

      var _require86 = require('./kernel-value/dynamic-single-input'),
          WebGLKernelValueDynamicSingleInput = _require86.WebGLKernelValueDynamicSingleInput;

      var _require87 = require('./kernel-value/unsigned-input'),
          WebGLKernelValueUnsignedInput = _require87.WebGLKernelValueUnsignedInput;

      var _require88 = require('./kernel-value/dynamic-unsigned-input'),
          WebGLKernelValueDynamicUnsignedInput = _require88.WebGLKernelValueDynamicUnsignedInput;

      var _require89 = require('./kernel-value/memory-optimized-number-texture'),
          WebGLKernelValueMemoryOptimizedNumberTexture = _require89.WebGLKernelValueMemoryOptimizedNumberTexture;

      var _require90 = require('./kernel-value/dynamic-memory-optimized-number-texture'),
          WebGLKernelValueDynamicMemoryOptimizedNumberTexture = _require90.WebGLKernelValueDynamicMemoryOptimizedNumberTexture;

      var _require91 = require('./kernel-value/number-texture'),
          WebGLKernelValueNumberTexture = _require91.WebGLKernelValueNumberTexture;

      var _require92 = require('./kernel-value/dynamic-number-texture'),
          WebGLKernelValueDynamicNumberTexture = _require92.WebGLKernelValueDynamicNumberTexture;

      var _require93 = require('./kernel-value/single-array'),
          WebGLKernelValueSingleArray = _require93.WebGLKernelValueSingleArray;

      var _require94 = require('./kernel-value/dynamic-single-array'),
          WebGLKernelValueDynamicSingleArray = _require94.WebGLKernelValueDynamicSingleArray;

      var _require95 = require('./kernel-value/single-array1d-i'),
          WebGLKernelValueSingleArray1DI = _require95.WebGLKernelValueSingleArray1DI;

      var _require96 = require('./kernel-value/dynamic-single-array1d-i'),
          WebGLKernelValueDynamicSingleArray1DI = _require96.WebGLKernelValueDynamicSingleArray1DI;

      var _require97 = require('./kernel-value/single-array2d-i'),
          WebGLKernelValueSingleArray2DI = _require97.WebGLKernelValueSingleArray2DI;

      var _require98 = require('./kernel-value/dynamic-single-array2d-i'),
          WebGLKernelValueDynamicSingleArray2DI = _require98.WebGLKernelValueDynamicSingleArray2DI;

      var _require99 = require('./kernel-value/single-array3d-i'),
          WebGLKernelValueSingleArray3DI = _require99.WebGLKernelValueSingleArray3DI;

      var _require100 = require('./kernel-value/dynamic-single-array3d-i'),
          WebGLKernelValueDynamicSingleArray3DI = _require100.WebGLKernelValueDynamicSingleArray3DI;

      var _require101 = require('./kernel-value/single-array2'),
          WebGLKernelValueSingleArray2 = _require101.WebGLKernelValueSingleArray2;

      var _require102 = require('./kernel-value/single-array3'),
          WebGLKernelValueSingleArray3 = _require102.WebGLKernelValueSingleArray3;

      var _require103 = require('./kernel-value/single-array4'),
          WebGLKernelValueSingleArray4 = _require103.WebGLKernelValueSingleArray4;

      var _require104 = require('./kernel-value/unsigned-array'),
          WebGLKernelValueUnsignedArray = _require104.WebGLKernelValueUnsignedArray;

      var _require105 = require('./kernel-value/dynamic-unsigned-array'),
          WebGLKernelValueDynamicUnsignedArray = _require105.WebGLKernelValueDynamicUnsignedArray;

      var kernelValueMaps = {
        unsigned: {
          dynamic: {
            'Boolean': WebGLKernelValueBoolean,
            'Integer': WebGLKernelValueInteger,
            'Float': WebGLKernelValueFloat,
            'Array': WebGLKernelValueDynamicUnsignedArray,
            'Array(2)': false,
            'Array(3)': false,
            'Array(4)': false,
            'Array1D(2)': false,
            'Array1D(3)': false,
            'Array1D(4)': false,
            'Array2D(2)': false,
            'Array2D(3)': false,
            'Array2D(4)': false,
            'Array3D(2)': false,
            'Array3D(3)': false,
            'Array3D(4)': false,
            'Input': WebGLKernelValueDynamicUnsignedInput,
            'NumberTexture': WebGLKernelValueDynamicNumberTexture,
            'ArrayTexture(1)': WebGLKernelValueDynamicNumberTexture,
            'ArrayTexture(2)': WebGLKernelValueDynamicNumberTexture,
            'ArrayTexture(3)': WebGLKernelValueDynamicNumberTexture,
            'ArrayTexture(4)': WebGLKernelValueDynamicNumberTexture,
            'MemoryOptimizedNumberTexture': WebGLKernelValueDynamicMemoryOptimizedNumberTexture,
            'HTMLImage': WebGLKernelValueDynamicHTMLImage,
            'HTMLImageArray': false,
            'HTMLVideo': WebGLKernelValueDynamicHTMLVideo
          },
          static: {
            'Boolean': WebGLKernelValueBoolean,
            'Float': WebGLKernelValueFloat,
            'Integer': WebGLKernelValueInteger,
            'Array': WebGLKernelValueUnsignedArray,
            'Array(2)': false,
            'Array(3)': false,
            'Array(4)': false,
            'Array1D(2)': false,
            'Array1D(3)': false,
            'Array1D(4)': false,
            'Array2D(2)': false,
            'Array2D(3)': false,
            'Array2D(4)': false,
            'Array3D(2)': false,
            'Array3D(3)': false,
            'Array3D(4)': false,
            'Input': WebGLKernelValueUnsignedInput,
            'NumberTexture': WebGLKernelValueNumberTexture,
            'ArrayTexture(1)': WebGLKernelValueNumberTexture,
            'ArrayTexture(2)': WebGLKernelValueNumberTexture,
            'ArrayTexture(3)': WebGLKernelValueNumberTexture,
            'ArrayTexture(4)': WebGLKernelValueNumberTexture,
            'MemoryOptimizedNumberTexture': WebGLKernelValueMemoryOptimizedNumberTexture,
            'HTMLImage': WebGLKernelValueHTMLImage,
            'HTMLImageArray': false,
            'HTMLVideo': WebGLKernelValueHTMLVideo
          }
        },
        single: {
          dynamic: {
            'Boolean': WebGLKernelValueBoolean,
            'Integer': WebGLKernelValueInteger,
            'Float': WebGLKernelValueFloat,
            'Array': WebGLKernelValueDynamicSingleArray,
            'Array(2)': WebGLKernelValueSingleArray2,
            'Array(3)': WebGLKernelValueSingleArray3,
            'Array(4)': WebGLKernelValueSingleArray4,
            'Array1D(2)': WebGLKernelValueDynamicSingleArray1DI,
            'Array1D(3)': WebGLKernelValueDynamicSingleArray1DI,
            'Array1D(4)': WebGLKernelValueDynamicSingleArray1DI,
            'Array2D(2)': WebGLKernelValueDynamicSingleArray2DI,
            'Array2D(3)': WebGLKernelValueDynamicSingleArray2DI,
            'Array2D(4)': WebGLKernelValueDynamicSingleArray2DI,
            'Array3D(2)': WebGLKernelValueDynamicSingleArray3DI,
            'Array3D(3)': WebGLKernelValueDynamicSingleArray3DI,
            'Array3D(4)': WebGLKernelValueDynamicSingleArray3DI,
            'Input': WebGLKernelValueDynamicSingleInput,
            'NumberTexture': WebGLKernelValueDynamicNumberTexture,
            'ArrayTexture(1)': WebGLKernelValueDynamicNumberTexture,
            'ArrayTexture(2)': WebGLKernelValueDynamicNumberTexture,
            'ArrayTexture(3)': WebGLKernelValueDynamicNumberTexture,
            'ArrayTexture(4)': WebGLKernelValueDynamicNumberTexture,
            'MemoryOptimizedNumberTexture': WebGLKernelValueDynamicMemoryOptimizedNumberTexture,
            'HTMLImage': WebGLKernelValueDynamicHTMLImage,
            'HTMLImageArray': false,
            'HTMLVideo': WebGLKernelValueDynamicHTMLVideo
          },
          static: {
            'Boolean': WebGLKernelValueBoolean,
            'Float': WebGLKernelValueFloat,
            'Integer': WebGLKernelValueInteger,
            'Array': WebGLKernelValueSingleArray,
            'Array(2)': WebGLKernelValueSingleArray2,
            'Array(3)': WebGLKernelValueSingleArray3,
            'Array(4)': WebGLKernelValueSingleArray4,
            'Array1D(2)': WebGLKernelValueSingleArray1DI,
            'Array1D(3)': WebGLKernelValueSingleArray1DI,
            'Array1D(4)': WebGLKernelValueSingleArray1DI,
            'Array2D(2)': WebGLKernelValueSingleArray2DI,
            'Array2D(3)': WebGLKernelValueSingleArray2DI,
            'Array2D(4)': WebGLKernelValueSingleArray2DI,
            'Array3D(2)': WebGLKernelValueSingleArray3DI,
            'Array3D(3)': WebGLKernelValueSingleArray3DI,
            'Array3D(4)': WebGLKernelValueSingleArray3DI,
            'Input': WebGLKernelValueSingleInput,
            'NumberTexture': WebGLKernelValueNumberTexture,
            'ArrayTexture(1)': WebGLKernelValueNumberTexture,
            'ArrayTexture(2)': WebGLKernelValueNumberTexture,
            'ArrayTexture(3)': WebGLKernelValueNumberTexture,
            'ArrayTexture(4)': WebGLKernelValueNumberTexture,
            'MemoryOptimizedNumberTexture': WebGLKernelValueMemoryOptimizedNumberTexture,
            'HTMLImage': WebGLKernelValueHTMLImage,
            'HTMLImageArray': false,
            'HTMLVideo': WebGLKernelValueHTMLVideo
          }
        }
      };

      function lookupKernelValueType(type, dynamic, precision, value) {
        if (!type) {
          throw new Error('type missing');
        }

        if (!dynamic) {
          throw new Error('dynamic missing');
        }

        if (!precision) {
          throw new Error('precision missing');
        }

        if (value.type) {
          type = value.type;
        }

        var types = kernelValueMaps[precision][dynamic];

        if (types[type] === false) {
          return null;
        } else if (types[type] === undefined) {
          throw new Error("Could not find a KernelValue for ".concat(type));
        }

        return types[type];
      }

      module.exports = {
        lookupKernelValueType: lookupKernelValueType,
        kernelValueMaps: kernelValueMaps
      };
    }, {
      "./kernel-value/boolean": 40,
      "./kernel-value/dynamic-html-image": 41,
      "./kernel-value/dynamic-html-video": 42,
      "./kernel-value/dynamic-memory-optimized-number-texture": 43,
      "./kernel-value/dynamic-number-texture": 44,
      "./kernel-value/dynamic-single-array": 45,
      "./kernel-value/dynamic-single-array1d-i": 46,
      "./kernel-value/dynamic-single-array2d-i": 47,
      "./kernel-value/dynamic-single-array3d-i": 48,
      "./kernel-value/dynamic-single-input": 49,
      "./kernel-value/dynamic-unsigned-array": 50,
      "./kernel-value/dynamic-unsigned-input": 51,
      "./kernel-value/float": 52,
      "./kernel-value/html-image": 53,
      "./kernel-value/html-video": 54,
      "./kernel-value/integer": 56,
      "./kernel-value/memory-optimized-number-texture": 57,
      "./kernel-value/number-texture": 58,
      "./kernel-value/single-array": 59,
      "./kernel-value/single-array1d-i": 60,
      "./kernel-value/single-array2": 61,
      "./kernel-value/single-array2d-i": 62,
      "./kernel-value/single-array3": 63,
      "./kernel-value/single-array3d-i": 64,
      "./kernel-value/single-array4": 65,
      "./kernel-value/single-input": 66,
      "./kernel-value/unsigned-array": 67,
      "./kernel-value/unsigned-input": 68
    }],
    40: [function (require, module, exports) {
      var _require106 = require('../../../utils'),
          utils = _require106.utils;

      var _require107 = require('./index'),
          WebGLKernelValue = _require107.WebGLKernelValue;

      var WebGLKernelValueBoolean =
      /*#__PURE__*/
      function (_WebGLKernelValue) {
        _inherits(WebGLKernelValueBoolean, _WebGLKernelValue);

        function WebGLKernelValueBoolean(value, settings) {
          var _this25;

          _classCallCheck(this, WebGLKernelValueBoolean);

          _this25 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueBoolean).call(this, value, settings));
          _this25.uploadValue = value;
          return _this25;
        }

        _createClass(WebGLKernelValueBoolean, [{
          key: "getSource",
          value: function getSource(value) {
            if (this.origin === 'constants') {
              return "const bool ".concat(this.id, " = ").concat(value, ";\n");
            }

            return "uniform bool ".concat(this.id, ";\n");
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ";\n");
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (this.origin === 'constants') return;
            this.kernel.setUniform1i(this.id, this.uploadValue = value);
          }
        }]);

        return WebGLKernelValueBoolean;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueBoolean: WebGLKernelValueBoolean
      };
    }, {
      "../../../utils": 113,
      "./index": 55
    }],
    41: [function (require, module, exports) {
      var _require108 = require('../../../utils'),
          utils = _require108.utils;

      var _require109 = require('./html-image'),
          WebGLKernelValueHTMLImage = _require109.WebGLKernelValueHTMLImage;

      var WebGLKernelValueDynamicHTMLImage =
      /*#__PURE__*/
      function (_WebGLKernelValueHTML) {
        _inherits(WebGLKernelValueDynamicHTMLImage, _WebGLKernelValueHTML);

        function WebGLKernelValueDynamicHTMLImage() {
          _classCallCheck(this, WebGLKernelValueDynamicHTMLImage);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueDynamicHTMLImage).apply(this, arguments));
        }

        _createClass(WebGLKernelValueDynamicHTMLImage, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            var width = value.width,
                height = value.height;
            this.checkSize(width, height);
            this.dimensions = [width, height, 1];
            this.textureSize = [width, height];
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicHTMLImage.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGLKernelValueDynamicHTMLImage;
      }(WebGLKernelValueHTMLImage);

      module.exports = {
        WebGLKernelValueDynamicHTMLImage: WebGLKernelValueDynamicHTMLImage
      };
    }, {
      "../../../utils": 113,
      "./html-image": 53
    }],
    42: [function (require, module, exports) {
      var _require110 = require('./dynamic-html-image'),
          WebGLKernelValueDynamicHTMLImage = _require110.WebGLKernelValueDynamicHTMLImage;

      var WebGLKernelValueDynamicHTMLVideo =
      /*#__PURE__*/
      function (_WebGLKernelValueDyna) {
        _inherits(WebGLKernelValueDynamicHTMLVideo, _WebGLKernelValueDyna);

        function WebGLKernelValueDynamicHTMLVideo() {
          _classCallCheck(this, WebGLKernelValueDynamicHTMLVideo);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueDynamicHTMLVideo).apply(this, arguments));
        }

        return WebGLKernelValueDynamicHTMLVideo;
      }(WebGLKernelValueDynamicHTMLImage);

      module.exports = {
        WebGLKernelValueDynamicHTMLVideo: WebGLKernelValueDynamicHTMLVideo
      };
    }, {
      "./dynamic-html-image": 41
    }],
    43: [function (require, module, exports) {
      var _require111 = require('../../../utils'),
          utils = _require111.utils;

      var _require112 = require('./memory-optimized-number-texture'),
          WebGLKernelValueMemoryOptimizedNumberTexture = _require112.WebGLKernelValueMemoryOptimizedNumberTexture;

      var WebGLKernelValueDynamicMemoryOptimizedNumberTexture =
      /*#__PURE__*/
      function (_WebGLKernelValueMemo) {
        _inherits(WebGLKernelValueDynamicMemoryOptimizedNumberTexture, _WebGLKernelValueMemo);

        function WebGLKernelValueDynamicMemoryOptimizedNumberTexture() {
          _classCallCheck(this, WebGLKernelValueDynamicMemoryOptimizedNumberTexture);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueDynamicMemoryOptimizedNumberTexture).apply(this, arguments));
        }

        _createClass(WebGLKernelValueDynamicMemoryOptimizedNumberTexture, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(inputTexture) {
            this.checkSize(inputTexture.size[0], inputTexture.size[1]);
            this.dimensions = inputTexture.dimensions;
            this.textureSize = inputTexture.size;
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicMemoryOptimizedNumberTexture.prototype), "updateValue", this).call(this, inputTexture);
          }
        }]);

        return WebGLKernelValueDynamicMemoryOptimizedNumberTexture;
      }(WebGLKernelValueMemoryOptimizedNumberTexture);

      module.exports = {
        WebGLKernelValueDynamicMemoryOptimizedNumberTexture: WebGLKernelValueDynamicMemoryOptimizedNumberTexture
      };
    }, {
      "../../../utils": 113,
      "./memory-optimized-number-texture": 57
    }],
    44: [function (require, module, exports) {
      var _require113 = require('../../../utils'),
          utils = _require113.utils;

      var _require114 = require('./number-texture'),
          WebGLKernelValueNumberTexture = _require114.WebGLKernelValueNumberTexture;

      var WebGLKernelValueDynamicNumberTexture =
      /*#__PURE__*/
      function (_WebGLKernelValueNumb) {
        _inherits(WebGLKernelValueDynamicNumberTexture, _WebGLKernelValueNumb);

        function WebGLKernelValueDynamicNumberTexture() {
          _classCallCheck(this, WebGLKernelValueDynamicNumberTexture);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueDynamicNumberTexture).apply(this, arguments));
        }

        _createClass(WebGLKernelValueDynamicNumberTexture, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.dimensions = value.dimensions;
            this.checkSize(value.size[0], value.size[1]);
            this.textureSize = value.size;
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicNumberTexture.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGLKernelValueDynamicNumberTexture;
      }(WebGLKernelValueNumberTexture);

      module.exports = {
        WebGLKernelValueDynamicNumberTexture: WebGLKernelValueDynamicNumberTexture
      };
    }, {
      "../../../utils": 113,
      "./number-texture": 58
    }],
    45: [function (require, module, exports) {
      var _require115 = require('../../../utils'),
          utils = _require115.utils;

      var _require116 = require('./single-array'),
          WebGLKernelValueSingleArray = _require116.WebGLKernelValueSingleArray;

      var WebGLKernelValueDynamicSingleArray =
      /*#__PURE__*/
      function (_WebGLKernelValueSing) {
        _inherits(WebGLKernelValueDynamicSingleArray, _WebGLKernelValueSing);

        function WebGLKernelValueDynamicSingleArray() {
          _classCallCheck(this, WebGLKernelValueDynamicSingleArray);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueDynamicSingleArray).apply(this, arguments));
        }

        _createClass(WebGLKernelValueDynamicSingleArray, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.dimensions = utils.getDimensions(value, true);
            this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);
            this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
            this.checkSize(this.textureSize[0] * this.bitRatio, this.textureSize[1] * this.bitRatio);
            this.uploadValue = new Float32Array(this.uploadArrayLength);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicSingleArray.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGLKernelValueDynamicSingleArray;
      }(WebGLKernelValueSingleArray);

      module.exports = {
        WebGLKernelValueDynamicSingleArray: WebGLKernelValueDynamicSingleArray
      };
    }, {
      "../../../utils": 113,
      "./single-array": 59
    }],
    46: [function (require, module, exports) {
      var _require117 = require('../../../utils'),
          utils = _require117.utils;

      var _require118 = require('./single-array1d-i'),
          WebGLKernelValueSingleArray1DI = _require118.WebGLKernelValueSingleArray1DI;

      var WebGLKernelValueDynamicSingleArray1DI =
      /*#__PURE__*/
      function (_WebGLKernelValueSing2) {
        _inherits(WebGLKernelValueDynamicSingleArray1DI, _WebGLKernelValueSing2);

        function WebGLKernelValueDynamicSingleArray1DI() {
          _classCallCheck(this, WebGLKernelValueDynamicSingleArray1DI);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueDynamicSingleArray1DI).apply(this, arguments));
        }

        _createClass(WebGLKernelValueDynamicSingleArray1DI, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.setShape(value);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicSingleArray1DI.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGLKernelValueDynamicSingleArray1DI;
      }(WebGLKernelValueSingleArray1DI);

      module.exports = {
        WebGLKernelValueDynamicSingleArray1DI: WebGLKernelValueDynamicSingleArray1DI
      };
    }, {
      "../../../utils": 113,
      "./single-array1d-i": 60
    }],
    47: [function (require, module, exports) {
      var _require119 = require('../../../utils'),
          utils = _require119.utils;

      var _require120 = require('./single-array2d-i'),
          WebGLKernelValueSingleArray2DI = _require120.WebGLKernelValueSingleArray2DI;

      var WebGLKernelValueDynamicSingleArray2DI =
      /*#__PURE__*/
      function (_WebGLKernelValueSing3) {
        _inherits(WebGLKernelValueDynamicSingleArray2DI, _WebGLKernelValueSing3);

        function WebGLKernelValueDynamicSingleArray2DI() {
          _classCallCheck(this, WebGLKernelValueDynamicSingleArray2DI);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueDynamicSingleArray2DI).apply(this, arguments));
        }

        _createClass(WebGLKernelValueDynamicSingleArray2DI, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.setShape(value);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicSingleArray2DI.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGLKernelValueDynamicSingleArray2DI;
      }(WebGLKernelValueSingleArray2DI);

      module.exports = {
        WebGLKernelValueDynamicSingleArray2DI: WebGLKernelValueDynamicSingleArray2DI
      };
    }, {
      "../../../utils": 113,
      "./single-array2d-i": 62
    }],
    48: [function (require, module, exports) {
      var _require121 = require('../../../utils'),
          utils = _require121.utils;

      var _require122 = require('./single-array3d-i'),
          WebGLKernelValueSingleArray3DI = _require122.WebGLKernelValueSingleArray3DI;

      var WebGLKernelValueDynamicSingleArray3DI =
      /*#__PURE__*/
      function (_WebGLKernelValueSing4) {
        _inherits(WebGLKernelValueDynamicSingleArray3DI, _WebGLKernelValueSing4);

        function WebGLKernelValueDynamicSingleArray3DI() {
          _classCallCheck(this, WebGLKernelValueDynamicSingleArray3DI);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueDynamicSingleArray3DI).apply(this, arguments));
        }

        _createClass(WebGLKernelValueDynamicSingleArray3DI, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.setShape(value);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicSingleArray3DI.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGLKernelValueDynamicSingleArray3DI;
      }(WebGLKernelValueSingleArray3DI);

      module.exports = {
        WebGLKernelValueDynamicSingleArray3DI: WebGLKernelValueDynamicSingleArray3DI
      };
    }, {
      "../../../utils": 113,
      "./single-array3d-i": 64
    }],
    49: [function (require, module, exports) {
      var _require123 = require('../../../utils'),
          utils = _require123.utils;

      var _require124 = require('./single-input'),
          WebGLKernelValueSingleInput = _require124.WebGLKernelValueSingleInput;

      var WebGLKernelValueDynamicSingleInput =
      /*#__PURE__*/
      function (_WebGLKernelValueSing5) {
        _inherits(WebGLKernelValueDynamicSingleInput, _WebGLKernelValueSing5);

        function WebGLKernelValueDynamicSingleInput() {
          _classCallCheck(this, WebGLKernelValueDynamicSingleInput);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueDynamicSingleInput).apply(this, arguments));
        }

        _createClass(WebGLKernelValueDynamicSingleInput, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            var _value$size = _slicedToArray(value.size, 3),
                w = _value$size[0],
                h = _value$size[1],
                d = _value$size[2];

            this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);
            this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);
            this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
            this.checkSize(this.textureSize[0] * this.bitRatio, this.textureSize[1] * this.bitRatio);
            this.uploadValue = new Float32Array(this.uploadArrayLength);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicSingleInput.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGLKernelValueDynamicSingleInput;
      }(WebGLKernelValueSingleInput);

      module.exports = {
        WebGLKernelValueDynamicSingleInput: WebGLKernelValueDynamicSingleInput
      };
    }, {
      "../../../utils": 113,
      "./single-input": 66
    }],
    50: [function (require, module, exports) {
      var _require125 = require('../../../utils'),
          utils = _require125.utils;

      var _require126 = require('./unsigned-array'),
          WebGLKernelValueUnsignedArray = _require126.WebGLKernelValueUnsignedArray;

      var WebGLKernelValueDynamicUnsignedArray =
      /*#__PURE__*/
      function (_WebGLKernelValueUnsi) {
        _inherits(WebGLKernelValueDynamicUnsignedArray, _WebGLKernelValueUnsi);

        function WebGLKernelValueDynamicUnsignedArray() {
          _classCallCheck(this, WebGLKernelValueDynamicUnsignedArray);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueDynamicUnsignedArray).apply(this, arguments));
        }

        _createClass(WebGLKernelValueDynamicUnsignedArray, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.dimensions = utils.getDimensions(value, true);
            this.textureSize = utils.getMemoryOptimizedPackedTextureSize(this.dimensions, this.bitRatio);
            this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * (4 / this.bitRatio);
            this.checkSize(this.textureSize[0] * (4 / this.bitRatio), this.textureSize[1] * (4 / this.bitRatio));
            var Type = this.getTransferArrayType(value);
            this.preUploadValue = new Type(this.uploadArrayLength);
            this.uploadValue = new Uint8Array(this.preUploadValue.buffer);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicUnsignedArray.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGLKernelValueDynamicUnsignedArray;
      }(WebGLKernelValueUnsignedArray);

      module.exports = {
        WebGLKernelValueDynamicUnsignedArray: WebGLKernelValueDynamicUnsignedArray
      };
    }, {
      "../../../utils": 113,
      "./unsigned-array": 67
    }],
    51: [function (require, module, exports) {
      var _require127 = require('../../../utils'),
          utils = _require127.utils;

      var _require128 = require('./unsigned-input'),
          WebGLKernelValueUnsignedInput = _require128.WebGLKernelValueUnsignedInput;

      var WebGLKernelValueDynamicUnsignedInput =
      /*#__PURE__*/
      function (_WebGLKernelValueUnsi2) {
        _inherits(WebGLKernelValueDynamicUnsignedInput, _WebGLKernelValueUnsi2);

        function WebGLKernelValueDynamicUnsignedInput() {
          _classCallCheck(this, WebGLKernelValueDynamicUnsignedInput);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueDynamicUnsignedInput).apply(this, arguments));
        }

        _createClass(WebGLKernelValueDynamicUnsignedInput, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            var _value$size2 = _slicedToArray(value.size, 3),
                w = _value$size2[0],
                h = _value$size2[1],
                d = _value$size2[2];

            this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);
            this.textureSize = utils.getMemoryOptimizedPackedTextureSize(this.dimensions, this.bitRatio);
            this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * (4 / this.bitRatio);
            this.checkSize(this.textureSize[0] * (4 / this.bitRatio), this.textureSize[1] * (4 / this.bitRatio));
            var Type = this.getTransferArrayType(value.value);
            this.preUploadValue = new Type(this.uploadArrayLength);
            this.uploadValue = new Uint8Array(this.preUploadValue.buffer);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicUnsignedInput.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGLKernelValueDynamicUnsignedInput;
      }(WebGLKernelValueUnsignedInput);

      module.exports = {
        WebGLKernelValueDynamicUnsignedInput: WebGLKernelValueDynamicUnsignedInput
      };
    }, {
      "../../../utils": 113,
      "./unsigned-input": 68
    }],
    52: [function (require, module, exports) {
      var _require129 = require('../../../utils'),
          utils = _require129.utils;

      var _require130 = require('./index'),
          WebGLKernelValue = _require130.WebGLKernelValue;

      var WebGLKernelValueFloat =
      /*#__PURE__*/
      function (_WebGLKernelValue2) {
        _inherits(WebGLKernelValueFloat, _WebGLKernelValue2);

        function WebGLKernelValueFloat(value, settings) {
          var _this26;

          _classCallCheck(this, WebGLKernelValueFloat);

          _this26 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueFloat).call(this, value, settings));
          _this26.uploadValue = value;
          return _this26;
        }

        _createClass(WebGLKernelValueFloat, [{
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ";\n");
          }
        }, {
          key: "getSource",
          value: function getSource(value) {
            if (this.origin === 'constants') {
              if (Number.isInteger(value)) {
                return "const float ".concat(this.id, " = ").concat(value, ".0;\n");
              }

              return "const float ".concat(this.id, " = ").concat(value, ";\n");
            }

            return "uniform float ".concat(this.id, ";\n");
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (this.origin === 'constants') return;
            this.kernel.setUniform1f(this.id, this.uploadValue = value);
          }
        }]);

        return WebGLKernelValueFloat;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueFloat: WebGLKernelValueFloat
      };
    }, {
      "../../../utils": 113,
      "./index": 55
    }],
    53: [function (require, module, exports) {
      var _require131 = require('../../../utils'),
          utils = _require131.utils;

      var _require132 = require('./index'),
          WebGLKernelValue = _require132.WebGLKernelValue;

      var WebGLKernelValueHTMLImage =
      /*#__PURE__*/
      function (_WebGLKernelValue3) {
        _inherits(WebGLKernelValueHTMLImage, _WebGLKernelValue3);

        function WebGLKernelValueHTMLImage(value, settings) {
          var _this27;

          _classCallCheck(this, WebGLKernelValueHTMLImage);

          _this27 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueHTMLImage).call(this, value, settings));
          var width = value.width,
              height = value.height;

          _this27.checkSize(width, height);

          _this27.dimensions = [width, height, 1];

          _this27.requestTexture();

          _this27.textureSize = [width, height];
          _this27.uploadValue = value;
          return _this27;
        }

        _createClass(WebGLKernelValueHTMLImage, [{
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ";\n");
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(inputImage) {
            if (inputImage.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(inputImage.constructor);
              return;
            }

            var gl = this.context;
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue = inputImage);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueHTMLImage;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueHTMLImage: WebGLKernelValueHTMLImage
      };
    }, {
      "../../../utils": 113,
      "./index": 55
    }],
    54: [function (require, module, exports) {
      var _require133 = require('./html-image'),
          WebGLKernelValueHTMLImage = _require133.WebGLKernelValueHTMLImage;

      var WebGLKernelValueHTMLVideo =
      /*#__PURE__*/
      function (_WebGLKernelValueHTML2) {
        _inherits(WebGLKernelValueHTMLVideo, _WebGLKernelValueHTML2);

        function WebGLKernelValueHTMLVideo() {
          _classCallCheck(this, WebGLKernelValueHTMLVideo);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueHTMLVideo).apply(this, arguments));
        }

        return WebGLKernelValueHTMLVideo;
      }(WebGLKernelValueHTMLImage);

      module.exports = {
        WebGLKernelValueHTMLVideo: WebGLKernelValueHTMLVideo
      };
    }, {
      "./html-image": 53
    }],
    55: [function (require, module, exports) {
      var _require134 = require('../../../utils'),
          utils = _require134.utils;

      var _require135 = require('../../../input'),
          Input = _require135.Input;

      var _require136 = require('../../kernel-value'),
          KernelValue = _require136.KernelValue;

      var WebGLKernelValue =
      /*#__PURE__*/
      function (_KernelValue) {
        _inherits(WebGLKernelValue, _KernelValue);

        function WebGLKernelValue(value, settings) {
          var _this28;

          _classCallCheck(this, WebGLKernelValue);

          _this28 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValue).call(this, value, settings));
          _this28.dimensionsId = null;
          _this28.sizeId = null;
          _this28.initialValueConstructor = value.constructor;
          _this28.onRequestTexture = settings.onRequestTexture;
          _this28.onRequestIndex = settings.onRequestIndex;
          _this28.uploadValue = null;
          _this28.textureSize = null;
          _this28.bitRatio = null;
          return _this28;
        }

        _createClass(WebGLKernelValue, [{
          key: "checkSize",
          value: function checkSize(width, height) {
            if (!this.kernel.validate) return;
            var maxTextureSize = this.kernel.constructor.features.maxTextureSize;

            if (width > maxTextureSize || height > maxTextureSize) {
              if (width > height) {
                throw new Error("Argument width of ".concat(width, " larger than maximum size of ").concat(maxTextureSize, " for your GPU"));
              } else {
                throw new Error("Argument height of ".concat(height, " larger than maximum size of ").concat(maxTextureSize, " for your GPU"));
              }
            }
          }
        }, {
          key: "requestTexture",
          value: function requestTexture() {
            this.texture = this.onRequestTexture();
            this.setupTexture();
          }
        }, {
          key: "setupTexture",
          value: function setupTexture() {
            this.contextHandle = this.onRequestContextHandle();
            this.index = this.onRequestIndex();
            this.dimensionsId = this.id + 'Dim';
            this.sizeId = this.id + 'Size';
          }
        }, {
          key: "getTransferArrayType",
          value: function getTransferArrayType(value) {
            if (Array.isArray(value[0])) {
              return this.getTransferArrayType(value[0]);
            }

            switch (value.constructor) {
              case Array:
              case Int32Array:
              case Int16Array:
              case Int8Array:
                return Float32Array;

              case Uint8ClampedArray:
              case Uint8Array:
              case Uint16Array:
              case Uint32Array:
              case Float32Array:
              case Float64Array:
                return value.constructor;
            }

            console.warn('Unfamiliar constructor type.  Will go ahead and use, but likley this may result in a transfer of zeros');
            return value.constructor;
          }
        }, {
          key: "formatArrayTransfer",
          value: function formatArrayTransfer(value, length, Type) {
            if (utils.isArray(value[0]) || this.optimizeFloatMemory) {
              var valuesFlat = new Float32Array(length);
              utils.flattenTo(value, valuesFlat);
              return valuesFlat;
            } else {
              switch (value.constructor) {
                case Uint8ClampedArray:
                case Uint8Array:
                case Int8Array:
                case Uint16Array:
                case Int16Array:
                case Float32Array:
                case Int32Array:
                  {
                    var _valuesFlat = new (Type || value.constructor)(length);

                    utils.flattenTo(value, _valuesFlat);
                    return _valuesFlat;
                  }

                default:
                  {
                    var _valuesFlat2 = new Float32Array(length);

                    utils.flattenTo(value, _valuesFlat2);
                    return _valuesFlat2;
                  }
              }
            }
          }
        }, {
          key: "getBitRatio",
          value: function getBitRatio(value) {
            if (Array.isArray(value[0])) {
              return this.getBitRatio(value[0]);
            } else if (value.constructor === Input) {
              return this.getBitRatio(value.value);
            }

            switch (value.constructor) {
              case Uint8ClampedArray:
              case Uint8Array:
              case Int8Array:
                return 1;

              case Uint16Array:
              case Int16Array:
                return 2;

              case Float32Array:
              case Int32Array:
              default:
                return 4;
            }
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            throw new Error("\"getStringValueHandler\" not implemented on ".concat(this.constructor.name));
          }
        }, {
          key: "getVariablePrecisionString",
          value: function getVariablePrecisionString() {
            return this.kernel.getVariablePrecisionString(this.textureSize || undefined, this.tactic || undefined);
          }
        }]);

        return WebGLKernelValue;
      }(KernelValue);

      module.exports = {
        WebGLKernelValue: WebGLKernelValue
      };
    }, {
      "../../../input": 109,
      "../../../utils": 113,
      "../../kernel-value": 35
    }],
    56: [function (require, module, exports) {
      var _require137 = require('../../../utils'),
          utils = _require137.utils;

      var _require138 = require('./index'),
          WebGLKernelValue = _require138.WebGLKernelValue;

      var WebGLKernelValueInteger =
      /*#__PURE__*/
      function (_WebGLKernelValue4) {
        _inherits(WebGLKernelValueInteger, _WebGLKernelValue4);

        function WebGLKernelValueInteger(value, settings) {
          var _this29;

          _classCallCheck(this, WebGLKernelValueInteger);

          _this29 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueInteger).call(this, value, settings));
          _this29.uploadValue = value;
          return _this29;
        }

        _createClass(WebGLKernelValueInteger, [{
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ";\n");
          }
        }, {
          key: "getSource",
          value: function getSource(value) {
            if (this.origin === 'constants') {
              return "const int ".concat(this.id, " = ").concat(parseInt(value), ";\n");
            }

            return "uniform int ".concat(this.id, ";\n");
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (this.origin === 'constants') return;
            this.kernel.setUniform1i(this.id, this.uploadValue = value);
          }
        }]);

        return WebGLKernelValueInteger;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueInteger: WebGLKernelValueInteger
      };
    }, {
      "../../../utils": 113,
      "./index": 55
    }],
    57: [function (require, module, exports) {
      var _require139 = require('../../../utils'),
          utils = _require139.utils;

      var _require140 = require('./index'),
          WebGLKernelValue = _require140.WebGLKernelValue;

      var WebGLKernelValueMemoryOptimizedNumberTexture =
      /*#__PURE__*/
      function (_WebGLKernelValue5) {
        _inherits(WebGLKernelValueMemoryOptimizedNumberTexture, _WebGLKernelValue5);

        function WebGLKernelValueMemoryOptimizedNumberTexture(value, settings) {
          var _this30;

          _classCallCheck(this, WebGLKernelValueMemoryOptimizedNumberTexture);

          _this30 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueMemoryOptimizedNumberTexture).call(this, value, settings));

          var _value$size3 = _slicedToArray(value.size, 2),
              width = _value$size3[0],
              height = _value$size3[1];

          _this30.checkSize(width, height);

          _this30.setupTexture();

          _this30.dimensions = value.dimensions;
          _this30.textureSize = value.size;
          _this30.uploadValue = value.texture;
          _this30.forceUploadEachRun = true;
          return _this30;
        }

        _createClass(WebGLKernelValueMemoryOptimizedNumberTexture, [{
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ".texture;\n");
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(inputTexture) {
            if (inputTexture.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(inputTexture.constructor);
              return;
            }

            if (this.checkContext && inputTexture.context !== this.context) {
              throw new Error("Value ".concat(this.name, " (").concat(this.type, ") must be from same context"));
            }

            var gl = this.context;

            if (inputTexture.texture === this.kernel.outputTexture) {
              inputTexture = inputTexture.clone();
              gl.useProgram(this.kernel.program);
              this.kernel.textureGarbage.push(inputTexture);
            }

            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.uploadValue = inputTexture.texture);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueMemoryOptimizedNumberTexture;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueMemoryOptimizedNumberTexture: WebGLKernelValueMemoryOptimizedNumberTexture
      };
    }, {
      "../../../utils": 113,
      "./index": 55
    }],
    58: [function (require, module, exports) {
      var _require141 = require('../../../utils'),
          utils = _require141.utils;

      var _require142 = require('./index'),
          WebGLKernelValue = _require142.WebGLKernelValue;

      var WebGLKernelValueNumberTexture =
      /*#__PURE__*/
      function (_WebGLKernelValue6) {
        _inherits(WebGLKernelValueNumberTexture, _WebGLKernelValue6);

        function WebGLKernelValueNumberTexture(value, settings) {
          var _this31;

          _classCallCheck(this, WebGLKernelValueNumberTexture);

          _this31 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueNumberTexture).call(this, value, settings));

          var _value$size4 = _slicedToArray(value.size, 2),
              width = _value$size4[0],
              height = _value$size4[1];

          _this31.checkSize(width, height);

          _this31.setupTexture();

          var textureSize = value.size,
              dimensions = value.dimensions;
          _this31.bitRatio = _this31.getBitRatio(value);
          _this31.dimensions = dimensions;
          _this31.textureSize = textureSize;
          _this31.uploadValue = value.texture;
          _this31.forceUploadEachRun = true;
          return _this31;
        }

        _createClass(WebGLKernelValueNumberTexture, [{
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ".texture;\n");
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(inputTexture) {
            if (inputTexture.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(inputTexture.constructor);
              return;
            }

            if (this.checkContext && inputTexture.context !== this.context) {
              throw new Error("Value ".concat(this.name, " (").concat(this.type, ") must be from same context"));
            }

            var gl = this.context;

            if (inputTexture.texture === this.kernel.outputTexture) {
              inputTexture = inputTexture.clone();
              gl.useProgram(this.kernel.program);
              this.kernel.textureGarbage.push(inputTexture);
            }

            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.uploadValue = inputTexture.texture);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueNumberTexture;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueNumberTexture: WebGLKernelValueNumberTexture
      };
    }, {
      "../../../utils": 113,
      "./index": 55
    }],
    59: [function (require, module, exports) {
      var _require143 = require('../../../utils'),
          utils = _require143.utils;

      var _require144 = require('./index'),
          WebGLKernelValue = _require144.WebGLKernelValue;

      var WebGLKernelValueSingleArray =
      /*#__PURE__*/
      function (_WebGLKernelValue7) {
        _inherits(WebGLKernelValueSingleArray, _WebGLKernelValue7);

        function WebGLKernelValueSingleArray(value, settings) {
          var _this32;

          _classCallCheck(this, WebGLKernelValueSingleArray);

          _this32 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueSingleArray).call(this, value, settings));

          _this32.requestTexture();

          _this32.bitRatio = 4;
          _this32.dimensions = utils.getDimensions(value, true);
          _this32.textureSize = utils.getMemoryOptimizedFloatTextureSize(_this32.dimensions, _this32.bitRatio);
          _this32.uploadArrayLength = _this32.textureSize[0] * _this32.textureSize[1] * _this32.bitRatio;

          _this32.checkSize(_this32.textureSize[0] * _this32.bitRatio, _this32.textureSize[1] * _this32.bitRatio);

          _this32.uploadValue = new Float32Array(_this32.uploadArrayLength);
          return _this32;
        }

        _createClass(WebGLKernelValueSingleArray, [{
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return utils.linesToString(["const uploadValue_".concat(this.name, " = new Float32Array(").concat(this.uploadArrayLength, ")"), "flattenTo(".concat(this.varName, ", uploadValue_").concat(this.name, ")")]);
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (value.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch();
              return;
            }

            var gl = this.context;
            utils.flattenTo(value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueSingleArray;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueSingleArray: WebGLKernelValueSingleArray
      };
    }, {
      "../../../utils": 113,
      "./index": 55
    }],
    60: [function (require, module, exports) {
      var _require145 = require('../../../utils'),
          utils = _require145.utils;

      var _require146 = require('./index'),
          WebGLKernelValue = _require146.WebGLKernelValue;

      var WebGLKernelValueSingleArray1DI =
      /*#__PURE__*/
      function (_WebGLKernelValue8) {
        _inherits(WebGLKernelValueSingleArray1DI, _WebGLKernelValue8);

        function WebGLKernelValueSingleArray1DI(value, settings) {
          var _this33;

          _classCallCheck(this, WebGLKernelValueSingleArray1DI);

          _this33 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueSingleArray1DI).call(this, value, settings));

          _this33.requestTexture();

          _this33.bitRatio = 4;

          _this33.setShape(value);

          return _this33;
        }

        _createClass(WebGLKernelValueSingleArray1DI, [{
          key: "setShape",
          value: function setShape(value) {
            var valueDimensions = utils.getDimensions(value, true);
            this.textureSize = utils.getMemoryOptimizedFloatTextureSize(valueDimensions, this.bitRatio);
            this.dimensions = new Int32Array([valueDimensions[1], 1, 1]);
            this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
            this.checkSize(this.textureSize[0] * this.bitRatio, this.textureSize[1] * this.bitRatio);
            this.uploadValue = new Float32Array(this.uploadArrayLength);
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return utils.linesToString(["const uploadValue_".concat(this.name, " = new Float32Array(").concat(this.uploadArrayLength, ")"), "flattenTo(".concat(this.varName, ", uploadValue_").concat(this.name, ")")]);
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (value.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(value.constructor);
              return;
            }

            var gl = this.context;
            utils.flatten2dArrayTo(value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueSingleArray1DI;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueSingleArray1DI: WebGLKernelValueSingleArray1DI
      };
    }, {
      "../../../utils": 113,
      "./index": 55
    }],
    61: [function (require, module, exports) {
      var _require147 = require('../../../utils'),
          utils = _require147.utils;

      var _require148 = require('./index'),
          WebGLKernelValue = _require148.WebGLKernelValue;

      var WebGLKernelValueSingleArray2 =
      /*#__PURE__*/
      function (_WebGLKernelValue9) {
        _inherits(WebGLKernelValueSingleArray2, _WebGLKernelValue9);

        function WebGLKernelValueSingleArray2(value, settings) {
          var _this34;

          _classCallCheck(this, WebGLKernelValueSingleArray2);

          _this34 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueSingleArray2).call(this, value, settings));
          _this34.uploadValue = value;
          return _this34;
        }

        _createClass(WebGLKernelValueSingleArray2, [{
          key: "getSource",
          value: function getSource(value) {
            if (this.origin === 'constants') {
              return "const vec2 ".concat(this.id, " = vec2(").concat(value[0], ",").concat(value[1], ");\n");
            }

            return "uniform vec2 ".concat(this.id, ";\n");
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            if (this.origin === 'constants') return '';
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ";\n");
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (this.origin === 'constants') return;
            this.kernel.setUniform2fv(this.id, this.uploadValue = value);
          }
        }]);

        return WebGLKernelValueSingleArray2;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueSingleArray2: WebGLKernelValueSingleArray2
      };
    }, {
      "../../../utils": 113,
      "./index": 55
    }],
    62: [function (require, module, exports) {
      var _require149 = require('../../../utils'),
          utils = _require149.utils;

      var _require150 = require('./index'),
          WebGLKernelValue = _require150.WebGLKernelValue;

      var WebGLKernelValueSingleArray2DI =
      /*#__PURE__*/
      function (_WebGLKernelValue10) {
        _inherits(WebGLKernelValueSingleArray2DI, _WebGLKernelValue10);

        function WebGLKernelValueSingleArray2DI(value, settings) {
          var _this35;

          _classCallCheck(this, WebGLKernelValueSingleArray2DI);

          _this35 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueSingleArray2DI).call(this, value, settings));

          _this35.requestTexture();

          _this35.bitRatio = 4;

          _this35.setShape(value);

          return _this35;
        }

        _createClass(WebGLKernelValueSingleArray2DI, [{
          key: "setShape",
          value: function setShape(value) {
            var valueDimensions = utils.getDimensions(value, true);
            this.textureSize = utils.getMemoryOptimizedFloatTextureSize(valueDimensions, this.bitRatio);
            this.dimensions = new Int32Array([valueDimensions[1], valueDimensions[2], 1]);
            this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
            this.checkSize(this.textureSize[0] * this.bitRatio, this.textureSize[1] * this.bitRatio);
            this.uploadValue = new Float32Array(this.uploadArrayLength);
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return utils.linesToString(["const uploadValue_".concat(this.name, " = new Float32Array(").concat(this.uploadArrayLength, ")"), "flattenTo(".concat(this.varName, ", uploadValue_").concat(this.name, ")")]);
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (value.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(value.constructor);
              return;
            }

            var gl = this.context;
            utils.flatten3dArrayTo(value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueSingleArray2DI;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueSingleArray2DI: WebGLKernelValueSingleArray2DI
      };
    }, {
      "../../../utils": 113,
      "./index": 55
    }],
    63: [function (require, module, exports) {
      var _require151 = require('../../../utils'),
          utils = _require151.utils;

      var _require152 = require('./index'),
          WebGLKernelValue = _require152.WebGLKernelValue;

      var WebGLKernelValueSingleArray3 =
      /*#__PURE__*/
      function (_WebGLKernelValue11) {
        _inherits(WebGLKernelValueSingleArray3, _WebGLKernelValue11);

        function WebGLKernelValueSingleArray3(value, settings) {
          var _this36;

          _classCallCheck(this, WebGLKernelValueSingleArray3);

          _this36 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueSingleArray3).call(this, value, settings));
          _this36.uploadValue = value;
          return _this36;
        }

        _createClass(WebGLKernelValueSingleArray3, [{
          key: "getSource",
          value: function getSource(value) {
            if (this.origin === 'constants') {
              return "const vec3 ".concat(this.id, " = vec3(").concat(value[0], ",").concat(value[1], ",").concat(value[2], ");\n");
            }

            return "uniform vec3 ".concat(this.id, ";\n");
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            if (this.origin === 'constants') return '';
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ";\n");
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (this.origin === 'constants') return;
            this.kernel.setUniform3fv(this.id, this.uploadValue = value);
          }
        }]);

        return WebGLKernelValueSingleArray3;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueSingleArray3: WebGLKernelValueSingleArray3
      };
    }, {
      "../../../utils": 113,
      "./index": 55
    }],
    64: [function (require, module, exports) {
      var _require153 = require('../../../utils'),
          utils = _require153.utils;

      var _require154 = require('./index'),
          WebGLKernelValue = _require154.WebGLKernelValue;

      var WebGLKernelValueSingleArray3DI =
      /*#__PURE__*/
      function (_WebGLKernelValue12) {
        _inherits(WebGLKernelValueSingleArray3DI, _WebGLKernelValue12);

        function WebGLKernelValueSingleArray3DI(value, settings) {
          var _this37;

          _classCallCheck(this, WebGLKernelValueSingleArray3DI);

          _this37 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueSingleArray3DI).call(this, value, settings));

          _this37.requestTexture();

          _this37.bitRatio = 4;

          _this37.setShape(value);

          return _this37;
        }

        _createClass(WebGLKernelValueSingleArray3DI, [{
          key: "setShape",
          value: function setShape(value) {
            var valueDimensions = utils.getDimensions(value, true);
            this.textureSize = utils.getMemoryOptimizedFloatTextureSize(valueDimensions, this.bitRatio);
            this.dimensions = new Int32Array([valueDimensions[1], valueDimensions[2], valueDimensions[3]]);
            this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
            this.checkSize(this.textureSize[0] * this.bitRatio, this.textureSize[1] * this.bitRatio);
            this.uploadValue = new Float32Array(this.uploadArrayLength);
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return utils.linesToString(["const uploadValue_".concat(this.name, " = new Float32Array(").concat(this.uploadArrayLength, ")"), "flattenTo(".concat(this.varName, ", uploadValue_").concat(this.name, ")")]);
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (value.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch();
              return;
            }

            var gl = this.context;
            utils.flatten4dArrayTo(value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueSingleArray3DI;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueSingleArray3DI: WebGLKernelValueSingleArray3DI
      };
    }, {
      "../../../utils": 113,
      "./index": 55
    }],
    65: [function (require, module, exports) {
      var _require155 = require('../../../utils'),
          utils = _require155.utils;

      var _require156 = require('./index'),
          WebGLKernelValue = _require156.WebGLKernelValue;

      var WebGLKernelValueSingleArray4 =
      /*#__PURE__*/
      function (_WebGLKernelValue13) {
        _inherits(WebGLKernelValueSingleArray4, _WebGLKernelValue13);

        function WebGLKernelValueSingleArray4(value, settings) {
          var _this38;

          _classCallCheck(this, WebGLKernelValueSingleArray4);

          _this38 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueSingleArray4).call(this, value, settings));
          _this38.uploadValue = value;
          return _this38;
        }

        _createClass(WebGLKernelValueSingleArray4, [{
          key: "getSource",
          value: function getSource(value) {
            if (this.origin === 'constants') {
              return "const vec4 ".concat(this.id, " = vec4(").concat(value[0], ",").concat(value[1], ",").concat(value[2], ",").concat(value[3], ");\n");
            }

            return "uniform vec4 ".concat(this.id, ";\n");
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            if (this.origin === 'constants') return '';
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ";\n");
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (this.origin === 'constants') return;
            this.kernel.setUniform4fv(this.id, this.uploadValue = value);
          }
        }]);

        return WebGLKernelValueSingleArray4;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueSingleArray4: WebGLKernelValueSingleArray4
      };
    }, {
      "../../../utils": 113,
      "./index": 55
    }],
    66: [function (require, module, exports) {
      var _require157 = require('../../../utils'),
          utils = _require157.utils;

      var _require158 = require('./index'),
          WebGLKernelValue = _require158.WebGLKernelValue;

      var WebGLKernelValueSingleInput =
      /*#__PURE__*/
      function (_WebGLKernelValue14) {
        _inherits(WebGLKernelValueSingleInput, _WebGLKernelValue14);

        function WebGLKernelValueSingleInput(value, settings) {
          var _this39;

          _classCallCheck(this, WebGLKernelValueSingleInput);

          _this39 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueSingleInput).call(this, value, settings));

          _this39.requestTexture();

          _this39.bitRatio = 4;

          var _value$size5 = _slicedToArray(value.size, 3),
              w = _value$size5[0],
              h = _value$size5[1],
              d = _value$size5[2];

          _this39.dimensions = new Int32Array([w || 1, h || 1, d || 1]);
          _this39.textureSize = utils.getMemoryOptimizedFloatTextureSize(_this39.dimensions, _this39.bitRatio);
          _this39.uploadArrayLength = _this39.textureSize[0] * _this39.textureSize[1] * _this39.bitRatio;

          _this39.checkSize(_this39.textureSize[0] * _this39.bitRatio, _this39.textureSize[1] * _this39.bitRatio);

          _this39.uploadValue = new Float32Array(_this39.uploadArrayLength);
          return _this39;
        }

        _createClass(WebGLKernelValueSingleInput, [{
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return utils.linesToString(["const uploadValue_".concat(this.name, " = new Float32Array(").concat(this.uploadArrayLength, ")"), "flattenTo(".concat(this.varName, ".value, uploadValue_").concat(this.name, ")")]);
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(input) {
            if (input.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch();
              return;
            }

            var gl = this.context;
            utils.flattenTo(input.value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueSingleInput;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueSingleInput: WebGLKernelValueSingleInput
      };
    }, {
      "../../../utils": 113,
      "./index": 55
    }],
    67: [function (require, module, exports) {
      var _require159 = require('../../../utils'),
          utils = _require159.utils;

      var _require160 = require('./index'),
          WebGLKernelValue = _require160.WebGLKernelValue;

      var WebGLKernelValueUnsignedArray =
      /*#__PURE__*/
      function (_WebGLKernelValue15) {
        _inherits(WebGLKernelValueUnsignedArray, _WebGLKernelValue15);

        function WebGLKernelValueUnsignedArray(value, settings) {
          var _this40;

          _classCallCheck(this, WebGLKernelValueUnsignedArray);

          _this40 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueUnsignedArray).call(this, value, settings));

          _this40.requestTexture();

          _this40.bitRatio = _this40.getBitRatio(value);
          _this40.dimensions = utils.getDimensions(value, true);
          _this40.textureSize = utils.getMemoryOptimizedPackedTextureSize(_this40.dimensions, _this40.bitRatio);
          _this40.uploadArrayLength = _this40.textureSize[0] * _this40.textureSize[1] * (4 / _this40.bitRatio);

          _this40.checkSize(_this40.textureSize[0] * (4 / _this40.bitRatio), _this40.textureSize[1] * (4 / _this40.bitRatio));

          _this40.TranserArrayType = _this40.getTransferArrayType(value);
          _this40.preUploadValue = new _this40.TranserArrayType(_this40.uploadArrayLength);
          _this40.uploadValue = new Uint8Array(_this40.preUploadValue.buffer);
          return _this40;
        }

        _createClass(WebGLKernelValueUnsignedArray, [{
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return utils.linesToString(["const preUploadValue_".concat(this.name, " = new ").concat(this.TranserArrayType.name, "(").concat(this.uploadArrayLength, ")"), "const uploadValue_".concat(this.name, " = new Uint8Array(preUploadValue_").concat(this.name, ".buffer)"), "flattenTo(".concat(this.varName, ", preUploadValue_").concat(this.name, ")")]);
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (value.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch();
              return;
            }

            var gl = this.context;
            utils.flattenTo(value, this.preUploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueUnsignedArray;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueUnsignedArray: WebGLKernelValueUnsignedArray
      };
    }, {
      "../../../utils": 113,
      "./index": 55
    }],
    68: [function (require, module, exports) {
      var _require161 = require('../../../utils'),
          utils = _require161.utils;

      var _require162 = require('./index'),
          WebGLKernelValue = _require162.WebGLKernelValue;

      var WebGLKernelValueUnsignedInput =
      /*#__PURE__*/
      function (_WebGLKernelValue16) {
        _inherits(WebGLKernelValueUnsignedInput, _WebGLKernelValue16);

        function WebGLKernelValueUnsignedInput(value, settings) {
          var _this41;

          _classCallCheck(this, WebGLKernelValueUnsignedInput);

          _this41 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueUnsignedInput).call(this, value, settings));

          _this41.requestTexture();

          _this41.bitRatio = _this41.getBitRatio(value);

          var _value$size6 = _slicedToArray(value.size, 3),
              w = _value$size6[0],
              h = _value$size6[1],
              d = _value$size6[2];

          _this41.dimensions = new Int32Array([w || 1, h || 1, d || 1]);
          _this41.textureSize = utils.getMemoryOptimizedPackedTextureSize(_this41.dimensions, _this41.bitRatio);
          _this41.uploadArrayLength = _this41.textureSize[0] * _this41.textureSize[1] * (4 / _this41.bitRatio);

          _this41.checkSize(_this41.textureSize[0] * (4 / _this41.bitRatio), _this41.textureSize[1] * (4 / _this41.bitRatio));

          _this41.TranserArrayType = _this41.getTransferArrayType(value.value);
          _this41.preUploadValue = new _this41.TranserArrayType(_this41.uploadArrayLength);
          _this41.uploadValue = new Uint8Array(_this41.preUploadValue.buffer);
          return _this41;
        }

        _createClass(WebGLKernelValueUnsignedInput, [{
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return utils.linesToString(["const preUploadValue_".concat(this.name, " = new ").concat(this.TranserArrayType.name, "(").concat(this.uploadArrayLength, ")"), "const uploadValue_".concat(this.name, " = new Uint8Array(preUploadValue_").concat(this.name, ".buffer)"), "flattenTo(".concat(this.varName, ".value, preUploadValue_").concat(this.name, ")")]);
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(input) {
            if (input.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch();
              return;
            }

            var gl = this.context;
            utils.flattenTo(input.value, this.preUploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueUnsignedInput;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueUnsignedInput: WebGLKernelValueUnsignedInput
      };
    }, {
      "../../../utils": 113,
      "./index": 55
    }],
    69: [function (require, module, exports) {
      var _require163 = require('../gl/kernel'),
          GLKernel = _require163.GLKernel;

      var _require164 = require('../function-builder'),
          FunctionBuilder = _require164.FunctionBuilder;

      var _require165 = require('./function-node'),
          WebGLFunctionNode = _require165.WebGLFunctionNode;

      var _require166 = require('../../utils'),
          utils = _require166.utils;

      var mrud = require('../../plugins/math-random-uniformly-distributed');

      var _require167 = require('./fragment-shader'),
          fragmentShader = _require167.fragmentShader;

      var _require168 = require('./vertex-shader'),
          vertexShader = _require168.vertexShader;

      var _require169 = require('../gl/kernel-string'),
          glKernelString = _require169.glKernelString;

      var _require170 = require('./kernel-value-maps'),
          _lookupKernelValueType = _require170.lookupKernelValueType;

      var isSupported = null;
      var testCanvas = null;
      var testContext = null;
      var testExtensions = null;
      var features = null;
      var plugins = [mrud];
      var canvases = [];
      var maxTexSizes = {};

      var WebGLKernel =
      /*#__PURE__*/
      function (_GLKernel) {
        _inherits(WebGLKernel, _GLKernel);

        _createClass(WebGLKernel, null, [{
          key: "setupFeatureChecks",
          value: function setupFeatureChecks() {
            if (typeof document !== 'undefined') {
              testCanvas = document.createElement('canvas');
            } else if (typeof OffscreenCanvas !== 'undefined') {
              testCanvas = new OffscreenCanvas(0, 0);
            }

            if (!testCanvas) return;
            testContext = testCanvas.getContext('webgl') || testCanvas.getContext('experimental-webgl');
            if (!testContext || !testContext.getExtension) return;
            testExtensions = {
              OES_texture_float: testContext.getExtension('OES_texture_float'),
              OES_texture_float_linear: testContext.getExtension('OES_texture_float_linear'),
              OES_element_index_uint: testContext.getExtension('OES_element_index_uint'),
              WEBGL_draw_buffers: testContext.getExtension('WEBGL_draw_buffers')
            };
            features = this.getFeatures();
          }
        }, {
          key: "isContextMatch",
          value: function isContextMatch(context) {
            if (typeof WebGLRenderingContext !== 'undefined') {
              return context instanceof WebGLRenderingContext;
            }

            return false;
          }
        }, {
          key: "getIsTextureFloat",
          value: function getIsTextureFloat() {
            return Boolean(testExtensions.OES_texture_float);
          }
        }, {
          key: "getIsDrawBuffers",
          value: function getIsDrawBuffers() {
            return Boolean(testExtensions.WEBGL_draw_buffers);
          }
        }, {
          key: "getChannelCount",
          value: function getChannelCount() {
            return testExtensions.WEBGL_draw_buffers ? testContext.getParameter(testExtensions.WEBGL_draw_buffers.MAX_DRAW_BUFFERS_WEBGL) : 1;
          }
        }, {
          key: "getMaxTextureSize",
          value: function getMaxTextureSize() {
            return testContext.getParameter(testContext.MAX_TEXTURE_SIZE);
          }
        }, {
          key: "lookupKernelValueType",
          value: function lookupKernelValueType(type, dynamic, precision, value) {
            return _lookupKernelValueType(type, dynamic, precision, value);
          }
        }, {
          key: "isSupported",
          get: function get() {
            if (isSupported !== null) {
              return isSupported;
            }

            this.setupFeatureChecks();
            isSupported = this.isContextMatch(testContext);
            return isSupported;
          }
        }, {
          key: "testCanvas",
          get: function get() {
            return testCanvas;
          }
        }, {
          key: "testContext",
          get: function get() {
            return testContext;
          }
        }, {
          key: "features",
          get: function get() {
            return features;
          }
        }, {
          key: "fragmentShader",
          get: function get() {
            return fragmentShader;
          }
        }, {
          key: "vertexShader",
          get: function get() {
            return vertexShader;
          }
        }]);

        function WebGLKernel(source, settings) {
          var _this42;

          _classCallCheck(this, WebGLKernel);

          _this42 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernel).call(this, source, settings));
          _this42.program = null;
          _this42.pipeline = settings.pipeline;
          _this42.endianness = utils.systemEndianness();
          _this42.extensions = {};
          _this42.subKernelOutputTextures = null;
          _this42.argumentTextureCount = 0;
          _this42.constantTextureCount = 0;
          _this42.fragShader = null;
          _this42.vertShader = null;
          _this42.drawBuffersMap = null;
          _this42.outputTexture = null;
          _this42.maxTexSize = null;
          _this42.onRequestSwitchKernel = null;
          _this42.removeIstanbulCoverage = true;

          _this42.mergeSettings(source.settings || settings);

          _this42.threadDim = null;
          _this42.framebuffer = null;
          _this42.buffer = null;
          _this42.textureGarbage = [];
          _this42.textureCache = [];
          _this42.programUniformLocationCache = {};
          _this42.uniform1fCache = {};
          _this42.uniform1iCache = {};
          _this42.uniform2fCache = {};
          _this42.uniform2fvCache = {};
          _this42.uniform2ivCache = {};
          _this42.uniform3fvCache = {};
          _this42.uniform3ivCache = {};
          _this42.uniform4fvCache = {};
          _this42.uniform4ivCache = {};
          return _this42;
        }

        _createClass(WebGLKernel, [{
          key: "initCanvas",
          value: function initCanvas() {
            if (typeof document !== 'undefined') {
              var canvas = document.createElement('canvas');
              canvas.width = 2;
              canvas.height = 2;
              return canvas;
            } else if (typeof OffscreenCanvas !== 'undefined') {
              return new OffscreenCanvas(0, 0);
            }
          }
        }, {
          key: "initContext",
          value: function initContext() {
            var settings = {
              alpha: false,
              depth: false,
              antialias: false
            };
            return this.canvas.getContext('webgl', settings) || this.canvas.getContext('experimental-webgl', settings);
          }
        }, {
          key: "initPlugins",
          value: function initPlugins(settings) {
            var pluginsToUse = [];
            var source = this.source;

            if (typeof source === 'string') {
              for (var i = 0; i < plugins.length; i++) {
                var plugin = plugins[i];

                if (source.match(plugin.functionMatch)) {
                  pluginsToUse.push(plugin);
                }
              }
            } else if (_typeof(source) === 'object') {
              if (settings.pluginNames) {
                var _loop = function _loop(_i18) {
                  var plugin = plugins[_i18];
                  var usePlugin = settings.pluginNames.some(function (pluginName) {
                    return pluginName === plugin.name;
                  });

                  if (usePlugin) {
                    pluginsToUse.push(plugin);
                  }
                };

                for (var _i18 = 0; _i18 < plugins.length; _i18++) {
                  _loop(_i18);
                }
              }
            }

            return pluginsToUse;
          }
        }, {
          key: "initExtensions",
          value: function initExtensions() {
            this.extensions = {
              OES_texture_float: this.context.getExtension('OES_texture_float'),
              OES_texture_float_linear: this.context.getExtension('OES_texture_float_linear'),
              OES_element_index_uint: this.context.getExtension('OES_element_index_uint'),
              WEBGL_draw_buffers: this.context.getExtension('WEBGL_draw_buffers'),
              WEBGL_color_buffer_float: this.context.getExtension('WEBGL_color_buffer_float')
            };
          }
        }, {
          key: "validateSettings",
          value: function validateSettings(args) {
            if (!this.validate) {
              this.texSize = utils.getKernelTextureSize({
                optimizeFloatMemory: this.optimizeFloatMemory,
                precision: this.precision
              }, this.output);
              return;
            }

            var features = this.constructor.features;

            if (this.optimizeFloatMemory === true && !features.isTextureFloat) {
              throw new Error('Float textures are not supported');
            } else if (this.precision === 'single' && !features.isFloatRead) {
              throw new Error('Single precision not supported');
            } else if (!this.graphical && this.precision === null && features.isTextureFloat) {
              this.precision = features.isFloatRead ? 'single' : 'unsigned';
            }

            if (this.subKernels && this.subKernels.length > 0 && !this.extensions.WEBGL_draw_buffers) {
              throw new Error('could not instantiate draw buffers extension');
            }

            if (this.fixIntegerDivisionAccuracy === null) {
              this.fixIntegerDivisionAccuracy = !features.isIntegerDivisionAccurate;
            } else if (this.fixIntegerDivisionAccuracy && features.isIntegerDivisionAccurate) {
              this.fixIntegerDivisionAccuracy = false;
            }

            this.checkOutput();

            if (!this.output || this.output.length === 0) {
              if (args.length !== 1) {
                throw new Error('Auto output only supported for kernels with only one input');
              }

              var argType = utils.getVariableType(args[0], this.strictIntegers);

              switch (argType) {
                case 'Array':
                  this.output = utils.getDimensions(argType);
                  break;

                case 'NumberTexture':
                case 'MemoryOptimizedNumberTexture':
                case 'ArrayTexture(1)':
                case 'ArrayTexture(2)':
                case 'ArrayTexture(3)':
                case 'ArrayTexture(4)':
                  this.output = args[0].output;
                  break;

                default:
                  throw new Error('Auto output not supported for input type: ' + argType);
              }
            }

            if (this.graphical) {
              if (this.output.length !== 2) {
                throw new Error('Output must have 2 dimensions on graphical mode');
              }

              if (this.precision === 'precision') {
                this.precision = 'unsigned';
                console.warn('Cannot use graphical mode and single precision at the same time');
              }

              this.texSize = utils.clone(this.output);
              return;
            } else if (this.precision === null && features.isTextureFloat) {
              this.precision = 'single';
            }

            this.texSize = utils.getKernelTextureSize({
              optimizeFloatMemory: this.optimizeFloatMemory,
              precision: this.precision
            }, this.output);
            this.checkTextureSize();
          }
        }, {
          key: "updateMaxTexSize",
          value: function updateMaxTexSize() {
            var texSize = this.texSize,
                canvas = this.canvas;

            if (this.maxTexSize === null) {
              var canvasIndex = canvases.indexOf(canvas);

              if (canvasIndex === -1) {
                canvasIndex = canvases.length;
                canvases.push(canvas);
                maxTexSizes[canvasIndex] = [texSize[0], texSize[1]];
              }

              this.maxTexSize = maxTexSizes[canvasIndex];
            }

            if (this.maxTexSize[0] < texSize[0]) {
              this.maxTexSize[0] = texSize[0];
            }

            if (this.maxTexSize[1] < texSize[1]) {
              this.maxTexSize[1] = texSize[1];
            }
          }
        }, {
          key: "setupArguments",
          value: function setupArguments(args) {
            var _this43 = this;

            this.kernelArguments = [];
            this.argumentTextureCount = 0;
            var needsArgumentTypes = this.argumentTypes === null;

            if (needsArgumentTypes) {
              this.argumentTypes = [];
            }

            this.argumentSizes = [];
            this.argumentBitRatios = [];

            if (args.length < this.argumentNames.length) {
              throw new Error('not enough arguments for kernel');
            } else if (args.length > this.argumentNames.length) {
              throw new Error('too many arguments for kernel');
            }

            var gl = this.context;
            var textureIndexes = 0;

            var onRequestTexture = function onRequestTexture() {
              return _this43.createTexture();
            };

            var onRequestIndex = function onRequestIndex() {
              return textureIndexes++;
            };

            var onUpdateValueMismatch = function onUpdateValueMismatch(constructor) {
              _this43.switchKernels({
                type: 'argumentMismatch',
                needed: constructor
              });
            };

            var onRequestContextHandle = function onRequestContextHandle() {
              return gl.TEXTURE0 + _this43.constantTextureCount + _this43.argumentTextureCount++;
            };

            for (var index = 0; index < args.length; index++) {
              var value = args[index];
              var _name7 = this.argumentNames[index];
              var type = void 0;

              if (needsArgumentTypes) {
                type = utils.getVariableType(value, this.strictIntegers);
                this.argumentTypes.push(type);
              } else {
                type = this.argumentTypes[index];
              }

              var KernelValue = this.constructor.lookupKernelValueType(type, this.dynamicArguments ? 'dynamic' : 'static', this.precision, args[index]);

              if (KernelValue === null) {
                return this.requestFallback(args);
              }

              var kernelArgument = new KernelValue(value, {
                name: _name7,
                type: type,
                tactic: this.tactic,
                origin: 'user',
                context: gl,
                checkContext: this.checkContext,
                kernel: this,
                strictIntegers: this.strictIntegers,
                onRequestTexture: onRequestTexture,
                onRequestIndex: onRequestIndex,
                onUpdateValueMismatch: onUpdateValueMismatch,
                onRequestContextHandle: onRequestContextHandle
              });
              this.kernelArguments.push(kernelArgument);
              this.argumentSizes.push(kernelArgument.textureSize);
              this.argumentBitRatios[index] = kernelArgument.bitRatio;
            }
          }
        }, {
          key: "createTexture",
          value: function createTexture() {
            var texture = this.context.createTexture();
            this.textureCache.push(texture);
            return texture;
          }
        }, {
          key: "setupConstants",
          value: function setupConstants(args) {
            var _this44 = this;

            var gl = this.context;
            this.kernelConstants = [];
            this.forceUploadKernelConstants = [];
            var needsConstantTypes = this.constantTypes === null;

            if (needsConstantTypes) {
              this.constantTypes = {};
            }

            this.constantBitRatios = {};
            var textureIndexes = 0;

            for (var _name8 in this.constants) {
              var value = this.constants[_name8];
              var type = void 0;

              if (needsConstantTypes) {
                type = utils.getVariableType(value, this.strictIntegers);
                this.constantTypes[_name8] = type;
              } else {
                type = this.constantTypes[_name8];
              }

              var KernelValue = this.constructor.lookupKernelValueType(type, 'static', this.precision, value);

              if (KernelValue === null) {
                return this.requestFallback(args);
              }

              var kernelValue = new KernelValue(value, {
                name: _name8,
                type: type,
                tactic: this.tactic,
                origin: 'constants',
                context: this.context,
                checkContext: this.checkContext,
                kernel: this,
                strictIntegers: this.strictIntegers,
                onRequestTexture: function onRequestTexture() {
                  return _this44.createTexture();
                },
                onRequestIndex: function onRequestIndex() {
                  return textureIndexes++;
                },
                onRequestContextHandle: function onRequestContextHandle() {
                  return gl.TEXTURE0 + _this44.constantTextureCount++;
                }
              });
              this.constantBitRatios[_name8] = kernelValue.bitRatio;
              this.kernelConstants.push(kernelValue);

              if (kernelValue.forceUploadEachRun) {
                this.forceUploadKernelConstants.push(kernelValue);
              }
            }
          }
        }, {
          key: "build",
          value: function build() {
            this.initExtensions();
            this.validateSettings(arguments);
            this.setupConstants(arguments);
            if (this.fallbackRequested) return;
            this.setupArguments(arguments);
            if (this.fallbackRequested) return;
            this.updateMaxTexSize();
            this.translateSource();
            var failureResult = this.pickRenderStrategy(arguments);

            if (failureResult) {
              return failureResult;
            }

            var texSize = this.texSize,
                gl = this.context,
                canvas = this.canvas;
            gl.enable(gl.SCISSOR_TEST);

            if (this.pipeline && this.precision === 'single') {
              gl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);
              canvas.width = this.maxTexSize[0];
              canvas.height = this.maxTexSize[1];
            } else {
              gl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);
              canvas.width = this.maxTexSize[0];
              canvas.height = this.maxTexSize[1];
            }

            var threadDim = this.threadDim = Array.from(this.output);

            while (threadDim.length < 3) {
              threadDim.push(1);
            }

            var compiledVertexShader = this.getVertexShader(arguments);
            var vertShader = gl.createShader(gl.VERTEX_SHADER);
            gl.shaderSource(vertShader, compiledVertexShader);
            gl.compileShader(vertShader);
            this.vertShader = vertShader;
            var compiledFragmentShader = this.getFragmentShader(arguments);
            var fragShader = gl.createShader(gl.FRAGMENT_SHADER);
            gl.shaderSource(fragShader, compiledFragmentShader);
            gl.compileShader(fragShader);
            this.fragShader = fragShader;

            if (this.debug) {
              console.log('GLSL Shader Output:');
              console.log(compiledFragmentShader);
            }

            if (!gl.getShaderParameter(vertShader, gl.COMPILE_STATUS)) {
              throw new Error('Error compiling vertex shader: ' + gl.getShaderInfoLog(vertShader));
            }

            if (!gl.getShaderParameter(fragShader, gl.COMPILE_STATUS)) {
              throw new Error('Error compiling fragment shader: ' + gl.getShaderInfoLog(fragShader));
            }

            var program = this.program = gl.createProgram();
            gl.attachShader(program, vertShader);
            gl.attachShader(program, fragShader);
            gl.linkProgram(program);
            this.framebuffer = gl.createFramebuffer();
            this.framebuffer.width = texSize[0];
            this.framebuffer.height = texSize[1];
            var vertices = new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]);
            var texCoords = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);
            var texCoordOffset = vertices.byteLength;
            var buffer = this.buffer;

            if (!buffer) {
              buffer = this.buffer = gl.createBuffer();
              gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
              gl.bufferData(gl.ARRAY_BUFFER, vertices.byteLength + texCoords.byteLength, gl.STATIC_DRAW);
            } else {
              gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
            }

            gl.bufferSubData(gl.ARRAY_BUFFER, 0, vertices);
            gl.bufferSubData(gl.ARRAY_BUFFER, texCoordOffset, texCoords);
            var aPosLoc = gl.getAttribLocation(this.program, 'aPos');
            gl.enableVertexAttribArray(aPosLoc);
            gl.vertexAttribPointer(aPosLoc, 2, gl.FLOAT, false, 0, 0);
            var aTexCoordLoc = gl.getAttribLocation(this.program, 'aTexCoord');
            gl.enableVertexAttribArray(aTexCoordLoc);
            gl.vertexAttribPointer(aTexCoordLoc, 2, gl.FLOAT, false, 0, texCoordOffset);
            gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
            var i = 0;
            gl.useProgram(this.program);

            for (var p in this.constants) {
              this.kernelConstants[i++].updateValue(this.constants[p]);
            }

            if (!this.immutable) {
              this._setupOutputTexture();

              if (this.subKernels !== null && this.subKernels.length > 0) {
                this._setupSubOutputTextures();
              }
            }

            this.built = true;
          }
        }, {
          key: "translateSource",
          value: function translateSource() {
            var functionBuilder = FunctionBuilder.fromKernel(this, WebGLFunctionNode, {
              fixIntegerDivisionAccuracy: this.fixIntegerDivisionAccuracy
            });
            this.translatedSource = functionBuilder.getPrototypeString('kernel');
            this.setupReturnTypes(functionBuilder);
          }
        }, {
          key: "setupReturnTypes",
          value: function setupReturnTypes(functionBuilder) {
            if (!this.graphical && !this.returnType) {
              this.returnType = functionBuilder.getKernelResultType();
            }

            if (this.subKernels && this.subKernels.length > 0) {
              for (var i = 0; i < this.subKernels.length; i++) {
                var subKernel = this.subKernels[i];

                if (!subKernel.returnType) {
                  subKernel.returnType = functionBuilder.getSubKernelResultType(i);
                }
              }
            }
          }
        }, {
          key: "run",
          value: function run() {
            var kernelArguments = this.kernelArguments,
                texSize = this.texSize,
                forceUploadKernelConstants = this.forceUploadKernelConstants,
                gl = this.context;
            gl.useProgram(this.program);
            gl.scissor(0, 0, texSize[0], texSize[1]);

            if (this.dynamicOutput) {
              this.setUniform3iv('uOutputDim', new Int32Array(this.threadDim));
              this.setUniform2iv('uTexSize', texSize);
            }

            this.setUniform2f('ratio', texSize[0] / this.maxTexSize[0], texSize[1] / this.maxTexSize[1]);

            for (var i = 0; i < forceUploadKernelConstants.length; i++) {
              var constant = forceUploadKernelConstants[i];
              constant.updateValue(this.constants[constant.name]);
              if (this.switchingKernels) return;
            }

            for (var _i19 = 0; _i19 < kernelArguments.length; _i19++) {
              kernelArguments[_i19].updateValue(arguments[_i19]);

              if (this.switchingKernels) return;
            }

            if (this.plugins) {
              for (var _i20 = 0; _i20 < this.plugins.length; _i20++) {
                var plugin = this.plugins[_i20];

                if (plugin.onBeforeRun) {
                  plugin.onBeforeRun(this);
                }
              }
            }

            if (this.graphical) {
              if (this.pipeline) {
                gl.bindRenderbuffer(gl.RENDERBUFFER, null);
                gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);

                if (!this.outputTexture || this.immutable) {
                  this._setupOutputTexture();
                }

                gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
                return new this.TextureConstructor({
                  texture: this.outputTexture,
                  size: texSize,
                  dimensions: this.threadDim,
                  output: this.output,
                  context: this.context,
                  internalFormat: this.getInternalFormat(),
                  textureFormat: this.getTextureFormat()
                });
              }

              gl.bindRenderbuffer(gl.RENDERBUFFER, null);
              gl.bindFramebuffer(gl.FRAMEBUFFER, null);
              gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
              this.garbageCollect();
              return;
            }

            gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);

            if (this.immutable) {
              this._setupOutputTexture();
            }

            if (this.subKernels !== null) {
              if (this.immutable) {
                this._setupSubOutputTextures();
              }

              this.drawBuffers();
            }

            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
            this.garbageCollect();
          }
        }, {
          key: "garbageCollect",
          value: function garbageCollect() {
            while (this.textureGarbage.length > 0) {
              this.textureGarbage.pop().delete();
            }
          }
        }, {
          key: "drawBuffers",
          value: function drawBuffers() {
            this.extensions.WEBGL_draw_buffers.drawBuffersWEBGL(this.drawBuffersMap);
          }
        }, {
          key: "getInternalFormat",
          value: function getInternalFormat() {
            return this.context.RGBA;
          }
        }, {
          key: "getTextureFormat",
          value: function getTextureFormat() {
            var gl = this.context;

            switch (this.getInternalFormat()) {
              case gl.RGBA:
                return gl.RGBA;

              default:
                throw new Error('Unknown internal format');
            }
          }
        }, {
          key: "_setupOutputTexture",
          value: function _setupOutputTexture() {
            var gl = this.context;
            var texSize = this.texSize;
            var texture = this.outputTexture = this.createTexture();
            gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount);
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            var format = this.getInternalFormat();

            if (this.precision === 'single') {
              gl.texImage2D(gl.TEXTURE_2D, 0, format, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);
            } else {
              gl.texImage2D(gl.TEXTURE_2D, 0, format, texSize[0], texSize[1], 0, format, gl.UNSIGNED_BYTE, null);
            }

            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
          }
        }, {
          key: "_setupSubOutputTextures",
          value: function _setupSubOutputTextures() {
            var gl = this.context;
            var texSize = this.texSize;
            this.drawBuffersMap = [gl.COLOR_ATTACHMENT0];
            this.subKernelOutputTextures = [];

            for (var i = 0; i < this.subKernels.length; i++) {
              var texture = this.createTexture();
              this.subKernelOutputTextures.push(texture);
              this.drawBuffersMap.push(gl.COLOR_ATTACHMENT0 + i + 1);
              gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount + i);
              gl.bindTexture(gl.TEXTURE_2D, texture);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);

              if (this.precision === 'single') {
                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);
              } else {
                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
              }

              gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, texture, 0);
            }
          }
        }, {
          key: "setUniform1f",
          value: function setUniform1f(name, value) {
            if (this.uniform1fCache.hasOwnProperty(name)) {
              var cache = this.uniform1fCache[name];

              if (value === cache) {
                return;
              }
            }

            this.uniform1fCache[name] = value;
            var loc = this.getUniformLocation(name);
            this.context.uniform1f(loc, value);
          }
        }, {
          key: "setUniform1i",
          value: function setUniform1i(name, value) {
            if (this.uniform1iCache.hasOwnProperty(name)) {
              var cache = this.uniform1iCache[name];

              if (value === cache) {
                return;
              }
            }

            this.uniform1iCache[name] = value;
            var loc = this.getUniformLocation(name);
            this.context.uniform1i(loc, value);
          }
        }, {
          key: "setUniform2f",
          value: function setUniform2f(name, value1, value2) {
            if (this.uniform2fCache.hasOwnProperty(name)) {
              var cache = this.uniform2fCache[name];

              if (value1 === cache[0] && value2 === cache[1]) {
                return;
              }
            }

            this.uniform2fCache[name] = [value1, value2];
            var loc = this.getUniformLocation(name);
            this.context.uniform2f(loc, value1, value2);
          }
        }, {
          key: "setUniform2fv",
          value: function setUniform2fv(name, value) {
            if (this.uniform2fvCache.hasOwnProperty(name)) {
              var cache = this.uniform2fvCache[name];

              if (value[0] === cache[0] && value[1] === cache[1]) {
                return;
              }
            }

            this.uniform2fvCache[name] = value;
            var loc = this.getUniformLocation(name);
            this.context.uniform2fv(loc, value);
          }
        }, {
          key: "setUniform2iv",
          value: function setUniform2iv(name, value) {
            if (this.uniform2ivCache.hasOwnProperty(name)) {
              var cache = this.uniform2ivCache[name];

              if (value[0] === cache[0] && value[1] === cache[1]) {
                return;
              }
            }

            this.uniform2ivCache[name] = value;
            var loc = this.getUniformLocation(name);
            this.context.uniform2iv(loc, value);
          }
        }, {
          key: "setUniform3fv",
          value: function setUniform3fv(name, value) {
            if (this.uniform3fvCache.hasOwnProperty(name)) {
              var cache = this.uniform3fvCache[name];

              if (value[0] === cache[0] && value[1] === cache[1] && value[2] === cache[2]) {
                return;
              }
            }

            this.uniform3fvCache[name] = value;
            var loc = this.getUniformLocation(name);
            this.context.uniform3fv(loc, value);
          }
        }, {
          key: "setUniform3iv",
          value: function setUniform3iv(name, value) {
            if (this.uniform3ivCache.hasOwnProperty(name)) {
              var cache = this.uniform3ivCache[name];

              if (value[0] === cache[0] && value[1] === cache[1] && value[2] === cache[2]) {
                return;
              }
            }

            this.uniform3ivCache[name] = value;
            var loc = this.getUniformLocation(name);
            this.context.uniform3iv(loc, value);
          }
        }, {
          key: "setUniform4fv",
          value: function setUniform4fv(name, value) {
            if (this.uniform4fvCache.hasOwnProperty(name)) {
              var cache = this.uniform4fvCache[name];

              if (value[0] === cache[0] && value[1] === cache[1] && value[2] === cache[2] && value[3] === cache[3]) {
                return;
              }
            }

            this.uniform4fvCache[name] = value;
            var loc = this.getUniformLocation(name);
            this.context.uniform4fv(loc, value);
          }
        }, {
          key: "setUniform4iv",
          value: function setUniform4iv(name, value) {
            if (this.uniform4ivCache.hasOwnProperty(name)) {
              var cache = this.uniform4ivCache[name];

              if (value[0] === cache[0] && value[1] === cache[1] && value[2] === cache[2] && value[3] === cache[3]) {
                return;
              }
            }

            this.uniform4ivCache[name] = value;
            var loc = this.getUniformLocation(name);
            this.context.uniform4iv(loc, value);
          }
        }, {
          key: "getUniformLocation",
          value: function getUniformLocation(name) {
            if (this.programUniformLocationCache.hasOwnProperty(name)) {
              return this.programUniformLocationCache[name];
            }

            return this.programUniformLocationCache[name] = this.context.getUniformLocation(this.program, name);
          }
        }, {
          key: "_getFragShaderArtifactMap",
          value: function _getFragShaderArtifactMap(args) {
            return {
              HEADER: this._getHeaderString(),
              LOOP_MAX: this._getLoopMaxString(),
              PLUGINS: this._getPluginsString(),
              CONSTANTS: this._getConstantsString(),
              DECODE32_ENDIANNESS: this._getDecode32EndiannessString(),
              ENCODE32_ENDIANNESS: this._getEncode32EndiannessString(),
              DIVIDE_WITH_INTEGER_CHECK: this._getDivideWithIntegerCheckString(),
              INJECTED_NATIVE: this._getInjectedNative(),
              MAIN_CONSTANTS: this._getMainConstantsString(),
              MAIN_ARGUMENTS: this._getMainArgumentsString(args),
              KERNEL: this.getKernelString(),
              MAIN_RESULT: this.getMainResultString(),
              FLOAT_TACTIC_DECLARATION: this.getFloatTacticDeclaration(),
              INT_TACTIC_DECLARATION: this.getIntTacticDeclaration(),
              SAMPLER_2D_TACTIC_DECLARATION: this.getSampler2DTacticDeclaration(),
              SAMPLER_2D_ARRAY_TACTIC_DECLARATION: this.getSampler2DArrayTacticDeclaration()
            };
          }
        }, {
          key: "_getVertShaderArtifactMap",
          value: function _getVertShaderArtifactMap(args) {
            return {
              FLOAT_TACTIC_DECLARATION: this.getFloatTacticDeclaration(),
              INT_TACTIC_DECLARATION: this.getIntTacticDeclaration(),
              SAMPLER_2D_TACTIC_DECLARATION: this.getSampler2DTacticDeclaration(),
              SAMPLER_2D_ARRAY_TACTIC_DECLARATION: this.getSampler2DArrayTacticDeclaration()
            };
          }
        }, {
          key: "_getHeaderString",
          value: function _getHeaderString() {
            return this.subKernels !== null ? '#extension GL_EXT_draw_buffers : require\n' : '';
          }
        }, {
          key: "_getLoopMaxString",
          value: function _getLoopMaxString() {
            return this.loopMaxIterations ? " ".concat(parseInt(this.loopMaxIterations), ";\n") : ' 1000;\n';
          }
        }, {
          key: "_getPluginsString",
          value: function _getPluginsString() {
            var _this45 = this;

            if (!this.plugins) return '\n';
            return this.plugins.map(function (plugin) {
              return plugin.source && _this45.source.match(plugin.functionMatch) ? plugin.source : '';
            }).join('\n');
          }
        }, {
          key: "_getConstantsString",
          value: function _getConstantsString() {
            var result = [];
            var threadDim = this.threadDim,
                texSize = this.texSize;

            if (this.dynamicOutput) {
              result.push('uniform ivec3 uOutputDim', 'uniform ivec2 uTexSize');
            } else {
              result.push("ivec3 uOutputDim = ivec3(".concat(threadDim[0], ", ").concat(threadDim[1], ", ").concat(threadDim[2], ")"), "ivec2 uTexSize = ivec2(".concat(texSize[0], ", ").concat(texSize[1], ")"));
            }

            return utils.linesToString(result);
          }
        }, {
          key: "_getTextureCoordinate",
          value: function _getTextureCoordinate() {
            var subKernels = this.subKernels;

            if (subKernels === null || subKernels.length < 1) {
              return 'varying vec2 vTexCoord;\n';
            } else {
              return 'out vec2 vTexCoord;\n';
            }
          }
        }, {
          key: "_getDecode32EndiannessString",
          value: function _getDecode32EndiannessString() {
            return this.endianness === 'LE' ? '' : '  texel.rgba = texel.abgr;\n';
          }
        }, {
          key: "_getEncode32EndiannessString",
          value: function _getEncode32EndiannessString() {
            return this.endianness === 'LE' ? '' : '  texel.rgba = texel.abgr;\n';
          }
        }, {
          key: "_getDivideWithIntegerCheckString",
          value: function _getDivideWithIntegerCheckString() {
            return this.fixIntegerDivisionAccuracy ? "float div_with_int_check(float x, float y) {\n  if (floor(x) == x && floor(y) == y && integerMod(x, y) == 0.0) {\n    return float(int(x)/int(y));\n  }\n  return x / y;\n}" : '';
          }
        }, {
          key: "_getMainArgumentsString",
          value: function _getMainArgumentsString(args) {
            var results = [];
            var argumentNames = this.argumentNames;

            for (var i = 0; i < argumentNames.length; i++) {
              results.push(this.kernelArguments[i].getSource(args[i]));
            }

            return results.join('');
          }
        }, {
          key: "_getInjectedNative",
          value: function _getInjectedNative() {
            return this.injectedNative || '';
          }
        }, {
          key: "_getMainConstantsString",
          value: function _getMainConstantsString() {
            var result = [];
            var constants = this.constants;

            if (constants) {
              var i = 0;

              for (var _name9 in constants) {
                if (!this.constants.hasOwnProperty(_name9)) continue;
                result.push(this.kernelConstants[i++].getSource(this.constants[_name9]));
              }
            }

            return result.join('');
          }
        }, {
          key: "getKernelResultDeclaration",
          value: function getKernelResultDeclaration() {
            switch (this.returnType) {
              case 'Array(2)':
                return 'vec2 kernelResult';

              case 'Array(3)':
                return 'vec3 kernelResult';

              case 'Array(4)':
                return 'vec4 kernelResult';

              case 'LiteralInteger':
              case 'Float':
              case 'Number':
              case 'Integer':
                return 'float kernelResult';

              default:
                if (this.graphical) {
                  return 'float kernelResult';
                } else {
                  throw new Error("unrecognized output type \"".concat(this.returnType, "\""));
                }

            }
          }
        }, {
          key: "getKernelString",
          value: function getKernelString() {
            var result = [this.getKernelResultDeclaration()];
            var subKernels = this.subKernels;

            if (subKernels !== null) {
              switch (this.returnType) {
                case 'Number':
                case 'Float':
                case 'Integer':
                  for (var i = 0; i < subKernels.length; i++) {
                    var subKernel = subKernels[i];
                    result.push(subKernel.returnType === 'Integer' ? "int subKernelResult_".concat(subKernel.name, " = 0") : "float subKernelResult_".concat(subKernel.name, " = 0.0"));
                  }

                  break;

                case 'Array(2)':
                  for (var _i21 = 0; _i21 < subKernels.length; _i21++) {
                    result.push("vec2 subKernelResult_".concat(subKernels[_i21].name));
                  }

                  break;

                case 'Array(3)':
                  for (var _i22 = 0; _i22 < subKernels.length; _i22++) {
                    result.push("vec3 subKernelResult_".concat(subKernels[_i22].name));
                  }

                  break;

                case 'Array(4)':
                  for (var _i23 = 0; _i23 < subKernels.length; _i23++) {
                    result.push("vec4 subKernelResult_".concat(subKernels[_i23].name));
                  }

                  break;
              }
            }

            return utils.linesToString(result) + this.translatedSource;
          }
        }, {
          key: "getMainResultGraphical",
          value: function getMainResultGraphical() {
            return utils.linesToString(['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragColor = actualColor']);
          }
        }, {
          key: "getMainResultPackedPixels",
          value: function getMainResultPackedPixels() {
            switch (this.returnType) {
              case 'LiteralInteger':
              case 'Number':
              case 'Integer':
              case 'Float':
                return this.getMainResultKernelPackedPixels() + this.getMainResultSubKernelPackedPixels();

              default:
                throw new Error("packed output only usable with Numbers, \"".concat(this.returnType, "\" specified"));
            }
          }
        }, {
          key: "getMainResultKernelPackedPixels",
          value: function getMainResultKernelPackedPixels() {
            return utils.linesToString(['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', "  gl_FragData[0] = ".concat(this.useLegacyEncoder ? 'legacyEncode32' : 'encode32', "(kernelResult)")]);
          }
        }, {
          key: "getMainResultSubKernelPackedPixels",
          value: function getMainResultSubKernelPackedPixels() {
            var result = [];
            if (!this.subKernels) return '';

            for (var i = 0; i < this.subKernels.length; i++) {
              var subKernel = this.subKernels[i];

              if (subKernel.returnType === 'Integer') {
                result.push("  gl_FragData[".concat(i + 1, "] = ").concat(this.useLegacyEncoder ? 'legacyEncode32' : 'encode32', "(float(subKernelResult_").concat(this.subKernels[i].name, "))"));
              } else {
                result.push("  gl_FragData[".concat(i + 1, "] = ").concat(this.useLegacyEncoder ? 'legacyEncode32' : 'encode32', "(subKernelResult_").concat(this.subKernels[i].name, ")"));
              }
            }

            return utils.linesToString(result);
          }
        }, {
          key: "getMainResultMemoryOptimizedFloats",
          value: function getMainResultMemoryOptimizedFloats() {
            var result = ['  index *= 4'];

            switch (this.returnType) {
              case 'Number':
              case 'Integer':
              case 'Float':
                var channels = ['r', 'g', 'b', 'a'];

                for (var i = 0; i < channels.length; i++) {
                  var channel = channels[i];
                  this.getMainResultKernelMemoryOptimizedFloats(result, channel);
                  this.getMainResultSubKernelMemoryOptimizedFloats(result, channel);

                  if (i + 1 < channels.length) {
                    result.push('  index += 1');
                  }
                }

                break;

              default:
                throw new Error("optimized output only usable with Numbers, ".concat(this.returnType, " specified"));
            }

            return utils.linesToString(result);
          }
        }, {
          key: "getMainResultKernelMemoryOptimizedFloats",
          value: function getMainResultKernelMemoryOptimizedFloats(result, channel) {
            result.push('  threadId = indexTo3D(index, uOutputDim)', '  kernel()', "  gl_FragData[0].".concat(channel, " = kernelResult"));
          }
        }, {
          key: "getMainResultSubKernelMemoryOptimizedFloats",
          value: function getMainResultSubKernelMemoryOptimizedFloats(result, channel) {
            if (!this.subKernels) return result;

            for (var i = 0; i < this.subKernels.length; i++) {
              var subKernel = this.subKernels[i];

              if (subKernel.returnType === 'Integer') {
                result.push("  gl_FragData[".concat(i + 1, "].").concat(channel, " = float(subKernelResult_").concat(this.subKernels[i].name, ")"));
              } else {
                result.push("  gl_FragData[".concat(i + 1, "].").concat(channel, " = subKernelResult_").concat(this.subKernels[i].name));
              }
            }
          }
        }, {
          key: "getMainResultKernelNumberTexture",
          value: function getMainResultKernelNumberTexture() {
            return ['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragData[0][0] = kernelResult'];
          }
        }, {
          key: "getMainResultSubKernelNumberTexture",
          value: function getMainResultSubKernelNumberTexture() {
            var result = [];
            if (!this.subKernels) return result;

            for (var i = 0; i < this.subKernels.length; ++i) {
              var subKernel = this.subKernels[i];

              if (subKernel.returnType === 'Integer') {
                result.push("  gl_FragData[".concat(i + 1, "][0] = float(subKernelResult_").concat(subKernel.name, ")"));
              } else {
                result.push("  gl_FragData[".concat(i + 1, "][0] = subKernelResult_").concat(subKernel.name));
              }
            }

            return result;
          }
        }, {
          key: "getMainResultKernelArray2Texture",
          value: function getMainResultKernelArray2Texture() {
            return ['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragData[0][0] = kernelResult[0]', '  gl_FragData[0][1] = kernelResult[1]'];
          }
        }, {
          key: "getMainResultSubKernelArray2Texture",
          value: function getMainResultSubKernelArray2Texture() {
            var result = [];
            if (!this.subKernels) return result;

            for (var i = 0; i < this.subKernels.length; ++i) {
              result.push("  gl_FragData[".concat(i + 1, "][0] = subKernelResult_").concat(this.subKernels[i].name, "[0]"), "  gl_FragData[".concat(i + 1, "][1] = subKernelResult_").concat(this.subKernels[i].name, "[1]"));
            }

            return result;
          }
        }, {
          key: "getMainResultKernelArray3Texture",
          value: function getMainResultKernelArray3Texture() {
            return ['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragData[0][0] = kernelResult[0]', '  gl_FragData[0][1] = kernelResult[1]', '  gl_FragData[0][2] = kernelResult[2]'];
          }
        }, {
          key: "getMainResultSubKernelArray3Texture",
          value: function getMainResultSubKernelArray3Texture() {
            var result = [];
            if (!this.subKernels) return result;

            for (var i = 0; i < this.subKernels.length; ++i) {
              result.push("  gl_FragData[".concat(i + 1, "][0] = subKernelResult_").concat(this.subKernels[i].name, "[0]"), "  gl_FragData[".concat(i + 1, "][1] = subKernelResult_").concat(this.subKernels[i].name, "[1]"), "  gl_FragData[".concat(i + 1, "][2] = subKernelResult_").concat(this.subKernels[i].name, "[2]"));
            }

            return result;
          }
        }, {
          key: "getMainResultKernelArray4Texture",
          value: function getMainResultKernelArray4Texture() {
            return ['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragData[0] = kernelResult'];
          }
        }, {
          key: "getMainResultSubKernelArray4Texture",
          value: function getMainResultSubKernelArray4Texture() {
            var result = [];
            if (!this.subKernels) return result;

            switch (this.returnType) {
              case 'Number':
              case 'Float':
              case 'Integer':
                for (var i = 0; i < this.subKernels.length; ++i) {
                  var subKernel = this.subKernels[i];

                  if (subKernel.returnType === 'Integer') {
                    result.push("  gl_FragData[".concat(i + 1, "] = float(subKernelResult_").concat(this.subKernels[i].name, ")"));
                  } else {
                    result.push("  gl_FragData[".concat(i + 1, "] = subKernelResult_").concat(this.subKernels[i].name));
                  }
                }

                break;

              case 'Array(2)':
                for (var _i24 = 0; _i24 < this.subKernels.length; ++_i24) {
                  result.push("  gl_FragData[".concat(_i24 + 1, "][0] = subKernelResult_").concat(this.subKernels[_i24].name, "[0]"), "  gl_FragData[".concat(_i24 + 1, "][1] = subKernelResult_").concat(this.subKernels[_i24].name, "[1]"));
                }

                break;

              case 'Array(3)':
                for (var _i25 = 0; _i25 < this.subKernels.length; ++_i25) {
                  result.push("  gl_FragData[".concat(_i25 + 1, "][0] = subKernelResult_").concat(this.subKernels[_i25].name, "[0]"), "  gl_FragData[".concat(_i25 + 1, "][1] = subKernelResult_").concat(this.subKernels[_i25].name, "[1]"), "  gl_FragData[".concat(_i25 + 1, "][2] = subKernelResult_").concat(this.subKernels[_i25].name, "[2]"));
                }

                break;

              case 'Array(4)':
                for (var _i26 = 0; _i26 < this.subKernels.length; ++_i26) {
                  result.push("  gl_FragData[".concat(_i26 + 1, "][0] = subKernelResult_").concat(this.subKernels[_i26].name, "[0]"), "  gl_FragData[".concat(_i26 + 1, "][1] = subKernelResult_").concat(this.subKernels[_i26].name, "[1]"), "  gl_FragData[".concat(_i26 + 1, "][2] = subKernelResult_").concat(this.subKernels[_i26].name, "[2]"), "  gl_FragData[".concat(_i26 + 1, "][3] = subKernelResult_").concat(this.subKernels[_i26].name, "[3]"));
                }

                break;
            }

            return result;
          }
        }, {
          key: "replaceArtifacts",
          value: function replaceArtifacts(src, map) {
            return src.replace(/[ ]*__([A-Z]+[0-9]*([_]?[A-Z]*[0-9]?)*)__;\n/g, function (match, artifact) {
              if (map.hasOwnProperty(artifact)) {
                return map[artifact];
              }

              throw "unhandled artifact ".concat(artifact);
            });
          }
        }, {
          key: "getFragmentShader",
          value: function getFragmentShader(args) {
            if (this.compiledFragmentShader !== null) {
              return this.compiledFragmentShader;
            }

            return this.compiledFragmentShader = this.replaceArtifacts(this.constructor.fragmentShader, this._getFragShaderArtifactMap(args));
          }
        }, {
          key: "getVertexShader",
          value: function getVertexShader(args) {
            if (this.compiledVertexShader !== null) {
              return this.compiledVertexShader;
            }

            return this.compiledVertexShader = this.replaceArtifacts(this.constructor.vertexShader, this._getVertShaderArtifactMap(args));
          }
        }, {
          key: "toString",
          value: function toString() {
            var setupContextString = utils.linesToString(["const gl = context"]);
            return glKernelString(this.constructor, arguments, this, setupContextString);
          }
        }, {
          key: "destroy",
          value: function destroy(removeCanvasReferences) {
            if (this.buffer) {
              this.context.deleteBuffer(this.buffer);
            }

            if (this.framebuffer) {
              this.context.deleteFramebuffer(this.framebuffer);
            }

            if (this.vertShader) {
              this.context.deleteShader(this.vertShader);
            }

            if (this.fragShader) {
              this.context.deleteShader(this.fragShader);
            }

            if (this.program) {
              this.context.deleteProgram(this.program);
            }

            while (this.textureCache.length > 0) {
              var texture = this.textureCache.pop();
              this.context.deleteTexture(texture);
            }

            if (removeCanvasReferences) {
              var idx = canvases.indexOf(this.canvas);

              if (idx >= 0) {
                canvases[idx] = null;
                maxTexSizes[idx] = null;
              }
            }

            this.destroyExtensions();
            delete this.context;
            delete this.canvas;
          }
        }, {
          key: "destroyExtensions",
          value: function destroyExtensions() {
            this.extensions.OES_texture_float = null;
            this.extensions.OES_texture_float_linear = null;
            this.extensions.OES_element_index_uint = null;
            this.extensions.WEBGL_draw_buffers = null;
          }
        }, {
          key: "toJSON",
          value: function toJSON() {
            var json = _get(_getPrototypeOf(WebGLKernel.prototype), "toJSON", this).call(this);

            json.functionNodes = FunctionBuilder.fromKernel(this, WebGLFunctionNode).toJSON();
            json.settings.threadDim = this.threadDim;
            return json;
          }
        }], [{
          key: "destroyContext",
          value: function destroyContext(context) {
            var extension = context.getExtension('WEBGL_lose_context');

            if (extension) {
              extension.loseContext();
            }
          }
        }]);

        return WebGLKernel;
      }(GLKernel);

      module.exports = {
        WebGLKernel: WebGLKernel
      };
    }, {
      "../../plugins/math-random-uniformly-distributed": 111,
      "../../utils": 113,
      "../function-builder": 9,
      "../gl/kernel": 13,
      "../gl/kernel-string": 12,
      "./fragment-shader": 37,
      "./function-node": 38,
      "./kernel-value-maps": 39,
      "./vertex-shader": 70
    }],
    70: [function (require, module, exports) {
      var vertexShader = "__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n\nattribute vec2 aPos;\nattribute vec2 aTexCoord;\n\nvarying vec2 vTexCoord;\nuniform vec2 ratio;\n\nvoid main(void) {\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\n  vTexCoord = aTexCoord;\n}";
      module.exports = {
        vertexShader: vertexShader
      };
    }, {}],
    71: [function (require, module, exports) {
      var fragmentShader = "#version 300 es\n__HEADER__;\n__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n__SAMPLER_2D_ARRAY_TACTIC_DECLARATION__;\n\nconst int LOOP_MAX = __LOOP_MAX__;\n\n__PLUGINS__;\n__CONSTANTS__;\n\nin vec2 vTexCoord;\n\nconst int BIT_COUNT = 32;\nint modi(int x, int y) {\n  return x - y * (x / y);\n}\n\nint bitwiseOr(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) || (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseXOR(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) != (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseAnd(int a, int b) {\n  int result = 0;\n  int n = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) && (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 && b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseNot(int a) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (modi(a, 2) == 0) {\n      result += n;    \n    }\n    a = a / 2;\n    n = n * 2;\n  }\n  return result;\n}\nint bitwiseZeroFillLeftShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n *= 2;\n  }\n\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nint bitwiseSignedRightShift(int num, int shifts) {\n  return int(floor(float(num) / pow(2.0, float(shifts))));\n}\n\nint bitwiseZeroFillRightShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n /= 2;\n  }\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nvec2 integerMod(vec2 x, float y) {\n  vec2 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec3 integerMod(vec3 x, float y) {\n  vec3 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec4 integerMod(vec4 x, vec4 y) {\n  vec4 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nfloat integerMod(float x, float y) {\n  float res = floor(mod(x, y));\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\n}\n\nint integerMod(int x, int y) {\n  return x - (y * int(x/y));\n}\n\n__DIVIDE_WITH_INTEGER_CHECK__;\n\n// Here be dragons!\n// DO NOT OPTIMIZE THIS CODE\n// YOU WILL BREAK SOMETHING ON SOMEBODY'S MACHINE\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\nfloat decode32(vec4 texel) {\n  __DECODE32_ENDIANNESS__;\n  texel *= 255.0;\n  vec2 gte128;\n  gte128.x = texel.b >= 128.0 ? 1.0 : 0.0;\n  gte128.y = texel.a >= 128.0 ? 1.0 : 0.0;\n  float exponent = 2.0 * texel.a - 127.0 + dot(gte128, MAGIC_VEC);\n  float res = exp2(round(exponent));\n  texel.b = texel.b - 128.0 * gte128.x;\n  res = dot(texel, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;\n  res *= gte128.y * -2.0 + 1.0;\n  return res;\n}\n\nfloat decode16(vec4 texel, int index) {\n  int channel = integerMod(index, 2);\n  return texel[channel*2] * 255.0 + texel[channel*2 + 1] * 65280.0;\n}\n\nfloat decode8(vec4 texel, int index) {\n  int channel = integerMod(index, 4);\n  return texel[channel] * 255.0;\n}\n\nvec4 legacyEncode32(float f) {\n  float F = abs(f);\n  float sign = f < 0.0 ? 1.0 : 0.0;\n  float exponent = floor(log2(F));\n  float mantissa = (exp2(-exponent) * F);\n  // exponent += floor(log2(mantissa));\n  vec4 texel = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\n  texel.rg = integerMod(texel.rg, 256.0);\n  texel.b = integerMod(texel.b, 128.0);\n  texel.a = exponent*0.5 + 63.5;\n  texel.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\n  texel = floor(texel);\n  texel *= 0.003921569; // 1/255\n  __ENCODE32_ENDIANNESS__;\n  return texel;\n}\n\n// https://github.com/gpujs/gpu.js/wiki/Encoder-details\nvec4 encode32(float value) {\n  if (value == 0.0) return vec4(0, 0, 0, 0);\n\n  float exponent;\n  float mantissa;\n  vec4  result;\n  float sgn;\n\n  sgn = step(0.0, -value);\n  value = abs(value);\n\n  exponent = floor(log2(value));\n\n  mantissa = value*pow(2.0, -exponent)-1.0;\n  exponent = exponent+127.0;\n  result   = vec4(0,0,0,0);\n\n  result.a = floor(exponent/2.0);\n  exponent = exponent - result.a*2.0;\n  result.a = result.a + 128.0*sgn;\n\n  result.b = floor(mantissa * 128.0);\n  mantissa = mantissa - result.b / 128.0;\n  result.b = result.b + exponent*128.0;\n\n  result.g = floor(mantissa*32768.0);\n  mantissa = mantissa - result.g/32768.0;\n\n  result.r = floor(mantissa*8388608.0);\n  return result/255.0;\n}\n// Dragons end here\n\nint index;\nivec3 threadId;\n\nivec3 indexTo3D(int idx, ivec3 texDim) {\n  int z = int(idx / (texDim.x * texDim.y));\n  idx -= z * int(texDim.x * texDim.y);\n  int y = int(idx / texDim.x);\n  int x = int(integerMod(idx, texDim.x));\n  return ivec3(x, y, z);\n}\n\nfloat get32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  return decode32(texel);\n}\n\nfloat get16(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int w = texSize.x * 2;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize.x * 2, texSize.y));\n  return decode16(texel, index);\n}\n\nfloat get8(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int w = texSize.x * 4;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize.x * 4, texSize.y));\n  return decode8(texel, index);\n}\n\nfloat getMemoryOptimized32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int channel = integerMod(index, 4);\n  index = index / 4;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  index = index / 4;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  return texel[channel];\n}\n\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  return texture(tex, st / vec2(texSize));\n}\n\nvec4 getImage3D(sampler2DArray tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  return texture(tex, vec3(st / vec2(texSize), z));\n}\n\nfloat getFloatFromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return result[0];\n}\n\nvec2 getVec2FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec2(result[0], result[1]);\n}\n\nvec2 getMemoryOptimizedVec2(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 2);\n  index = index / 2;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  if (channel == 0) return vec2(texel.r, texel.g);\n  if (channel == 1) return vec2(texel.b, texel.a);\n  return vec2(0.0, 0.0);\n}\n\nvec3 getVec3FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec3(result[0], result[1], result[2]);\n}\n\nvec3 getMemoryOptimizedVec3(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int fieldIndex = 3 * (x + texDim.x * (y + texDim.y * z));\n  int vectorIndex = fieldIndex / 4;\n  int vectorOffset = fieldIndex - vectorIndex * 4;\n  int readY = vectorIndex / texSize.x;\n  int readX = vectorIndex - readY * texSize.x;\n  vec4 tex1 = texture(tex, (vec2(readX, readY) + 0.5) / vec2(texSize));\n\n  if (vectorOffset == 0) {\n    return tex1.xyz;\n  } else if (vectorOffset == 1) {\n    return tex1.yzw;\n  } else {\n    readX++;\n    if (readX >= texSize.x) {\n      readX = 0;\n      readY++;\n    }\n    vec4 tex2 = texture(tex, vec2(readX, readY) / vec2(texSize));\n    if (vectorOffset == 2) {\n      return vec3(tex1.z, tex1.w, tex2.x);\n    } else {\n      return vec3(tex1.w, tex2.x, tex2.y);\n    }\n  }\n}\n\nvec4 getVec4FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  return getImage2D(tex, texSize, texDim, z, y, x);\n}\n\nvec4 getMemoryOptimizedVec4(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 2);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  return vec4(texel.r, texel.g, texel.b, texel.a);\n}\n\nvec4 actualColor;\nvoid color(float r, float g, float b, float a) {\n  actualColor = vec4(r,g,b,a);\n}\n\nvoid color(float r, float g, float b) {\n  color(r,g,b,1.0);\n}\n\n__INJECTED_NATIVE__;\n__MAIN_CONSTANTS__;\n__MAIN_ARGUMENTS__;\n__KERNEL__;\n\nvoid main(void) {\n  index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\n  __MAIN_RESULT__;\n}";
      module.exports = {
        fragmentShader: fragmentShader
      };
    }, {}],
    72: [function (require, module, exports) {
      var _require171 = require('../web-gl/function-node'),
          WebGLFunctionNode = _require171.WebGLFunctionNode;

      var WebGL2FunctionNode =
      /*#__PURE__*/
      function (_WebGLFunctionNode) {
        _inherits(WebGL2FunctionNode, _WebGLFunctionNode);

        function WebGL2FunctionNode() {
          _classCallCheck(this, WebGL2FunctionNode);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2FunctionNode).apply(this, arguments));
        }

        _createClass(WebGL2FunctionNode, [{
          key: "astIdentifierExpression",
          value: function astIdentifierExpression(idtNode, retArr) {
            if (idtNode.type !== 'Identifier') {
              throw this.astErrorOutput('IdentifierExpression - not an Identifier', idtNode);
            }

            var type = this.getType(idtNode);

            if (idtNode.name === 'Infinity') {
              retArr.push('intBitsToFloat(2139095039)');
            } else if (type === 'Boolean') {
              if (this.argumentNames.indexOf(idtNode.name) > -1) {
                retArr.push("bool(user_".concat(idtNode.name, ")"));
              } else {
                retArr.push("user_".concat(idtNode.name));
              }
            } else {
              retArr.push("user_".concat(idtNode.name));
            }

            return retArr;
          }
        }]);

        return WebGL2FunctionNode;
      }(WebGLFunctionNode);

      module.exports = {
        WebGL2FunctionNode: WebGL2FunctionNode
      };
    }, {
      "../web-gl/function-node": 38
    }],
    73: [function (require, module, exports) {
      var _require172 = require('./kernel-value/boolean'),
          WebGL2KernelValueBoolean = _require172.WebGL2KernelValueBoolean;

      var _require173 = require('./kernel-value/float'),
          WebGL2KernelValueFloat = _require173.WebGL2KernelValueFloat;

      var _require174 = require('./kernel-value/integer'),
          WebGL2KernelValueInteger = _require174.WebGL2KernelValueInteger;

      var _require175 = require('./kernel-value/html-image'),
          WebGL2KernelValueHTMLImage = _require175.WebGL2KernelValueHTMLImage;

      var _require176 = require('./kernel-value/dynamic-html-image'),
          WebGL2KernelValueDynamicHTMLImage = _require176.WebGL2KernelValueDynamicHTMLImage;

      var _require177 = require('./kernel-value/html-image-array'),
          WebGL2KernelValueHTMLImageArray = _require177.WebGL2KernelValueHTMLImageArray;

      var _require178 = require('./kernel-value/dynamic-html-image-array'),
          WebGL2KernelValueDynamicHTMLImageArray = _require178.WebGL2KernelValueDynamicHTMLImageArray;

      var _require179 = require('./kernel-value/html-video'),
          WebGL2KernelValueHTMLVideo = _require179.WebGL2KernelValueHTMLVideo;

      var _require180 = require('./kernel-value/dynamic-html-video'),
          WebGL2KernelValueDynamicHTMLVideo = _require180.WebGL2KernelValueDynamicHTMLVideo;

      var _require181 = require('./kernel-value/single-input'),
          WebGL2KernelValueSingleInput = _require181.WebGL2KernelValueSingleInput;

      var _require182 = require('./kernel-value/dynamic-single-input'),
          WebGL2KernelValueDynamicSingleInput = _require182.WebGL2KernelValueDynamicSingleInput;

      var _require183 = require('./kernel-value/unsigned-input'),
          WebGL2KernelValueUnsignedInput = _require183.WebGL2KernelValueUnsignedInput;

      var _require184 = require('./kernel-value/dynamic-unsigned-input'),
          WebGL2KernelValueDynamicUnsignedInput = _require184.WebGL2KernelValueDynamicUnsignedInput;

      var _require185 = require('./kernel-value/memory-optimized-number-texture'),
          WebGL2KernelValueMemoryOptimizedNumberTexture = _require185.WebGL2KernelValueMemoryOptimizedNumberTexture;

      var _require186 = require('./kernel-value/dynamic-memory-optimized-number-texture'),
          WebGL2KernelValueDynamicMemoryOptimizedNumberTexture = _require186.WebGL2KernelValueDynamicMemoryOptimizedNumberTexture;

      var _require187 = require('./kernel-value/number-texture'),
          WebGL2KernelValueNumberTexture = _require187.WebGL2KernelValueNumberTexture;

      var _require188 = require('./kernel-value/dynamic-number-texture'),
          WebGL2KernelValueDynamicNumberTexture = _require188.WebGL2KernelValueDynamicNumberTexture;

      var _require189 = require('./kernel-value/single-array'),
          WebGL2KernelValueSingleArray = _require189.WebGL2KernelValueSingleArray;

      var _require190 = require('./kernel-value/dynamic-single-array'),
          WebGL2KernelValueDynamicSingleArray = _require190.WebGL2KernelValueDynamicSingleArray;

      var _require191 = require('./kernel-value/single-array1d-i'),
          WebGL2KernelValueSingleArray1DI = _require191.WebGL2KernelValueSingleArray1DI;

      var _require192 = require('./kernel-value/dynamic-single-array1d-i'),
          WebGL2KernelValueDynamicSingleArray1DI = _require192.WebGL2KernelValueDynamicSingleArray1DI;

      var _require193 = require('./kernel-value/single-array2d-i'),
          WebGL2KernelValueSingleArray2DI = _require193.WebGL2KernelValueSingleArray2DI;

      var _require194 = require('./kernel-value/dynamic-single-array2d-i'),
          WebGL2KernelValueDynamicSingleArray2DI = _require194.WebGL2KernelValueDynamicSingleArray2DI;

      var _require195 = require('./kernel-value/single-array3d-i'),
          WebGL2KernelValueSingleArray3DI = _require195.WebGL2KernelValueSingleArray3DI;

      var _require196 = require('./kernel-value/dynamic-single-array3d-i'),
          WebGL2KernelValueDynamicSingleArray3DI = _require196.WebGL2KernelValueDynamicSingleArray3DI;

      var _require197 = require('./kernel-value/single-array2'),
          WebGL2KernelValueSingleArray2 = _require197.WebGL2KernelValueSingleArray2;

      var _require198 = require('./kernel-value/single-array3'),
          WebGL2KernelValueSingleArray3 = _require198.WebGL2KernelValueSingleArray3;

      var _require199 = require('./kernel-value/single-array4'),
          WebGL2KernelValueSingleArray4 = _require199.WebGL2KernelValueSingleArray4;

      var _require200 = require('./kernel-value/unsigned-array'),
          WebGL2KernelValueUnsignedArray = _require200.WebGL2KernelValueUnsignedArray;

      var _require201 = require('./kernel-value/dynamic-unsigned-array'),
          WebGL2KernelValueDynamicUnsignedArray = _require201.WebGL2KernelValueDynamicUnsignedArray;

      var kernelValueMaps = {
        unsigned: {
          dynamic: {
            'Boolean': WebGL2KernelValueBoolean,
            'Integer': WebGL2KernelValueInteger,
            'Float': WebGL2KernelValueFloat,
            'Array': WebGL2KernelValueDynamicUnsignedArray,
            'Array(2)': false,
            'Array(3)': false,
            'Array(4)': false,
            'Array1D(2)': false,
            'Array1D(3)': false,
            'Array1D(4)': false,
            'Array2D(2)': false,
            'Array2D(3)': false,
            'Array2D(4)': false,
            'Array3D(2)': false,
            'Array3D(3)': false,
            'Array3D(4)': false,
            'Input': WebGL2KernelValueDynamicUnsignedInput,
            'NumberTexture': WebGL2KernelValueDynamicNumberTexture,
            'ArrayTexture(1)': WebGL2KernelValueDynamicNumberTexture,
            'ArrayTexture(2)': WebGL2KernelValueDynamicNumberTexture,
            'ArrayTexture(3)': WebGL2KernelValueDynamicNumberTexture,
            'ArrayTexture(4)': WebGL2KernelValueDynamicNumberTexture,
            'MemoryOptimizedNumberTexture': WebGL2KernelValueDynamicMemoryOptimizedNumberTexture,
            'HTMLImage': WebGL2KernelValueDynamicHTMLImage,
            'HTMLImageArray': WebGL2KernelValueDynamicHTMLImageArray,
            'HTMLVideo': WebGL2KernelValueDynamicHTMLVideo
          },
          static: {
            'Boolean': WebGL2KernelValueBoolean,
            'Float': WebGL2KernelValueFloat,
            'Integer': WebGL2KernelValueInteger,
            'Array': WebGL2KernelValueUnsignedArray,
            'Array(2)': false,
            'Array(3)': false,
            'Array(4)': false,
            'Array1D(2)': false,
            'Array1D(3)': false,
            'Array1D(4)': false,
            'Array2D(2)': false,
            'Array2D(3)': false,
            'Array2D(4)': false,
            'Array3D(2)': false,
            'Array3D(3)': false,
            'Array3D(4)': false,
            'Input': WebGL2KernelValueUnsignedInput,
            'NumberTexture': WebGL2KernelValueNumberTexture,
            'ArrayTexture(1)': WebGL2KernelValueNumberTexture,
            'ArrayTexture(2)': WebGL2KernelValueNumberTexture,
            'ArrayTexture(3)': WebGL2KernelValueNumberTexture,
            'ArrayTexture(4)': WebGL2KernelValueNumberTexture,
            'MemoryOptimizedNumberTexture': WebGL2KernelValueDynamicMemoryOptimizedNumberTexture,
            'HTMLImage': WebGL2KernelValueHTMLImage,
            'HTMLImageArray': WebGL2KernelValueHTMLImageArray,
            'HTMLVideo': WebGL2KernelValueHTMLVideo
          }
        },
        single: {
          dynamic: {
            'Boolean': WebGL2KernelValueBoolean,
            'Integer': WebGL2KernelValueInteger,
            'Float': WebGL2KernelValueFloat,
            'Array': WebGL2KernelValueDynamicSingleArray,
            'Array(2)': WebGL2KernelValueSingleArray2,
            'Array(3)': WebGL2KernelValueSingleArray3,
            'Array(4)': WebGL2KernelValueSingleArray4,
            'Array1D(2)': WebGL2KernelValueDynamicSingleArray1DI,
            'Array1D(3)': WebGL2KernelValueDynamicSingleArray1DI,
            'Array1D(4)': WebGL2KernelValueDynamicSingleArray1DI,
            'Array2D(2)': WebGL2KernelValueDynamicSingleArray2DI,
            'Array2D(3)': WebGL2KernelValueDynamicSingleArray2DI,
            'Array2D(4)': WebGL2KernelValueDynamicSingleArray2DI,
            'Array3D(2)': WebGL2KernelValueDynamicSingleArray3DI,
            'Array3D(3)': WebGL2KernelValueDynamicSingleArray3DI,
            'Array3D(4)': WebGL2KernelValueDynamicSingleArray3DI,
            'Input': WebGL2KernelValueDynamicSingleInput,
            'NumberTexture': WebGL2KernelValueDynamicNumberTexture,
            'ArrayTexture(1)': WebGL2KernelValueDynamicNumberTexture,
            'ArrayTexture(2)': WebGL2KernelValueDynamicNumberTexture,
            'ArrayTexture(3)': WebGL2KernelValueDynamicNumberTexture,
            'ArrayTexture(4)': WebGL2KernelValueDynamicNumberTexture,
            'MemoryOptimizedNumberTexture': WebGL2KernelValueDynamicMemoryOptimizedNumberTexture,
            'HTMLImage': WebGL2KernelValueDynamicHTMLImage,
            'HTMLImageArray': WebGL2KernelValueDynamicHTMLImageArray,
            'HTMLVideo': WebGL2KernelValueDynamicHTMLVideo
          },
          static: {
            'Boolean': WebGL2KernelValueBoolean,
            'Float': WebGL2KernelValueFloat,
            'Integer': WebGL2KernelValueInteger,
            'Array': WebGL2KernelValueSingleArray,
            'Array(2)': WebGL2KernelValueSingleArray2,
            'Array(3)': WebGL2KernelValueSingleArray3,
            'Array(4)': WebGL2KernelValueSingleArray4,
            'Array1D(2)': WebGL2KernelValueSingleArray1DI,
            'Array1D(3)': WebGL2KernelValueSingleArray1DI,
            'Array1D(4)': WebGL2KernelValueSingleArray1DI,
            'Array2D(2)': WebGL2KernelValueSingleArray2DI,
            'Array2D(3)': WebGL2KernelValueSingleArray2DI,
            'Array2D(4)': WebGL2KernelValueSingleArray2DI,
            'Array3D(2)': WebGL2KernelValueSingleArray3DI,
            'Array3D(3)': WebGL2KernelValueSingleArray3DI,
            'Array3D(4)': WebGL2KernelValueSingleArray3DI,
            'Input': WebGL2KernelValueSingleInput,
            'NumberTexture': WebGL2KernelValueNumberTexture,
            'ArrayTexture(1)': WebGL2KernelValueNumberTexture,
            'ArrayTexture(2)': WebGL2KernelValueNumberTexture,
            'ArrayTexture(3)': WebGL2KernelValueNumberTexture,
            'ArrayTexture(4)': WebGL2KernelValueNumberTexture,
            'MemoryOptimizedNumberTexture': WebGL2KernelValueMemoryOptimizedNumberTexture,
            'HTMLImage': WebGL2KernelValueHTMLImage,
            'HTMLImageArray': WebGL2KernelValueHTMLImageArray,
            'HTMLVideo': WebGL2KernelValueHTMLVideo
          }
        }
      };

      function lookupKernelValueType(type, dynamic, precision, value) {
        if (!type) {
          throw new Error('type missing');
        }

        if (!dynamic) {
          throw new Error('dynamic missing');
        }

        if (!precision) {
          throw new Error('precision missing');
        }

        if (value.type) {
          type = value.type;
        }

        var types = kernelValueMaps[precision][dynamic];

        if (types[type] === false) {
          return null;
        } else if (types[type] === undefined) {
          throw new Error("Could not find a KernelValue for ".concat(type));
        }

        return types[type];
      }

      module.exports = {
        kernelValueMaps: kernelValueMaps,
        lookupKernelValueType: lookupKernelValueType
      };
    }, {
      "./kernel-value/boolean": 74,
      "./kernel-value/dynamic-html-image": 76,
      "./kernel-value/dynamic-html-image-array": 75,
      "./kernel-value/dynamic-html-video": 77,
      "./kernel-value/dynamic-memory-optimized-number-texture": 78,
      "./kernel-value/dynamic-number-texture": 79,
      "./kernel-value/dynamic-single-array": 80,
      "./kernel-value/dynamic-single-array1d-i": 81,
      "./kernel-value/dynamic-single-array2d-i": 82,
      "./kernel-value/dynamic-single-array3d-i": 83,
      "./kernel-value/dynamic-single-input": 84,
      "./kernel-value/dynamic-unsigned-array": 85,
      "./kernel-value/dynamic-unsigned-input": 86,
      "./kernel-value/float": 87,
      "./kernel-value/html-image": 89,
      "./kernel-value/html-image-array": 88,
      "./kernel-value/html-video": 90,
      "./kernel-value/integer": 91,
      "./kernel-value/memory-optimized-number-texture": 92,
      "./kernel-value/number-texture": 93,
      "./kernel-value/single-array": 94,
      "./kernel-value/single-array1d-i": 95,
      "./kernel-value/single-array2": 96,
      "./kernel-value/single-array2d-i": 97,
      "./kernel-value/single-array3": 98,
      "./kernel-value/single-array3d-i": 99,
      "./kernel-value/single-array4": 100,
      "./kernel-value/single-input": 101,
      "./kernel-value/unsigned-array": 102,
      "./kernel-value/unsigned-input": 103
    }],
    74: [function (require, module, exports) {
      var _require202 = require('../../web-gl/kernel-value/boolean'),
          WebGLKernelValueBoolean = _require202.WebGLKernelValueBoolean;

      var WebGL2KernelValueBoolean =
      /*#__PURE__*/
      function (_WebGLKernelValueBool) {
        _inherits(WebGL2KernelValueBoolean, _WebGLKernelValueBool);

        function WebGL2KernelValueBoolean() {
          _classCallCheck(this, WebGL2KernelValueBoolean);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueBoolean).apply(this, arguments));
        }

        return WebGL2KernelValueBoolean;
      }(WebGLKernelValueBoolean);

      module.exports = {
        WebGL2KernelValueBoolean: WebGL2KernelValueBoolean
      };
    }, {
      "../../web-gl/kernel-value/boolean": 40
    }],
    75: [function (require, module, exports) {
      var _require203 = require('../../../utils'),
          utils = _require203.utils;

      var _require204 = require('./html-image-array'),
          WebGL2KernelValueHTMLImageArray = _require204.WebGL2KernelValueHTMLImageArray;

      var WebGL2KernelValueDynamicHTMLImageArray =
      /*#__PURE__*/
      function (_WebGL2KernelValueHTM) {
        _inherits(WebGL2KernelValueDynamicHTMLImageArray, _WebGL2KernelValueHTM);

        function WebGL2KernelValueDynamicHTMLImageArray() {
          _classCallCheck(this, WebGL2KernelValueDynamicHTMLImageArray);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueDynamicHTMLImageArray).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueDynamicHTMLImageArray, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2DArray ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(images) {
            var _images$ = images[0],
                width = _images$.width,
                height = _images$.height;
            this.checkSize(width, height);
            this.dimensions = [width, height, images.length];
            this.textureSize = [width, height];
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGL2KernelValueDynamicHTMLImageArray.prototype), "updateValue", this).call(this, images);
          }
        }]);

        return WebGL2KernelValueDynamicHTMLImageArray;
      }(WebGL2KernelValueHTMLImageArray);

      module.exports = {
        WebGL2KernelValueDynamicHTMLImageArray: WebGL2KernelValueDynamicHTMLImageArray
      };
    }, {
      "../../../utils": 113,
      "./html-image-array": 88
    }],
    76: [function (require, module, exports) {
      var _require205 = require('../../../utils'),
          utils = _require205.utils;

      var _require206 = require('../../web-gl/kernel-value/dynamic-html-image'),
          WebGLKernelValueDynamicHTMLImage = _require206.WebGLKernelValueDynamicHTMLImage;

      var WebGL2KernelValueDynamicHTMLImage =
      /*#__PURE__*/
      function (_WebGLKernelValueDyna2) {
        _inherits(WebGL2KernelValueDynamicHTMLImage, _WebGLKernelValueDyna2);

        function WebGL2KernelValueDynamicHTMLImage() {
          _classCallCheck(this, WebGL2KernelValueDynamicHTMLImage);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueDynamicHTMLImage).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueDynamicHTMLImage, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }]);

        return WebGL2KernelValueDynamicHTMLImage;
      }(WebGLKernelValueDynamicHTMLImage);

      module.exports = {
        WebGL2KernelValueDynamicHTMLImage: WebGL2KernelValueDynamicHTMLImage
      };
    }, {
      "../../../utils": 113,
      "../../web-gl/kernel-value/dynamic-html-image": 41
    }],
    77: [function (require, module, exports) {
      var _require207 = require('../../../utils'),
          utils = _require207.utils;

      var _require208 = require('./dynamic-html-image'),
          WebGL2KernelValueDynamicHTMLImage = _require208.WebGL2KernelValueDynamicHTMLImage;

      var WebGL2KernelValueDynamicHTMLVideo =
      /*#__PURE__*/
      function (_WebGL2KernelValueDyn) {
        _inherits(WebGL2KernelValueDynamicHTMLVideo, _WebGL2KernelValueDyn);

        function WebGL2KernelValueDynamicHTMLVideo() {
          _classCallCheck(this, WebGL2KernelValueDynamicHTMLVideo);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueDynamicHTMLVideo).apply(this, arguments));
        }

        return WebGL2KernelValueDynamicHTMLVideo;
      }(WebGL2KernelValueDynamicHTMLImage);

      module.exports = {
        WebGL2KernelValueDynamicHTMLVideo: WebGL2KernelValueDynamicHTMLVideo
      };
    }, {
      "../../../utils": 113,
      "./dynamic-html-image": 76
    }],
    78: [function (require, module, exports) {
      var _require209 = require('../../../utils'),
          utils = _require209.utils;

      var _require210 = require('../../web-gl/kernel-value/dynamic-memory-optimized-number-texture'),
          WebGLKernelValueDynamicMemoryOptimizedNumberTexture = _require210.WebGLKernelValueDynamicMemoryOptimizedNumberTexture;

      var WebGL2KernelValueDynamicMemoryOptimizedNumberTexture =
      /*#__PURE__*/
      function (_WebGLKernelValueDyna3) {
        _inherits(WebGL2KernelValueDynamicMemoryOptimizedNumberTexture, _WebGLKernelValueDyna3);

        function WebGL2KernelValueDynamicMemoryOptimizedNumberTexture() {
          _classCallCheck(this, WebGL2KernelValueDynamicMemoryOptimizedNumberTexture);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueDynamicMemoryOptimizedNumberTexture).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueDynamicMemoryOptimizedNumberTexture, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }]);

        return WebGL2KernelValueDynamicMemoryOptimizedNumberTexture;
      }(WebGLKernelValueDynamicMemoryOptimizedNumberTexture);

      module.exports = {
        WebGL2KernelValueDynamicMemoryOptimizedNumberTexture: WebGL2KernelValueDynamicMemoryOptimizedNumberTexture
      };
    }, {
      "../../../utils": 113,
      "../../web-gl/kernel-value/dynamic-memory-optimized-number-texture": 43
    }],
    79: [function (require, module, exports) {
      var _require211 = require('../../../utils'),
          utils = _require211.utils;

      var _require212 = require('../../web-gl/kernel-value/dynamic-number-texture'),
          WebGLKernelValueDynamicNumberTexture = _require212.WebGLKernelValueDynamicNumberTexture;

      var WebGL2KernelValueDynamicNumberTexture =
      /*#__PURE__*/
      function (_WebGLKernelValueDyna4) {
        _inherits(WebGL2KernelValueDynamicNumberTexture, _WebGLKernelValueDyna4);

        function WebGL2KernelValueDynamicNumberTexture() {
          _classCallCheck(this, WebGL2KernelValueDynamicNumberTexture);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueDynamicNumberTexture).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueDynamicNumberTexture, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }]);

        return WebGL2KernelValueDynamicNumberTexture;
      }(WebGLKernelValueDynamicNumberTexture);

      module.exports = {
        WebGL2KernelValueDynamicNumberTexture: WebGL2KernelValueDynamicNumberTexture
      };
    }, {
      "../../../utils": 113,
      "../../web-gl/kernel-value/dynamic-number-texture": 44
    }],
    80: [function (require, module, exports) {
      var _require213 = require('../../../utils'),
          utils = _require213.utils;

      var _require214 = require('../../web-gl2/kernel-value/single-array'),
          WebGL2KernelValueSingleArray = _require214.WebGL2KernelValueSingleArray;

      var WebGL2KernelValueDynamicSingleArray =
      /*#__PURE__*/
      function (_WebGL2KernelValueSin) {
        _inherits(WebGL2KernelValueDynamicSingleArray, _WebGL2KernelValueSin);

        function WebGL2KernelValueDynamicSingleArray() {
          _classCallCheck(this, WebGL2KernelValueDynamicSingleArray);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueDynamicSingleArray).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueDynamicSingleArray, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.dimensions = utils.getDimensions(value, true);
            this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);
            this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
            this.checkSize(this.textureSize[0] * this.bitRatio, this.textureSize[1] * this.bitRatio);
            this.uploadValue = new Float32Array(this.uploadArrayLength);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGL2KernelValueDynamicSingleArray.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGL2KernelValueDynamicSingleArray;
      }(WebGL2KernelValueSingleArray);

      module.exports = {
        WebGL2KernelValueDynamicSingleArray: WebGL2KernelValueDynamicSingleArray
      };
    }, {
      "../../../utils": 113,
      "../../web-gl2/kernel-value/single-array": 94
    }],
    81: [function (require, module, exports) {
      var _require215 = require('../../../utils'),
          utils = _require215.utils;

      var _require216 = require('../../web-gl2/kernel-value/single-array1d-i'),
          WebGL2KernelValueSingleArray1DI = _require216.WebGL2KernelValueSingleArray1DI;

      var WebGL2KernelValueDynamicSingleArray1DI =
      /*#__PURE__*/
      function (_WebGL2KernelValueSin2) {
        _inherits(WebGL2KernelValueDynamicSingleArray1DI, _WebGL2KernelValueSin2);

        function WebGL2KernelValueDynamicSingleArray1DI() {
          _classCallCheck(this, WebGL2KernelValueDynamicSingleArray1DI);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueDynamicSingleArray1DI).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueDynamicSingleArray1DI, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.setShape(value);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGL2KernelValueDynamicSingleArray1DI.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGL2KernelValueDynamicSingleArray1DI;
      }(WebGL2KernelValueSingleArray1DI);

      module.exports = {
        WebGL2KernelValueDynamicSingleArray1DI: WebGL2KernelValueDynamicSingleArray1DI
      };
    }, {
      "../../../utils": 113,
      "../../web-gl2/kernel-value/single-array1d-i": 95
    }],
    82: [function (require, module, exports) {
      var _require217 = require('../../../utils'),
          utils = _require217.utils;

      var _require218 = require('../../web-gl2/kernel-value/single-array2d-i'),
          WebGL2KernelValueSingleArray2DI = _require218.WebGL2KernelValueSingleArray2DI;

      var WebGL2KernelValueDynamicSingleArray2DI =
      /*#__PURE__*/
      function (_WebGL2KernelValueSin3) {
        _inherits(WebGL2KernelValueDynamicSingleArray2DI, _WebGL2KernelValueSin3);

        function WebGL2KernelValueDynamicSingleArray2DI() {
          _classCallCheck(this, WebGL2KernelValueDynamicSingleArray2DI);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueDynamicSingleArray2DI).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueDynamicSingleArray2DI, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.setShape(value);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGL2KernelValueDynamicSingleArray2DI.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGL2KernelValueDynamicSingleArray2DI;
      }(WebGL2KernelValueSingleArray2DI);

      module.exports = {
        WebGL2KernelValueDynamicSingleArray2DI: WebGL2KernelValueDynamicSingleArray2DI
      };
    }, {
      "../../../utils": 113,
      "../../web-gl2/kernel-value/single-array2d-i": 97
    }],
    83: [function (require, module, exports) {
      var _require219 = require('../../../utils'),
          utils = _require219.utils;

      var _require220 = require('../../web-gl2/kernel-value/single-array3d-i'),
          WebGL2KernelValueSingleArray3DI = _require220.WebGL2KernelValueSingleArray3DI;

      var WebGL2KernelValueDynamicSingleArray3DI =
      /*#__PURE__*/
      function (_WebGL2KernelValueSin4) {
        _inherits(WebGL2KernelValueDynamicSingleArray3DI, _WebGL2KernelValueSin4);

        function WebGL2KernelValueDynamicSingleArray3DI() {
          _classCallCheck(this, WebGL2KernelValueDynamicSingleArray3DI);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueDynamicSingleArray3DI).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueDynamicSingleArray3DI, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.setShape(value);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGL2KernelValueDynamicSingleArray3DI.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGL2KernelValueDynamicSingleArray3DI;
      }(WebGL2KernelValueSingleArray3DI);

      module.exports = {
        WebGL2KernelValueDynamicSingleArray3DI: WebGL2KernelValueDynamicSingleArray3DI
      };
    }, {
      "../../../utils": 113,
      "../../web-gl2/kernel-value/single-array3d-i": 99
    }],
    84: [function (require, module, exports) {
      var _require221 = require('../../../utils'),
          utils = _require221.utils;

      var _require222 = require('../../web-gl2/kernel-value/single-input'),
          WebGL2KernelValueSingleInput = _require222.WebGL2KernelValueSingleInput;

      var WebGL2KernelValueDynamicSingleInput =
      /*#__PURE__*/
      function (_WebGL2KernelValueSin5) {
        _inherits(WebGL2KernelValueDynamicSingleInput, _WebGL2KernelValueSin5);

        function WebGL2KernelValueDynamicSingleInput() {
          _classCallCheck(this, WebGL2KernelValueDynamicSingleInput);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueDynamicSingleInput).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueDynamicSingleInput, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            var _value$size7 = _slicedToArray(value.size, 3),
                w = _value$size7[0],
                h = _value$size7[1],
                d = _value$size7[2];

            this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);
            this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);
            this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
            this.checkSize(this.textureSize[0] * this.bitRatio, this.textureSize[1] * this.bitRatio);
            this.uploadValue = new Float32Array(this.uploadArrayLength);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGL2KernelValueDynamicSingleInput.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGL2KernelValueDynamicSingleInput;
      }(WebGL2KernelValueSingleInput);

      module.exports = {
        WebGL2KernelValueDynamicSingleInput: WebGL2KernelValueDynamicSingleInput
      };
    }, {
      "../../../utils": 113,
      "../../web-gl2/kernel-value/single-input": 101
    }],
    85: [function (require, module, exports) {
      var _require223 = require('../../../utils'),
          utils = _require223.utils;

      var _require224 = require('../../web-gl/kernel-value/dynamic-unsigned-array'),
          WebGLKernelValueDynamicUnsignedArray = _require224.WebGLKernelValueDynamicUnsignedArray;

      var WebGL2KernelValueDynamicUnsignedArray =
      /*#__PURE__*/
      function (_WebGLKernelValueDyna5) {
        _inherits(WebGL2KernelValueDynamicUnsignedArray, _WebGLKernelValueDyna5);

        function WebGL2KernelValueDynamicUnsignedArray() {
          _classCallCheck(this, WebGL2KernelValueDynamicUnsignedArray);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueDynamicUnsignedArray).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueDynamicUnsignedArray, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }]);

        return WebGL2KernelValueDynamicUnsignedArray;
      }(WebGLKernelValueDynamicUnsignedArray);

      module.exports = {
        WebGL2KernelValueDynamicUnsignedArray: WebGL2KernelValueDynamicUnsignedArray
      };
    }, {
      "../../../utils": 113,
      "../../web-gl/kernel-value/dynamic-unsigned-array": 50
    }],
    86: [function (require, module, exports) {
      var _require225 = require('../../../utils'),
          utils = _require225.utils;

      var _require226 = require('../../web-gl/kernel-value/dynamic-unsigned-input'),
          WebGLKernelValueDynamicUnsignedInput = _require226.WebGLKernelValueDynamicUnsignedInput;

      var WebGL2KernelValueDynamicUnsignedInput =
      /*#__PURE__*/
      function (_WebGLKernelValueDyna6) {
        _inherits(WebGL2KernelValueDynamicUnsignedInput, _WebGLKernelValueDyna6);

        function WebGL2KernelValueDynamicUnsignedInput() {
          _classCallCheck(this, WebGL2KernelValueDynamicUnsignedInput);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueDynamicUnsignedInput).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueDynamicUnsignedInput, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }]);

        return WebGL2KernelValueDynamicUnsignedInput;
      }(WebGLKernelValueDynamicUnsignedInput);

      module.exports = {
        WebGL2KernelValueDynamicUnsignedInput: WebGL2KernelValueDynamicUnsignedInput
      };
    }, {
      "../../../utils": 113,
      "../../web-gl/kernel-value/dynamic-unsigned-input": 51
    }],
    87: [function (require, module, exports) {
      var _require227 = require('../../../utils'),
          utils = _require227.utils;

      var _require228 = require('../../web-gl/kernel-value/float'),
          WebGLKernelValueFloat = _require228.WebGLKernelValueFloat;

      var WebGL2KernelValueFloat =
      /*#__PURE__*/
      function (_WebGLKernelValueFloa) {
        _inherits(WebGL2KernelValueFloat, _WebGLKernelValueFloa);

        function WebGL2KernelValueFloat() {
          _classCallCheck(this, WebGL2KernelValueFloat);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueFloat).apply(this, arguments));
        }

        return WebGL2KernelValueFloat;
      }(WebGLKernelValueFloat);

      module.exports = {
        WebGL2KernelValueFloat: WebGL2KernelValueFloat
      };
    }, {
      "../../../utils": 113,
      "../../web-gl/kernel-value/float": 52
    }],
    88: [function (require, module, exports) {
      var _require229 = require('../../../utils'),
          utils = _require229.utils;

      var _require230 = require('../../web-gl/kernel-value/index'),
          WebGLKernelValue = _require230.WebGLKernelValue;

      var WebGL2KernelValueHTMLImageArray =
      /*#__PURE__*/
      function (_WebGLKernelValue17) {
        _inherits(WebGL2KernelValueHTMLImageArray, _WebGLKernelValue17);

        function WebGL2KernelValueHTMLImageArray(value, settings) {
          var _this46;

          _classCallCheck(this, WebGL2KernelValueHTMLImageArray);

          _this46 = _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueHTMLImageArray).call(this, value, settings));

          _this46.checkSize(value[0].width, value[0].height);

          _this46.requestTexture();

          _this46.dimensions = [value[0].width, value[0].height, value.length];
          _this46.textureSize = [value[0].width, value[0].height];
          return _this46;
        }

        _createClass(WebGL2KernelValueHTMLImageArray, [{
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ";\n");
          }
        }, {
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2DArray ").concat(this.id), "".concat(variablePrecision, " ivec2 ").concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(images) {
            var gl = this.context;
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D_ARRAY, this.texture);
            gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
            gl.texImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.RGBA, images[0].width, images[0].height, images.length, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);

            for (var i = 0; i < images.length; i++) {
              var xOffset = 0;
              var yOffset = 0;
              var imageDepth = 1;
              gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, 0, xOffset, yOffset, i, images[i].width, images[i].height, imageDepth, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue = images[i]);
            }

            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGL2KernelValueHTMLImageArray;
      }(WebGLKernelValue);

      module.exports = {
        WebGL2KernelValueHTMLImageArray: WebGL2KernelValueHTMLImageArray
      };
    }, {
      "../../../utils": 113,
      "../../web-gl/kernel-value/index": 55
    }],
    89: [function (require, module, exports) {
      var _require231 = require('../../../utils'),
          utils = _require231.utils;

      var _require232 = require('../../web-gl/kernel-value/html-image'),
          WebGLKernelValueHTMLImage = _require232.WebGLKernelValueHTMLImage;

      var WebGL2KernelValueHTMLImage =
      /*#__PURE__*/
      function (_WebGLKernelValueHTML3) {
        _inherits(WebGL2KernelValueHTMLImage, _WebGLKernelValueHTML3);

        function WebGL2KernelValueHTMLImage() {
          _classCallCheck(this, WebGL2KernelValueHTMLImage);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueHTMLImage).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueHTMLImage, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "".concat(variablePrecision, " ivec2 ").concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }]);

        return WebGL2KernelValueHTMLImage;
      }(WebGLKernelValueHTMLImage);

      module.exports = {
        WebGL2KernelValueHTMLImage: WebGL2KernelValueHTMLImage
      };
    }, {
      "../../../utils": 113,
      "../../web-gl/kernel-value/html-image": 53
    }],
    90: [function (require, module, exports) {
      var _require233 = require('../../../utils'),
          utils = _require233.utils;

      var _require234 = require('./html-image'),
          WebGL2KernelValueHTMLImage = _require234.WebGL2KernelValueHTMLImage;

      var WebGL2KernelValueHTMLVideo =
      /*#__PURE__*/
      function (_WebGL2KernelValueHTM2) {
        _inherits(WebGL2KernelValueHTMLVideo, _WebGL2KernelValueHTM2);

        function WebGL2KernelValueHTMLVideo() {
          _classCallCheck(this, WebGL2KernelValueHTMLVideo);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueHTMLVideo).apply(this, arguments));
        }

        return WebGL2KernelValueHTMLVideo;
      }(WebGL2KernelValueHTMLImage);

      module.exports = {
        WebGL2KernelValueHTMLVideo: WebGL2KernelValueHTMLVideo
      };
    }, {
      "../../../utils": 113,
      "./html-image": 89
    }],
    91: [function (require, module, exports) {
      var _require235 = require('../../web-gl/kernel-value/integer'),
          WebGLKernelValueInteger = _require235.WebGLKernelValueInteger;

      var WebGL2KernelValueInteger =
      /*#__PURE__*/
      function (_WebGLKernelValueInte) {
        _inherits(WebGL2KernelValueInteger, _WebGLKernelValueInte);

        function WebGL2KernelValueInteger() {
          _classCallCheck(this, WebGL2KernelValueInteger);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueInteger).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueInteger, [{
          key: "getSource",
          value: function getSource(value) {
            var variablePrecision = this.getVariablePrecisionString();

            if (this.origin === 'constants') {
              return "const ".concat(variablePrecision, " int ").concat(this.id, " = ").concat(parseInt(value), ";\n");
            }

            return "uniform ".concat(variablePrecision, " int ").concat(this.id, ";\n");
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (this.origin === 'constants') return;
            this.kernel.setUniform1i(this.id, this.uploadValue = value);
          }
        }]);

        return WebGL2KernelValueInteger;
      }(WebGLKernelValueInteger);

      module.exports = {
        WebGL2KernelValueInteger: WebGL2KernelValueInteger
      };
    }, {
      "../../web-gl/kernel-value/integer": 56
    }],
    92: [function (require, module, exports) {
      var _require236 = require('../../../utils'),
          utils = _require236.utils;

      var _require237 = require('../../web-gl/kernel-value/memory-optimized-number-texture'),
          WebGLKernelValueMemoryOptimizedNumberTexture = _require237.WebGLKernelValueMemoryOptimizedNumberTexture;

      var WebGL2KernelValueMemoryOptimizedNumberTexture =
      /*#__PURE__*/
      function (_WebGLKernelValueMemo2) {
        _inherits(WebGL2KernelValueMemoryOptimizedNumberTexture, _WebGLKernelValueMemo2);

        function WebGL2KernelValueMemoryOptimizedNumberTexture() {
          _classCallCheck(this, WebGL2KernelValueMemoryOptimizedNumberTexture);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueMemoryOptimizedNumberTexture).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueMemoryOptimizedNumberTexture, [{
          key: "getSource",
          value: function getSource() {
            var id = this.id,
                sizeId = this.sizeId,
                textureSize = this.textureSize,
                dimensionsId = this.dimensionsId,
                dimensions = this.dimensions;
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform sampler2D ".concat(id), "".concat(variablePrecision, " ivec2 ").concat(sizeId, " = ivec2(").concat(textureSize[0], ", ").concat(textureSize[1], ")"), "".concat(variablePrecision, " ivec3 ").concat(dimensionsId, " = ivec3(").concat(dimensions[0], ", ").concat(dimensions[1], ", ").concat(dimensions[2], ")")]);
          }
        }]);

        return WebGL2KernelValueMemoryOptimizedNumberTexture;
      }(WebGLKernelValueMemoryOptimizedNumberTexture);

      module.exports = {
        WebGL2KernelValueMemoryOptimizedNumberTexture: WebGL2KernelValueMemoryOptimizedNumberTexture
      };
    }, {
      "../../../utils": 113,
      "../../web-gl/kernel-value/memory-optimized-number-texture": 57
    }],
    93: [function (require, module, exports) {
      var _require238 = require('../../../utils'),
          utils = _require238.utils;

      var _require239 = require('../../web-gl/kernel-value/number-texture'),
          WebGLKernelValueNumberTexture = _require239.WebGLKernelValueNumberTexture;

      var WebGL2KernelValueNumberTexture =
      /*#__PURE__*/
      function (_WebGLKernelValueNumb2) {
        _inherits(WebGL2KernelValueNumberTexture, _WebGLKernelValueNumb2);

        function WebGL2KernelValueNumberTexture() {
          _classCallCheck(this, WebGL2KernelValueNumberTexture);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueNumberTexture).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueNumberTexture, [{
          key: "getSource",
          value: function getSource() {
            var id = this.id,
                sizeId = this.sizeId,
                textureSize = this.textureSize,
                dimensionsId = this.dimensionsId,
                dimensions = this.dimensions;
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(id), "".concat(variablePrecision, " ivec2 ").concat(sizeId, " = ivec2(").concat(textureSize[0], ", ").concat(textureSize[1], ")"), "".concat(variablePrecision, " ivec3 ").concat(dimensionsId, " = ivec3(").concat(dimensions[0], ", ").concat(dimensions[1], ", ").concat(dimensions[2], ")")]);
          }
        }]);

        return WebGL2KernelValueNumberTexture;
      }(WebGLKernelValueNumberTexture);

      module.exports = {
        WebGL2KernelValueNumberTexture: WebGL2KernelValueNumberTexture
      };
    }, {
      "../../../utils": 113,
      "../../web-gl/kernel-value/number-texture": 58
    }],
    94: [function (require, module, exports) {
      var _require240 = require('../../../utils'),
          utils = _require240.utils;

      var _require241 = require('../../web-gl/kernel-value/single-array'),
          WebGLKernelValueSingleArray = _require241.WebGLKernelValueSingleArray;

      var WebGL2KernelValueSingleArray =
      /*#__PURE__*/
      function (_WebGLKernelValueSing6) {
        _inherits(WebGL2KernelValueSingleArray, _WebGLKernelValueSing6);

        function WebGL2KernelValueSingleArray() {
          _classCallCheck(this, WebGL2KernelValueSingleArray);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueSingleArray).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueSingleArray, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "".concat(variablePrecision, " ivec2 ").concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (value.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch();
              return;
            }

            var gl = this.context;
            utils.flattenTo(value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGL2KernelValueSingleArray;
      }(WebGLKernelValueSingleArray);

      module.exports = {
        WebGL2KernelValueSingleArray: WebGL2KernelValueSingleArray
      };
    }, {
      "../../../utils": 113,
      "../../web-gl/kernel-value/single-array": 59
    }],
    95: [function (require, module, exports) {
      var _require242 = require('../../../utils'),
          utils = _require242.utils;

      var _require243 = require('../../web-gl/kernel-value/single-array1d-i'),
          WebGLKernelValueSingleArray1DI = _require243.WebGLKernelValueSingleArray1DI;

      var WebGL2KernelValueSingleArray1DI =
      /*#__PURE__*/
      function (_WebGLKernelValueSing7) {
        _inherits(WebGL2KernelValueSingleArray1DI, _WebGLKernelValueSing7);

        function WebGL2KernelValueSingleArray1DI() {
          _classCallCheck(this, WebGL2KernelValueSingleArray1DI);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueSingleArray1DI).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueSingleArray1DI, [{
          key: "updateValue",
          value: function updateValue(value) {
            if (value.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch();
              return;
            }

            var gl = this.context;
            utils.flattenTo(value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGL2KernelValueSingleArray1DI;
      }(WebGLKernelValueSingleArray1DI);

      module.exports = {
        WebGL2KernelValueSingleArray1DI: WebGL2KernelValueSingleArray1DI
      };
    }, {
      "../../../utils": 113,
      "../../web-gl/kernel-value/single-array1d-i": 60
    }],
    96: [function (require, module, exports) {
      var _require244 = require('../../web-gl/kernel-value/single-array2'),
          WebGLKernelValueSingleArray2 = _require244.WebGLKernelValueSingleArray2;

      var WebGL2KernelValueSingleArray2 =
      /*#__PURE__*/
      function (_WebGLKernelValueSing8) {
        _inherits(WebGL2KernelValueSingleArray2, _WebGLKernelValueSing8);

        function WebGL2KernelValueSingleArray2() {
          _classCallCheck(this, WebGL2KernelValueSingleArray2);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueSingleArray2).apply(this, arguments));
        }

        return WebGL2KernelValueSingleArray2;
      }(WebGLKernelValueSingleArray2);

      module.exports = {
        WebGL2KernelValueSingleArray2: WebGL2KernelValueSingleArray2
      };
    }, {
      "../../web-gl/kernel-value/single-array2": 61
    }],
    97: [function (require, module, exports) {
      var _require245 = require('../../../utils'),
          utils = _require245.utils;

      var _require246 = require('../../web-gl/kernel-value/single-array2d-i'),
          WebGLKernelValueSingleArray2DI = _require246.WebGLKernelValueSingleArray2DI;

      var WebGL2KernelValueSingleArray2DI =
      /*#__PURE__*/
      function (_WebGLKernelValueSing9) {
        _inherits(WebGL2KernelValueSingleArray2DI, _WebGLKernelValueSing9);

        function WebGL2KernelValueSingleArray2DI() {
          _classCallCheck(this, WebGL2KernelValueSingleArray2DI);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueSingleArray2DI).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueSingleArray2DI, [{
          key: "updateValue",
          value: function updateValue(value) {
            if (value.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch();
              return;
            }

            var gl = this.context;
            utils.flattenTo(value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGL2KernelValueSingleArray2DI;
      }(WebGLKernelValueSingleArray2DI);

      module.exports = {
        WebGL2KernelValueSingleArray2DI: WebGL2KernelValueSingleArray2DI
      };
    }, {
      "../../../utils": 113,
      "../../web-gl/kernel-value/single-array2d-i": 62
    }],
    98: [function (require, module, exports) {
      var _require247 = require('../../web-gl/kernel-value/single-array3'),
          WebGLKernelValueSingleArray3 = _require247.WebGLKernelValueSingleArray3;

      var WebGL2KernelValueSingleArray3 =
      /*#__PURE__*/
      function (_WebGLKernelValueSing10) {
        _inherits(WebGL2KernelValueSingleArray3, _WebGLKernelValueSing10);

        function WebGL2KernelValueSingleArray3() {
          _classCallCheck(this, WebGL2KernelValueSingleArray3);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueSingleArray3).apply(this, arguments));
        }

        return WebGL2KernelValueSingleArray3;
      }(WebGLKernelValueSingleArray3);

      module.exports = {
        WebGL2KernelValueSingleArray3: WebGL2KernelValueSingleArray3
      };
    }, {
      "../../web-gl/kernel-value/single-array3": 63
    }],
    99: [function (require, module, exports) {
      var _require248 = require('../../../utils'),
          utils = _require248.utils;

      var _require249 = require('../../web-gl/kernel-value/single-array3d-i'),
          WebGLKernelValueSingleArray3DI = _require249.WebGLKernelValueSingleArray3DI;

      var WebGL2KernelValueSingleArray3DI =
      /*#__PURE__*/
      function (_WebGLKernelValueSing11) {
        _inherits(WebGL2KernelValueSingleArray3DI, _WebGLKernelValueSing11);

        function WebGL2KernelValueSingleArray3DI() {
          _classCallCheck(this, WebGL2KernelValueSingleArray3DI);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueSingleArray3DI).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueSingleArray3DI, [{
          key: "updateValue",
          value: function updateValue(value) {
            if (value.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch();
              return;
            }

            var gl = this.context;
            utils.flattenTo(value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGL2KernelValueSingleArray3DI;
      }(WebGLKernelValueSingleArray3DI);

      module.exports = {
        WebGL2KernelValueSingleArray3DI: WebGL2KernelValueSingleArray3DI
      };
    }, {
      "../../../utils": 113,
      "../../web-gl/kernel-value/single-array3d-i": 64
    }],
    100: [function (require, module, exports) {
      var _require250 = require('../../web-gl/kernel-value/single-array4'),
          WebGLKernelValueSingleArray4 = _require250.WebGLKernelValueSingleArray4;

      var WebGL2KernelValueSingleArray4 =
      /*#__PURE__*/
      function (_WebGLKernelValueSing12) {
        _inherits(WebGL2KernelValueSingleArray4, _WebGLKernelValueSing12);

        function WebGL2KernelValueSingleArray4() {
          _classCallCheck(this, WebGL2KernelValueSingleArray4);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueSingleArray4).apply(this, arguments));
        }

        return WebGL2KernelValueSingleArray4;
      }(WebGLKernelValueSingleArray4);

      module.exports = {
        WebGL2KernelValueSingleArray4: WebGL2KernelValueSingleArray4
      };
    }, {
      "../../web-gl/kernel-value/single-array4": 65
    }],
    101: [function (require, module, exports) {
      var _require251 = require('../../../utils'),
          utils = _require251.utils;

      var _require252 = require('../../web-gl/kernel-value/single-input'),
          WebGLKernelValueSingleInput = _require252.WebGLKernelValueSingleInput;

      var WebGL2KernelValueSingleInput =
      /*#__PURE__*/
      function (_WebGLKernelValueSing13) {
        _inherits(WebGL2KernelValueSingleInput, _WebGLKernelValueSing13);

        function WebGL2KernelValueSingleInput() {
          _classCallCheck(this, WebGL2KernelValueSingleInput);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueSingleInput).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueSingleInput, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "".concat(variablePrecision, " ivec2 ").concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(input) {
            var gl = this.context;
            utils.flattenTo(input.value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGL2KernelValueSingleInput;
      }(WebGLKernelValueSingleInput);

      module.exports = {
        WebGL2KernelValueSingleInput: WebGL2KernelValueSingleInput
      };
    }, {
      "../../../utils": 113,
      "../../web-gl/kernel-value/single-input": 66
    }],
    102: [function (require, module, exports) {
      var _require253 = require('../../../utils'),
          utils = _require253.utils;

      var _require254 = require('../../web-gl/kernel-value/unsigned-array'),
          WebGLKernelValueUnsignedArray = _require254.WebGLKernelValueUnsignedArray;

      var WebGL2KernelValueUnsignedArray =
      /*#__PURE__*/
      function (_WebGLKernelValueUnsi3) {
        _inherits(WebGL2KernelValueUnsignedArray, _WebGLKernelValueUnsi3);

        function WebGL2KernelValueUnsignedArray() {
          _classCallCheck(this, WebGL2KernelValueUnsignedArray);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueUnsignedArray).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueUnsignedArray, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "".concat(variablePrecision, " ivec2 ").concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }]);

        return WebGL2KernelValueUnsignedArray;
      }(WebGLKernelValueUnsignedArray);

      module.exports = {
        WebGL2KernelValueUnsignedArray: WebGL2KernelValueUnsignedArray
      };
    }, {
      "../../../utils": 113,
      "../../web-gl/kernel-value/unsigned-array": 67
    }],
    103: [function (require, module, exports) {
      var _require255 = require('../../../utils'),
          utils = _require255.utils;

      var _require256 = require('../../web-gl/kernel-value/unsigned-input'),
          WebGLKernelValueUnsignedInput = _require256.WebGLKernelValueUnsignedInput;

      var WebGL2KernelValueUnsignedInput =
      /*#__PURE__*/
      function (_WebGLKernelValueUnsi4) {
        _inherits(WebGL2KernelValueUnsignedInput, _WebGLKernelValueUnsi4);

        function WebGL2KernelValueUnsignedInput() {
          _classCallCheck(this, WebGL2KernelValueUnsignedInput);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueUnsignedInput).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueUnsignedInput, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "".concat(variablePrecision, " ivec2 ").concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }]);

        return WebGL2KernelValueUnsignedInput;
      }(WebGLKernelValueUnsignedInput);

      module.exports = {
        WebGL2KernelValueUnsignedInput: WebGL2KernelValueUnsignedInput
      };
    }, {
      "../../../utils": 113,
      "../../web-gl/kernel-value/unsigned-input": 68
    }],
    104: [function (require, module, exports) {
      var _require257 = require('../web-gl/kernel'),
          WebGLKernel = _require257.WebGLKernel;

      var _require258 = require('./function-node'),
          WebGL2FunctionNode = _require258.WebGL2FunctionNode;

      var _require259 = require('../function-builder'),
          FunctionBuilder = _require259.FunctionBuilder;

      var _require260 = require('../../utils'),
          utils = _require260.utils;

      var _require261 = require('./fragment-shader'),
          fragmentShader = _require261.fragmentShader;

      var _require262 = require('./vertex-shader'),
          vertexShader = _require262.vertexShader;

      var _require263 = require('./kernel-value-maps'),
          _lookupKernelValueType2 = _require263.lookupKernelValueType;

      var isSupported = null;
      var testCanvas = null;
      var testContext = null;
      var testExtensions = null;
      var features = null;

      var WebGL2Kernel =
      /*#__PURE__*/
      function (_WebGLKernel2) {
        _inherits(WebGL2Kernel, _WebGLKernel2);

        function WebGL2Kernel() {
          _classCallCheck(this, WebGL2Kernel);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2Kernel).apply(this, arguments));
        }

        _createClass(WebGL2Kernel, [{
          key: "initContext",
          value: function initContext() {
            var settings = {
              alpha: false,
              depth: false,
              antialias: false
            };
            return this.canvas.getContext('webgl2', settings);
          }
        }, {
          key: "initExtensions",
          value: function initExtensions() {
            this.extensions = {
              EXT_color_buffer_float: this.context.getExtension('EXT_color_buffer_float'),
              OES_texture_float_linear: this.context.getExtension('OES_texture_float_linear')
            };
          }
        }, {
          key: "validateSettings",
          value: function validateSettings(args) {
            if (!this.validate) {
              this.texSize = utils.getKernelTextureSize({
                optimizeFloatMemory: this.optimizeFloatMemory,
                precision: this.precision
              }, this.output);
              return;
            }

            var features = this.constructor.features;

            if (this.precision === 'single' && !features.isFloatRead) {
              throw new Error('Float texture outputs are not supported');
            } else if (!this.graphical && this.precision === null) {
              this.precision = features.isFloatRead ? 'single' : 'unsigned';
            }

            if (this.fixIntegerDivisionAccuracy === null) {
              this.fixIntegerDivisionAccuracy = !features.isIntegerDivisionAccurate;
            } else if (this.fixIntegerDivisionAccuracy && features.isIntegerDivisionAccurate) {
              this.fixIntegerDivisionAccuracy = false;
            }

            this.checkOutput();

            if (!this.output || this.output.length === 0) {
              if (args.length !== 1) {
                throw new Error('Auto output only supported for kernels with only one input');
              }

              var argType = utils.getVariableType(args[0], this.strictIntegers);

              switch (argType) {
                case 'Array':
                  this.output = utils.getDimensions(argType);
                  break;

                case 'NumberTexture':
                case 'MemoryOptimizedNumberTexture':
                case 'ArrayTexture(1)':
                case 'ArrayTexture(2)':
                case 'ArrayTexture(3)':
                case 'ArrayTexture(4)':
                  this.output = args[0].output;
                  break;

                default:
                  throw new Error('Auto output not supported for input type: ' + argType);
              }
            }

            if (this.graphical) {
              if (this.output.length !== 2) {
                throw new Error('Output must have 2 dimensions on graphical mode');
              }

              if (this.precision === 'single') {
                console.warn('Cannot use graphical mode and single precision at the same time');
                this.precision = 'unsigned';
              }

              this.texSize = utils.clone(this.output);
              return;
            } else if (!this.graphical && this.precision === null && features.isTextureFloat) {
              this.precision = 'single';
            }

            this.texSize = utils.getKernelTextureSize({
              optimizeFloatMemory: this.optimizeFloatMemory,
              precision: this.precision
            }, this.output);
            this.checkTextureSize();
          }
        }, {
          key: "translateSource",
          value: function translateSource() {
            var functionBuilder = FunctionBuilder.fromKernel(this, WebGL2FunctionNode, {
              fixIntegerDivisionAccuracy: this.fixIntegerDivisionAccuracy
            });
            this.translatedSource = functionBuilder.getPrototypeString('kernel');
            this.setupReturnTypes(functionBuilder);
          }
        }, {
          key: "drawBuffers",
          value: function drawBuffers() {
            this.context.drawBuffers(this.drawBuffersMap);
          }
        }, {
          key: "getTextureFormat",
          value: function getTextureFormat() {
            var gl = this.context;

            switch (this.getInternalFormat()) {
              case gl.R32F:
                return gl.RED;

              case gl.RG32F:
                return gl.RG;

              case gl.RGBA32F:
                return gl.RGBA;

              case gl.RGBA:
                return gl.RGBA;

              default:
                throw new Error('Unknown internal format');
            }
          }
        }, {
          key: "getInternalFormat",
          value: function getInternalFormat() {
            var gl = this.context,
                optimizeFloatMemory = this.optimizeFloatMemory,
                pipeline = this.pipeline,
                precision = this.precision;

            if (this.precision === 'single') {
              if (this.pipeline) {
                switch (this.returnType) {
                  case 'Number':
                  case 'Float':
                  case 'Integer':
                    if (this.optimizeFloatMemory) {
                      return gl.RGBA32F;
                    } else {
                      return gl.R32F;
                    }

                  case 'Array(2)':
                    return gl.RG32F;

                  case 'Array(3)':
                  case 'Array(4)':
                    return gl.RGBA32F;

                  default:
                    throw new Error('Unhandled return type');
                }
              }

              return gl.RGBA32F;
            }

            return gl.RGBA;
          }
        }, {
          key: "_setupOutputTexture",
          value: function _setupOutputTexture() {
            var texSize = this.texSize;
            var gl = this.context;
            var texture = this.outputTexture = gl.createTexture();
            gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount);
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            var format = this.getInternalFormat();

            if (this.precision === 'single') {
              gl.texStorage2D(gl.TEXTURE_2D, 1, format, texSize[0], texSize[1]);
            } else {
              gl.texImage2D(gl.TEXTURE_2D, 0, format, texSize[0], texSize[1], 0, format, gl.UNSIGNED_BYTE, null);
            }

            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
          }
        }, {
          key: "_setupSubOutputTextures",
          value: function _setupSubOutputTextures() {
            var texSize = this.texSize;
            var gl = this.context;
            this.drawBuffersMap = [gl.COLOR_ATTACHMENT0];
            this.subKernelOutputTextures = [];

            for (var i = 0; i < this.subKernels.length; i++) {
              var texture = this.createTexture();
              this.subKernelOutputTextures.push(texture);
              this.drawBuffersMap.push(gl.COLOR_ATTACHMENT0 + i + 1);
              gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount + i);
              gl.bindTexture(gl.TEXTURE_2D, texture);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);

              if (this.precision === 'single') {
                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);
              } else {
                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
              }

              gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, texture, 0);
            }
          }
        }, {
          key: "_getHeaderString",
          value: function _getHeaderString() {
            return '';
          }
        }, {
          key: "_getTextureCoordinate",
          value: function _getTextureCoordinate() {
            var subKernels = this.subKernels;
            var variablePrecision = this.getVariablePrecisionString(this.texSize, this.tactic);

            if (subKernels === null || subKernels.length < 1) {
              return "in ".concat(variablePrecision, " vec2 vTexCoord;\n");
            } else {
              return "out ".concat(variablePrecision, " vec2 vTexCoord;\n");
            }
          }
        }, {
          key: "_getMainArgumentsString",
          value: function _getMainArgumentsString(args) {
            var result = [];
            var argumentNames = this.argumentNames;

            for (var i = 0; i < argumentNames.length; i++) {
              result.push(this.kernelArguments[i].getSource(args[i]));
            }

            return result.join('');
          }
        }, {
          key: "getKernelString",
          value: function getKernelString() {
            var result = [];
            var subKernels = this.subKernels;

            if (subKernels !== null) {
              result.push(this.getKernelResultDeclaration(), 'layout(location = 0) out vec4 data0');

              for (var i = 0; i < subKernels.length; i++) {
                var subKernel = subKernels[i];
                result.push(subKernel.returnType === 'Integer' ? "int subKernelResult_".concat(subKernel.name, " = 0") : "float subKernelResult_".concat(subKernel.name, " = 0.0"), "layout(location = ".concat(i + 1, ") out vec4 data").concat(i + 1));
              }
            } else {
              result.push('out vec4 data0', this.getKernelResultDeclaration());
            }

            return utils.linesToString(result) + this.translatedSource;
          }
        }, {
          key: "getMainResultGraphical",
          value: function getMainResultGraphical() {
            return utils.linesToString(['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  data0 = actualColor']);
          }
        }, {
          key: "getMainResultPackedPixels",
          value: function getMainResultPackedPixels() {
            switch (this.returnType) {
              case 'LiteralInteger':
              case 'Number':
              case 'Integer':
              case 'Float':
                return this.getMainResultKernelPackedPixels() + this.getMainResultSubKernelPackedPixels();

              default:
                throw new Error("packed output only usable with Numbers, \"".concat(this.returnType, "\" specified"));
            }
          }
        }, {
          key: "getMainResultKernelPackedPixels",
          value: function getMainResultKernelPackedPixels() {
            return utils.linesToString(['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', "  data0 = ".concat(this.useLegacyEncoder ? 'legacyEncode32' : 'encode32', "(kernelResult)")]);
          }
        }, {
          key: "getMainResultSubKernelPackedPixels",
          value: function getMainResultSubKernelPackedPixels() {
            var result = [];
            if (!this.subKernels) return '';

            for (var i = 0; i < this.subKernels.length; i++) {
              var subKernel = this.subKernels[i];

              if (subKernel.returnType === 'Integer') {
                result.push("  data".concat(i + 1, " = ").concat(this.useLegacyEncoder ? 'legacyEncode32' : 'encode32', "(float(subKernelResult_").concat(this.subKernels[i].name, "))"));
              } else {
                result.push("  data".concat(i + 1, " = ").concat(this.useLegacyEncoder ? 'legacyEncode32' : 'encode32', "(subKernelResult_").concat(this.subKernels[i].name, ")"));
              }
            }

            return utils.linesToString(result);
          }
        }, {
          key: "getMainResultKernelMemoryOptimizedFloats",
          value: function getMainResultKernelMemoryOptimizedFloats(result, channel) {
            result.push('  threadId = indexTo3D(index, uOutputDim)', '  kernel()', "  data0.".concat(channel, " = kernelResult"));
          }
        }, {
          key: "getMainResultSubKernelMemoryOptimizedFloats",
          value: function getMainResultSubKernelMemoryOptimizedFloats(result, channel) {
            if (!this.subKernels) return result;

            for (var i = 0; i < this.subKernels.length; i++) {
              var subKernel = this.subKernels[i];

              if (subKernel.returnType === 'Integer') {
                result.push("  data".concat(i + 1, ".").concat(channel, " = float(subKernelResult_").concat(subKernel.name, ")"));
              } else {
                result.push("  data".concat(i + 1, ".").concat(channel, " = subKernelResult_").concat(subKernel.name));
              }
            }
          }
        }, {
          key: "getMainResultKernelNumberTexture",
          value: function getMainResultKernelNumberTexture() {
            return ['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  data0[0] = kernelResult'];
          }
        }, {
          key: "getMainResultSubKernelNumberTexture",
          value: function getMainResultSubKernelNumberTexture() {
            var result = [];
            if (!this.subKernels) return result;

            for (var i = 0; i < this.subKernels.length; ++i) {
              var subKernel = this.subKernels[i];

              if (subKernel.returnType === 'Integer') {
                result.push("  data".concat(i + 1, "[0] = float(subKernelResult_").concat(subKernel.name, ")"));
              } else {
                result.push("  data".concat(i + 1, "[0] = subKernelResult_").concat(subKernel.name));
              }
            }

            return result;
          }
        }, {
          key: "getMainResultKernelArray2Texture",
          value: function getMainResultKernelArray2Texture() {
            return ['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  data0[0] = kernelResult[0]', '  data0[1] = kernelResult[1]'];
          }
        }, {
          key: "getMainResultSubKernelArray2Texture",
          value: function getMainResultSubKernelArray2Texture() {
            var result = [];
            if (!this.subKernels) return result;

            for (var i = 0; i < this.subKernels.length; ++i) {
              var subKernel = this.subKernels[i];
              result.push("  data".concat(i + 1, "[0] = subKernelResult_").concat(subKernel.name, "[0]"), "  data".concat(i + 1, "[1] = subKernelResult_").concat(subKernel.name, "[1]"));
            }

            return result;
          }
        }, {
          key: "getMainResultKernelArray3Texture",
          value: function getMainResultKernelArray3Texture() {
            return ['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  data0[0] = kernelResult[0]', '  data0[1] = kernelResult[1]', '  data0[2] = kernelResult[2]'];
          }
        }, {
          key: "getMainResultSubKernelArray3Texture",
          value: function getMainResultSubKernelArray3Texture() {
            var result = [];
            if (!this.subKernels) return result;

            for (var i = 0; i < this.subKernels.length; ++i) {
              var subKernel = this.subKernels[i];
              result.push("  data".concat(i + 1, "[0] = subKernelResult_").concat(subKernel.name, "[0]"), "  data".concat(i + 1, "[1] = subKernelResult_").concat(subKernel.name, "[1]"), "  data".concat(i + 1, "[2] = subKernelResult_").concat(subKernel.name, "[2]"));
            }

            return result;
          }
        }, {
          key: "getMainResultKernelArray4Texture",
          value: function getMainResultKernelArray4Texture() {
            return ['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  data0 = kernelResult'];
          }
        }, {
          key: "getMainResultSubKernelArray4Texture",
          value: function getMainResultSubKernelArray4Texture() {
            var result = [];
            if (!this.subKernels) return result;

            for (var i = 0; i < this.subKernels.length; ++i) {
              result.push("  data".concat(i + 1, " = subKernelResult_").concat(this.subKernels[i].name));
            }

            return result;
          }
        }, {
          key: "destroyExtensions",
          value: function destroyExtensions() {
            this.extensions.EXT_color_buffer_float = null;
            this.extensions.OES_texture_float_linear = null;
          }
        }, {
          key: "toJSON",
          value: function toJSON() {
            var json = _get(_getPrototypeOf(WebGL2Kernel.prototype), "toJSON", this).call(this);

            json.functionNodes = FunctionBuilder.fromKernel(this, WebGL2FunctionNode).toJSON();
            json.settings.threadDim = this.threadDim;
            return json;
          }
        }], [{
          key: "setupFeatureChecks",
          value: function setupFeatureChecks() {
            if (typeof document !== 'undefined') {
              testCanvas = document.createElement('canvas');
            } else if (typeof OffscreenCanvas !== 'undefined') {
              testCanvas = new OffscreenCanvas(0, 0);
            }

            if (!testCanvas) return;
            testContext = testCanvas.getContext('webgl2');
            if (!testContext || !testContext.getExtension) return;
            testExtensions = {
              EXT_color_buffer_float: testContext.getExtension('EXT_color_buffer_float'),
              OES_texture_float_linear: testContext.getExtension('OES_texture_float_linear')
            };
            features = this.getFeatures();
          }
        }, {
          key: "isContextMatch",
          value: function isContextMatch(context) {
            if (typeof WebGL2RenderingContext !== 'undefined') {
              return context instanceof WebGL2RenderingContext;
            }

            return false;
          }
        }, {
          key: "getFeatures",
          value: function getFeatures() {
            var gl = this.testContext;
            return Object.freeze({
              isFloatRead: this.getIsFloatRead(),
              isIntegerDivisionAccurate: this.getIsIntegerDivisionAccurate(),
              kernelMap: true,
              isTextureFloat: true,
              isDrawBuffers: true,
              channelCount: this.getChannelCount(),
              maxTextureSize: this.getMaxTextureSize(),
              lowIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT),
              lowFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT),
              mediumIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT),
              mediumFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT),
              highIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT),
              highFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT)
            });
          }
        }, {
          key: "getIsTextureFloat",
          value: function getIsTextureFloat() {
            return true;
          }
        }, {
          key: "getIsIntegerDivisionAccurate",
          value: function getIsIntegerDivisionAccurate() {
            return _get(_getPrototypeOf(WebGL2Kernel), "getIsIntegerDivisionAccurate", this).call(this);
          }
        }, {
          key: "getChannelCount",
          value: function getChannelCount() {
            return testContext.getParameter(testContext.MAX_DRAW_BUFFERS);
          }
        }, {
          key: "getMaxTextureSize",
          value: function getMaxTextureSize() {
            return testContext.getParameter(testContext.MAX_TEXTURE_SIZE);
          }
        }, {
          key: "lookupKernelValueType",
          value: function lookupKernelValueType(type, dynamic, precision, value) {
            return _lookupKernelValueType2(type, dynamic, precision, value);
          }
        }, {
          key: "isSupported",
          get: function get() {
            if (isSupported !== null) {
              return isSupported;
            }

            this.setupFeatureChecks();
            isSupported = this.isContextMatch(testContext);
            return isSupported;
          }
        }, {
          key: "testCanvas",
          get: function get() {
            return testCanvas;
          }
        }, {
          key: "testContext",
          get: function get() {
            return testContext;
          }
        }, {
          key: "features",
          get: function get() {
            return features;
          }
        }, {
          key: "fragmentShader",
          get: function get() {
            return fragmentShader;
          }
        }, {
          key: "vertexShader",
          get: function get() {
            return vertexShader;
          }
        }]);

        return WebGL2Kernel;
      }(WebGLKernel);

      module.exports = {
        WebGL2Kernel: WebGL2Kernel
      };
    }, {
      "../../utils": 113,
      "../function-builder": 9,
      "../web-gl/kernel": 69,
      "./fragment-shader": 71,
      "./function-node": 72,
      "./kernel-value-maps": 73,
      "./vertex-shader": 105
    }],
    105: [function (require, module, exports) {
      var vertexShader = "#version 300 es\n__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n\nin vec2 aPos;\nin vec2 aTexCoord;\n\nout vec2 vTexCoord;\nuniform vec2 ratio;\n\nvoid main(void) {\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\n  vTexCoord = aTexCoord;\n}";
      module.exports = {
        vertexShader: vertexShader
      };
    }, {}],
    106: [function (require, module, exports) {
      var lib = require('./index');

      var GPU = lib.GPU;

      for (var p in lib) {
        if (!lib.hasOwnProperty(p)) continue;
        if (p === 'GPU') continue;
        GPU[p] = lib[p];
      }

      module.exports = GPU;
    }, {
      "./index": 108
    }],
    107: [function (require, module, exports) {
      var _require264 = require('gpu-mock.js'),
          gpuMock = _require264.gpuMock;

      var _require265 = require('./utils'),
          utils = _require265.utils;

      var _require266 = require('./backend/cpu/kernel'),
          CPUKernel = _require266.CPUKernel;

      var _require267 = require('./backend/headless-gl/kernel'),
          HeadlessGLKernel = _require267.HeadlessGLKernel;

      var _require268 = require('./backend/web-gl2/kernel'),
          WebGL2Kernel = _require268.WebGL2Kernel;

      var _require269 = require('./backend/web-gl/kernel'),
          WebGLKernel = _require269.WebGLKernel;

      var _require270 = require('./kernel-run-shortcut'),
          kernelRunShortcut = _require270.kernelRunShortcut;

      var kernelOrder = [HeadlessGLKernel, WebGL2Kernel, WebGLKernel];
      var kernelTypes = ['gpu', 'cpu'];
      var internalKernels = {
        'headlessgl': HeadlessGLKernel,
        'webgl2': WebGL2Kernel,
        'webgl': WebGLKernel
      };
      var validate = true;

      var GPU =
      /*#__PURE__*/
      function () {
        _createClass(GPU, null, [{
          key: "disableValidation",
          value: function disableValidation() {
            validate = false;
          }
        }, {
          key: "enableValidation",
          value: function enableValidation() {
            validate = true;
          }
        }, {
          key: "isGPUSupported",
          get: function get() {
            return kernelOrder.some(function (Kernel) {
              return Kernel.isSupported;
            });
          }
        }, {
          key: "isKernelMapSupported",
          get: function get() {
            return kernelOrder.some(function (Kernel) {
              return Kernel.isSupported && Kernel.features.kernelMap;
            });
          }
        }, {
          key: "isOffscreenCanvasSupported",
          get: function get() {
            return typeof Worker !== 'undefined' && typeof OffscreenCanvas !== 'undefined' || typeof importScripts !== 'undefined';
          }
        }, {
          key: "isWebGLSupported",
          get: function get() {
            return WebGLKernel.isSupported;
          }
        }, {
          key: "isWebGL2Supported",
          get: function get() {
            return WebGL2Kernel.isSupported;
          }
        }, {
          key: "isHeadlessGLSupported",
          get: function get() {
            return HeadlessGLKernel.isSupported;
          }
        }, {
          key: "isCanvasSupported",
          get: function get() {
            return typeof HTMLCanvasElement !== 'undefined';
          }
        }, {
          key: "isGPUHTMLImageArraySupported",
          get: function get() {
            return WebGL2Kernel.isSupported;
          }
        }, {
          key: "isSinglePrecisionSupported",
          get: function get() {
            return kernelOrder.some(function (Kernel) {
              return Kernel.isSupported && Kernel.features.isFloatRead && Kernel.features.isTextureFloat;
            });
          }
        }]);

        function GPU(settings) {
          _classCallCheck(this, GPU);

          settings = settings || {};
          this.canvas = settings.canvas || null;
          this.context = settings.context || null;
          this.mode = settings.mode;
          this.Kernel = null;
          this.kernels = [];
          this.functions = [];
          this.nativeFunctions = [];
          this.injectedNative = null;
          this.onIstanbulCoverageVariable = settings.onIstanbulCoverageVariable || null;
          this.removeIstanbulCoverage = settings.hasOwnProperty('removeIstanbulCoverage') ? settings.removeIstanbulCoverage : null;
          if (this.mode === 'dev') return;
          this.chooseKernel();

          if (settings.functions) {
            for (var i = 0; i < settings.functions.length; i++) {
              this.addFunction(settings.functions[i]);
            }
          }

          if (settings.nativeFunctions) {
            for (var p in settings.nativeFunctions) {
              if (!settings.nativeFunctions.hasOwnProperty(p)) continue;
              this.addNativeFunction(p, settings.nativeFunctions[p]);
            }
          }
        }

        _createClass(GPU, [{
          key: "chooseKernel",
          value: function chooseKernel() {
            if (this.Kernel) return;
            var Kernel = null;

            if (this.context) {
              for (var i = 0; i < kernelOrder.length; i++) {
                var ExternalKernel = kernelOrder[i];

                if (ExternalKernel.isContextMatch(this.context)) {
                  if (!ExternalKernel.isSupported) {
                    throw new Error("Kernel type ".concat(ExternalKernel.name, " not supported"));
                  }

                  Kernel = ExternalKernel;
                  break;
                }
              }

              if (Kernel === null) {
                throw new Error('unknown Context');
              }
            } else if (this.mode) {
              if (this.mode in internalKernels) {
                if (!validate || internalKernels[this.mode].isSupported) {
                  Kernel = internalKernels[this.mode];
                }
              } else if (this.mode === 'gpu') {
                for (var _i27 = 0; _i27 < kernelOrder.length; _i27++) {
                  if (kernelOrder[_i27].isSupported) {
                    Kernel = kernelOrder[_i27];
                    break;
                  }
                }
              } else if (this.mode === 'cpu') {
                Kernel = CPUKernel;
              }

              if (!Kernel) {
                throw new Error("A requested mode of \"".concat(this.mode, "\" and is not supported"));
              }
            } else {
              for (var _i28 = 0; _i28 < kernelOrder.length; _i28++) {
                if (kernelOrder[_i28].isSupported) {
                  Kernel = kernelOrder[_i28];
                  break;
                }
              }

              if (!Kernel) {
                Kernel = CPUKernel;
              }
            }

            if (!this.mode) {
              this.mode = Kernel.mode;
            }

            this.Kernel = Kernel;
          }
        }, {
          key: "createKernel",
          value: function createKernel(source, settings) {
            if (typeof source === 'undefined') {
              throw new Error('Missing source parameter');
            }

            if (_typeof(source) !== 'object' && !utils.isFunction(source) && typeof source !== 'string') {
              throw new Error('source parameter not a function');
            }

            if (this.mode === 'dev') {
              var devKernel = gpuMock(source, upgradeDeprecatedCreateKernelSettings(settings));
              this.kernels.push(devKernel);
              return devKernel;
            }

            source = typeof source === 'function' ? source.toString() : source;
            var switchableKernels = {};
            var settingsCopy = upgradeDeprecatedCreateKernelSettings(settings) || {};

            if (settings && _typeof(settings.argumentTypes) === 'object') {
              settingsCopy.argumentTypes = Object.keys(settings.argumentTypes).map(function (argumentName) {
                return settings.argumentTypes[argumentName];
              });
            }

            function onRequestFallback(args) {
              console.warn('Falling back to CPU');
              var fallbackKernel = new CPUKernel(source, {
                argumentTypes: kernelRun.argumentTypes,
                constantTypes: kernelRun.constantTypes,
                graphical: kernelRun.graphical,
                loopMaxIterations: kernelRun.loopMaxIterations,
                constants: kernelRun.constants,
                dynamicOutput: kernelRun.dynamicOutput,
                dynamicArgument: kernelRun.dynamicArguments,
                output: kernelRun.output,
                precision: kernelRun.precision,
                pipeline: kernelRun.pipeline,
                immutable: kernelRun.immutable,
                optimizeFloatMemory: kernelRun.optimizeFloatMemory,
                fixIntegerDivisionAccuracy: kernelRun.fixIntegerDivisionAccuracy,
                functions: kernelRun.functions,
                nativeFunctions: kernelRun.nativeFunctions,
                injectedNative: kernelRun.injectedNative,
                subKernels: kernelRun.subKernels,
                strictIntegers: kernelRun.strictIntegers,
                debug: kernelRun.debug,
                warnVarUsage: kernelRun.warnVarUsage
              });
              fallbackKernel.build.apply(fallbackKernel, args);
              var result = fallbackKernel.run.apply(fallbackKernel, args);
              kernelRun.replaceKernel(fallbackKernel);
              return result;
            }

            function onRequestSwitchKernel(reasons, args, kernel) {
              console.warn('Switching kernels');
              var newOutput = null;

              if (kernel.dynamicOutput) {
                for (var i = reasons.length - 1; i >= 0; i--) {
                  var reason = reasons[i];

                  if (reason.type === 'outputPrecisionMismatch') {
                    newOutput = reason.needed;
                  }
                }
              }

              var argumentTypes = new Array(args.length);

              for (var _i29 = 0; _i29 < args.length; _i29++) {
                var arg = args[_i29];
                var type = kernel.argumentTypes[_i29];

                if (arg.type) {
                  argumentTypes[_i29] = arg.type;
                } else {
                  switch (type) {
                    case 'Number':
                    case 'Integer':
                    case 'Float':
                    case 'ArrayTexture(1)':
                      argumentTypes[_i29] = utils.getVariableType(arg);
                      break;

                    default:
                      argumentTypes[_i29] = type;
                  }
                }
              }

              var signature = kernel.getVariablePrecisionString() + (argumentTypes.length > 0 ? ':' + argumentTypes.join(',') : '');
              var existingKernel = switchableKernels[signature];

              if (existingKernel) {
                return existingKernel;
              }

              var newKernel = switchableKernels[signature] = new kernel.constructor(source, {
                argumentTypes: argumentTypes,
                constantTypes: kernel.constantTypes,
                graphical: kernel.graphical,
                loopMaxIterations: kernel.loopMaxIterations,
                constants: kernel.constants,
                dynamicOutput: kernel.dynamicOutput,
                dynamicArgument: kernel.dynamicArguments,
                context: kernel.context,
                canvas: kernel.canvas,
                output: newOutput || kernel.output,
                precision: kernel.precision,
                pipeline: kernel.pipeline,
                immutable: kernel.immutable,
                optimizeFloatMemory: kernel.optimizeFloatMemory,
                fixIntegerDivisionAccuracy: kernel.fixIntegerDivisionAccuracy,
                functions: kernel.functions,
                nativeFunctions: kernel.nativeFunctions,
                injectedNative: kernel.injectedNative,
                subKernels: kernel.subKernels,
                strictIntegers: kernel.strictIntegers,
                debug: kernel.debug,
                gpu: kernel.gpu,
                validate: validate,
                warnVarUsage: kernel.warnVarUsage,
                returnType: kernel.returnType,
                onIstanbulCoverageVariable: kernel.onIstanbulCoverageVariable,
                removeIstanbulCoverage: kernel.removeIstanbulCoverage,
                tactic: kernel.tactic,
                onRequestFallback: onRequestFallback,
                onRequestSwitchKernel: onRequestSwitchKernel
              });
              newKernel.build.apply(newKernel, args);
              kernelRun.replaceKernel(newKernel);
              return newKernel;
            }

            var mergedSettings = Object.assign({
              context: this.context,
              canvas: this.canvas,
              functions: this.functions,
              nativeFunctions: this.nativeFunctions,
              injectedNative: this.injectedNative,
              onIstanbulCoverageVariable: this.onIstanbulCoverageVariable,
              removeIstanbulCoverage: this.removeIstanbulCoverage,
              gpu: this,
              validate: validate,
              onRequestFallback: onRequestFallback,
              onRequestSwitchKernel: onRequestSwitchKernel
            }, settingsCopy);
            var kernelRun = kernelRunShortcut(new this.Kernel(source, mergedSettings));

            if (!this.canvas) {
              this.canvas = kernelRun.canvas;
            }

            if (!this.context) {
              this.context = kernelRun.context;
            }

            this.kernels.push(kernelRun);
            return kernelRun;
          }
        }, {
          key: "createKernelMap",
          value: function createKernelMap() {
            var fn;
            var settings;

            if (typeof arguments[arguments.length - 2] === 'function') {
              fn = arguments[arguments.length - 2];
              settings = arguments[arguments.length - 1];
            } else {
              fn = arguments[arguments.length - 1];
            }

            if (this.mode !== 'dev') {
              if (!this.Kernel.isSupported || !this.Kernel.features.kernelMap) {
                if (this.mode && kernelTypes.indexOf(this.mode) < 0) {
                  throw new Error("kernelMap not supported on ".concat(this.Kernel.name));
                }
              }
            }

            var settingsCopy = upgradeDeprecatedCreateKernelSettings(settings);

            if (settings && _typeof(settings.argumentTypes) === 'object') {
              settingsCopy.argumentTypes = Object.keys(settings.argumentTypes).map(function (argumentName) {
                return settings.argumentTypes[argumentName];
              });
            }

            if (Array.isArray(arguments[0])) {
              settingsCopy.subKernels = [];
              var functions = arguments[0];

              for (var i = 0; i < functions.length; i++) {
                var source = functions[i].toString();

                var _name10 = utils.getFunctionNameFromString(source);

                settingsCopy.subKernels.push({
                  name: _name10,
                  source: source,
                  property: i
                });
              }
            } else {
              settingsCopy.subKernels = [];
              var _functions = arguments[0];

              for (var p in _functions) {
                if (!_functions.hasOwnProperty(p)) continue;

                var _source = _functions[p].toString();

                var _name11 = utils.getFunctionNameFromString(_source);

                settingsCopy.subKernels.push({
                  name: _name11 || p,
                  source: _source,
                  property: p
                });
              }
            }

            return this.createKernel(fn, settingsCopy);
          }
        }, {
          key: "combineKernels",
          value: function combineKernels() {
            var firstKernel = arguments[0];
            var combinedKernel = arguments[arguments.length - 1];
            if (firstKernel.kernel.constructor.mode === 'cpu') return combinedKernel;
            var canvas = arguments[0].canvas;
            var context = arguments[0].context;
            var max = arguments.length - 1;

            for (var i = 0; i < max; i++) {
              arguments[i].setCanvas(canvas).setContext(context).setPipeline(true);
            }

            return function () {
              var texture = combinedKernel.apply(this, arguments);

              if (texture.toArray) {
                return texture.toArray();
              }

              return texture;
            };
          }
        }, {
          key: "addFunction",
          value: function addFunction(source, settings) {
            this.functions.push(utils.functionToIFunction(source, settings));
            return this;
          }
        }, {
          key: "addNativeFunction",
          value: function addNativeFunction(name, source, settings) {
            if (this.kernels.length > 0) {
              throw new Error('Cannot call "addNativeFunction" after "createKernels" has been called.');
            }

            settings = settings || {};

            var _ref2 = this.Kernel.nativeFunctionArguments(source) || {},
                argumentTypes = _ref2.argumentTypes,
                argumentNames = _ref2.argumentNames;

            this.nativeFunctions.push({
              name: name,
              source: source,
              settings: settings,
              argumentTypes: argumentTypes,
              argumentNames: argumentNames,
              returnType: settings.returnType || this.Kernel.nativeFunctionReturnType(source)
            });
            return this;
          }
        }, {
          key: "injectNative",
          value: function injectNative(source) {
            this.injectedNative = source;
            return this;
          }
        }, {
          key: "destroy",
          value: function destroy() {
            var _this47 = this;

            if (!this.kernels) return;
            setTimeout(function () {
              for (var i = 0; i < _this47.kernels.length; i++) {
                _this47.kernels[i].destroy(true);
              }

              var firstKernel = _this47.kernels[0];

              if (firstKernel) {
                if (firstKernel.kernel) {
                  firstKernel = firstKernel.kernel;
                }

                if (firstKernel.constructor.destroyContext) {
                  firstKernel.constructor.destroyContext(_this47.context);
                }
              }
            }, 0);
          }
        }]);

        return GPU;
      }();

      function upgradeDeprecatedCreateKernelSettings(settings) {
        if (!settings) {
          return {};
        }

        var upgradedSettings = Object.assign({}, settings);

        if (settings.hasOwnProperty('floatOutput')) {
          utils.warnDeprecated('setting', 'floatOutput', 'precision');
          upgradedSettings.precision = settings.floatOutput ? 'single' : 'unsigned';
        }

        if (settings.hasOwnProperty('outputToTexture')) {
          utils.warnDeprecated('setting', 'outputToTexture', 'pipeline');
          upgradedSettings.pipeline = Boolean(settings.outputToTexture);
        }

        if (settings.hasOwnProperty('outputImmutable')) {
          utils.warnDeprecated('setting', 'outputImmutable', 'immutable');
          upgradedSettings.immutable = Boolean(settings.outputImmutable);
        }

        if (settings.hasOwnProperty('floatTextures')) {
          utils.warnDeprecated('setting', 'floatTextures', 'optimizeFloatMemory');
          upgradedSettings.optimizeFloatMemory = Boolean(settings.floatTextures);
        }

        return upgradedSettings;
      }

      module.exports = {
        GPU: GPU,
        kernelOrder: kernelOrder,
        kernelTypes: kernelTypes
      };
    }, {
      "./backend/cpu/kernel": 8,
      "./backend/headless-gl/kernel": 34,
      "./backend/web-gl/kernel": 69,
      "./backend/web-gl2/kernel": 104,
      "./kernel-run-shortcut": 110,
      "./utils": 113,
      "gpu-mock.js": 4
    }],
    108: [function (require, module, exports) {
      var _require271 = require('./gpu'),
          GPU = _require271.GPU;

      var _require272 = require('./alias'),
          alias = _require272.alias;

      var _require273 = require('./utils'),
          utils = _require273.utils;

      var _require274 = require('./input'),
          Input = _require274.Input,
          input = _require274.input;

      var _require275 = require('./texture'),
          Texture = _require275.Texture;

      var _require276 = require('./backend/function-builder'),
          FunctionBuilder = _require276.FunctionBuilder;

      var _require277 = require('./backend/function-node'),
          FunctionNode = _require277.FunctionNode;

      var _require278 = require('./backend/cpu/function-node'),
          CPUFunctionNode = _require278.CPUFunctionNode;

      var _require279 = require('./backend/cpu/kernel'),
          CPUKernel = _require279.CPUKernel;

      var _require280 = require('./backend/headless-gl/kernel'),
          HeadlessGLKernel = _require280.HeadlessGLKernel;

      var _require281 = require('./backend/web-gl/function-node'),
          WebGLFunctionNode = _require281.WebGLFunctionNode;

      var _require282 = require('./backend/web-gl/kernel'),
          WebGLKernel = _require282.WebGLKernel;

      var _require283 = require('./backend/web-gl/kernel-value-maps'),
          webGLKernelValueMaps = _require283.kernelValueMaps;

      var _require284 = require('./backend/web-gl2/function-node'),
          WebGL2FunctionNode = _require284.WebGL2FunctionNode;

      var _require285 = require('./backend/web-gl2/kernel'),
          WebGL2Kernel = _require285.WebGL2Kernel;

      var _require286 = require('./backend/web-gl2/kernel-value-maps'),
          webGL2KernelValueMaps = _require286.kernelValueMaps;

      var _require287 = require('./backend/gl/kernel'),
          GLKernel = _require287.GLKernel;

      var _require288 = require('./backend/kernel'),
          Kernel = _require288.Kernel;

      var _require289 = require('./backend/function-tracer'),
          FunctionTracer = _require289.FunctionTracer;

      var mathRandom = require('./plugins/math-random-uniformly-distributed');

      module.exports = {
        alias: alias,
        CPUFunctionNode: CPUFunctionNode,
        CPUKernel: CPUKernel,
        GPU: GPU,
        FunctionBuilder: FunctionBuilder,
        FunctionNode: FunctionNode,
        HeadlessGLKernel: HeadlessGLKernel,
        Input: Input,
        input: input,
        Texture: Texture,
        utils: utils,
        WebGL2FunctionNode: WebGL2FunctionNode,
        WebGL2Kernel: WebGL2Kernel,
        webGL2KernelValueMaps: webGL2KernelValueMaps,
        WebGLFunctionNode: WebGLFunctionNode,
        WebGLKernel: WebGLKernel,
        webGLKernelValueMaps: webGLKernelValueMaps,
        GLKernel: GLKernel,
        Kernel: Kernel,
        FunctionTracer: FunctionTracer,
        plugins: {
          mathRandom: mathRandom
        }
      };
    }, {
      "./alias": 5,
      "./backend/cpu/function-node": 6,
      "./backend/cpu/kernel": 8,
      "./backend/function-builder": 9,
      "./backend/function-node": 10,
      "./backend/function-tracer": 11,
      "./backend/gl/kernel": 13,
      "./backend/headless-gl/kernel": 34,
      "./backend/kernel": 36,
      "./backend/web-gl/function-node": 38,
      "./backend/web-gl/kernel": 69,
      "./backend/web-gl/kernel-value-maps": 39,
      "./backend/web-gl2/function-node": 72,
      "./backend/web-gl2/kernel": 104,
      "./backend/web-gl2/kernel-value-maps": 73,
      "./gpu": 107,
      "./input": 109,
      "./plugins/math-random-uniformly-distributed": 111,
      "./texture": 112,
      "./utils": 113
    }],
    109: [function (require, module, exports) {
      var Input =
      /*#__PURE__*/
      function () {
        function Input(value, size) {
          _classCallCheck(this, Input);

          this.value = value;

          if (Array.isArray(size)) {
            this.size = size;
          } else {
            this.size = new Int32Array(3);

            if (size.z) {
              this.size = new Int32Array([size.x, size.y, size.z]);
            } else if (size.y) {
              this.size = new Int32Array([size.x, size.y]);
            } else {
              this.size = new Int32Array([size.x]);
            }
          }

          var _this$size = _slicedToArray(this.size, 3),
              w = _this$size[0],
              h = _this$size[1],
              d = _this$size[2];

          if (d) {
            if (this.value.length !== w * h * d) {
              throw new Error("Input size ".concat(this.value.length, " does not match ").concat(w, " * ").concat(h, " * ").concat(d, " = ").concat(h * w * d));
            }
          } else if (h) {
            if (this.value.length !== w * h) {
              throw new Error("Input size ".concat(this.value.length, " does not match ").concat(w, " * ").concat(h, " = ").concat(h * w));
            }
          } else {
            if (this.value.length !== w) {
              throw new Error("Input size ".concat(this.value.length, " does not match ").concat(w));
            }
          }
        }

        _createClass(Input, [{
          key: "toArray",
          value: function toArray() {
            var _require290 = require('./utils'),
                utils = _require290.utils;

            var _this$size2 = _slicedToArray(this.size, 3),
                w = _this$size2[0],
                h = _this$size2[1],
                d = _this$size2[2];

            if (d) {
              return utils.erectMemoryOptimized3DFloat(this.value.subarray ? this.value : new Float32Array(this.value), w, h, d);
            } else if (h) {
              return utils.erectMemoryOptimized2DFloat(this.value.subarray ? this.value : new Float32Array(this.value), w, h);
            } else {
              return this.value;
            }
          }
        }]);

        return Input;
      }();

      function input(value, size) {
        return new Input(value, size);
      }

      module.exports = {
        Input: Input,
        input: input
      };
    }, {
      "./utils": 113
    }],
    110: [function (require, module, exports) {
      var _require291 = require('./utils'),
          utils = _require291.utils;

      function kernelRunShortcut(kernel) {
        var _run = function run() {
          kernel.build.apply(kernel, arguments);

          _run = function run() {
            var result = kernel.run.apply(kernel, arguments);

            if (kernel.switchingKernels) {
              var reasons = kernel.resetSwitchingKernels();
              var newKernel = kernel.onRequestSwitchKernel(reasons, arguments, kernel);
              result = newKernel.run.apply(newKernel, arguments);
            }

            if (kernel.renderKernels) {
              return kernel.renderKernels();
            } else if (kernel.renderOutput) {
              return kernel.renderOutput();
            } else {
              return result;
            }
          };

          return _run.apply(kernel, arguments);
        };

        var shortcut = function shortcut() {
          return _run.apply(kernel, arguments);
        };

        shortcut.exec = function () {
          var _arguments2 = arguments,
              _this48 = this;

          return new Promise(function (accept, reject) {
            try {
              accept(_run.apply(_this48, _arguments2));
            } catch (e) {
              reject(e);
            }
          });
        };

        shortcut.replaceKernel = function (replacementKernel) {
          kernel = replacementKernel;
          bindKernelToShortcut(kernel, shortcut);
          shortcut.kernel = kernel;
        };

        bindKernelToShortcut(kernel, shortcut);
        shortcut.kernel = kernel;
        return shortcut;
      }

      function bindKernelToShortcut(kernel, shortcut) {
        var properties = utils.allPropertiesOf(kernel);

        var _loop2 = function _loop2(i) {
          var property = properties[i];
          if (property[0] === '_' && property[1] === '_') return "continue";

          if (typeof kernel[property] === 'function') {
            if (property.substring(0, 3) === 'add' || property.substring(0, 3) === 'set') {
              shortcut[property] = function () {
                kernel[property].apply(kernel, arguments);
                return shortcut;
              };
            } else {
              if (property === 'toString') {
                shortcut.toString = function () {
                  return kernel.toString.apply(kernel, arguments);
                };
              } else {
                shortcut[property] = kernel[property].bind(kernel);
              }
            }
          } else {
            shortcut.__defineGetter__(property, function () {
              return kernel[property];
            });

            shortcut.__defineSetter__(property, function (value) {
              kernel[property] = value;
            });
          }
        };

        for (var i = 0; i < properties.length; i++) {
          var _ret = _loop2(i);

          if (_ret === "continue") continue;
        }
      }

      module.exports = {
        kernelRunShortcut: kernelRunShortcut
      };
    }, {
      "./utils": 113
    }],
    111: [function (require, module, exports) {
      var source = "// https://www.shadertoy.com/view/4t2SDh\n//note: uniformly distributed, normalized rand, [0,1]\nhighp float randomSeedShift = 1.0;\nhighp float slide = 1.0;\nuniform highp float randomSeed1;\nuniform highp float randomSeed2;\n\nhighp float nrand(highp vec2 n) {\n  highp float result = fract(sin(dot((n.xy + 1.0) * vec2(randomSeed1 * slide, randomSeed2 * randomSeedShift), vec2(12.9898, 78.233))) * 43758.5453);\n  randomSeedShift = result;\n  if (randomSeedShift > 0.5) {\n    slide += 0.00009; \n  } else {\n    slide += 0.0009;\n  }\n  return result;\n}";
      var name = 'math-random-uniformly-distributed';
      var functionMatch = "Math.random()";
      var functionReplace = "nrand(vTexCoord)";
      var functionReturnType = 'Number';

      var onBeforeRun = function onBeforeRun(kernel) {
        kernel.setUniform1f('randomSeed1', Math.random());
        kernel.setUniform1f('randomSeed2', Math.random());
      };

      var plugin = {
        name: name,
        onBeforeRun: onBeforeRun,
        functionMatch: functionMatch,
        functionReplace: functionReplace,
        functionReturnType: functionReturnType,
        source: source
      };
      module.exports = plugin;
    }, {}],
    112: [function (require, module, exports) {
      var Texture =
      /*#__PURE__*/
      function () {
        function Texture(settings) {
          _classCallCheck(this, Texture);

          var texture = settings.texture,
              size = settings.size,
              dimensions = settings.dimensions,
              output = settings.output,
              context = settings.context,
              _settings$type = settings.type,
              type = _settings$type === void 0 ? 'NumberTexture' : _settings$type,
              kernel = settings.kernel,
              internalFormat = settings.internalFormat,
              textureFormat = settings.textureFormat;
          if (!output) throw new Error('settings property "output" required.');
          if (!context) throw new Error('settings property "context" required.');
          this.texture = texture;
          this.size = size;
          this.dimensions = dimensions;
          this.output = output;
          this.context = context;
          this.kernel = kernel;
          this.type = type;
          this._deleted = false;
          this.internalFormat = internalFormat;
          this.textureFormat = textureFormat;
        }

        _createClass(Texture, [{
          key: "toArray",
          value: function toArray() {
            throw new Error("Not implemented on ".concat(this.constructor.name));
          }
        }, {
          key: "clone",
          value: function clone() {
            throw new Error("Not implemented on ".concat(this.constructor.name));
          }
        }, {
          key: "delete",
          value: function _delete() {
            this._deleted = true;
            return this.context.deleteTexture(this.texture);
          }
        }]);

        return Texture;
      }();

      module.exports = {
        Texture: Texture
      };
    }, {}],
    113: [function (require, module, exports) {
      var acorn = require('acorn');

      var _require292 = require('./input'),
          Input = _require292.Input;

      var _require293 = require('./texture'),
          Texture = _require293.Texture;

      var FUNCTION_NAME = /function ([^(]*)/;
      var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
      var ARGUMENT_NAMES = /([^\s,]+)/g;
      var utils = {
        systemEndianness: function systemEndianness() {
          return _systemEndianness;
        },
        getSystemEndianness: function getSystemEndianness() {
          var b = new ArrayBuffer(4);
          var a = new Uint32Array(b);
          var c = new Uint8Array(b);
          a[0] = 0xdeadbeef;
          if (c[0] === 0xef) return 'LE';
          if (c[0] === 0xde) return 'BE';
          throw new Error('unknown endianness');
        },
        isFunction: function isFunction(funcObj) {
          return typeof funcObj === 'function';
        },
        isFunctionString: function isFunctionString(fn) {
          if (typeof fn === 'string') {
            return fn.slice(0, 'function'.length).toLowerCase() === 'function';
          }

          return false;
        },
        getFunctionNameFromString: function getFunctionNameFromString(funcStr) {
          return FUNCTION_NAME.exec(funcStr)[1].trim();
        },
        getFunctionBodyFromString: function getFunctionBodyFromString(funcStr) {
          return funcStr.substring(funcStr.indexOf('{') + 1, funcStr.lastIndexOf('}'));
        },
        getArgumentNamesFromString: function getArgumentNamesFromString(fn) {
          var fnStr = fn.replace(STRIP_COMMENTS, '');
          var result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);

          if (result === null) {
            result = [];
          }

          return result;
        },
        clone: function clone(obj) {
          if (obj === null || _typeof(obj) !== 'object' || obj.hasOwnProperty('isActiveClone')) return obj;
          var temp = obj.constructor();

          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              obj.isActiveClone = null;
              temp[key] = utils.clone(obj[key]);
              delete obj.isActiveClone;
            }
          }

          return temp;
        },
        isArray: function isArray(array) {
          return !isNaN(array.length);
        },
        getVariableType: function getVariableType(value, strictIntegers) {
          if (utils.isArray(value)) {
            if (value[0].nodeName === 'IMG') {
              return 'HTMLImageArray';
            }

            return 'Array';
          }

          switch (value.constructor) {
            case Boolean:
              return 'Boolean';

            case Number:
              if (strictIntegers && Number.isInteger(value)) {
                return 'Integer';
              }

              return 'Float';

            case Texture:
              return value.type;

            case Input:
              return 'Input';
          }

          switch (value.nodeName) {
            case 'IMG':
              return 'HTMLImage';

            case 'VIDEO':
              return 'HTMLVideo';
          }

          if (value.hasOwnProperty('type')) {
            return value.type;
          }

          return 'Unknown';
        },
        getKernelTextureSize: function getKernelTextureSize(settings, dimensions) {
          var _dimensions = _slicedToArray(dimensions, 3),
              w = _dimensions[0],
              h = _dimensions[1],
              d = _dimensions[2];

          var texelCount = (w || 1) * (h || 1) * (d || 1);

          if (settings.optimizeFloatMemory && settings.precision === 'single') {
            w = texelCount = Math.ceil(texelCount / 4);
          }

          if (h > 1 && w * h === texelCount) {
            return new Int32Array([w, h]);
          }

          return utils.closestSquareDimensions(texelCount);
        },
        closestSquareDimensions: function closestSquareDimensions(length) {
          var sqrt = Math.sqrt(length);
          var high = Math.ceil(sqrt);
          var low = Math.floor(sqrt);

          while (high * low < length) {
            high--;
            low = Math.ceil(length / high);
          }

          return new Int32Array([low, Math.ceil(length / low)]);
        },
        getMemoryOptimizedFloatTextureSize: function getMemoryOptimizedFloatTextureSize(dimensions, bitRatio) {
          var totalArea = utils.roundTo((dimensions[0] || 1) * (dimensions[1] || 1) * (dimensions[2] || 1) * (dimensions[3] || 1), 4);
          var texelCount = totalArea / bitRatio;
          return utils.closestSquareDimensions(texelCount);
        },
        getMemoryOptimizedPackedTextureSize: function getMemoryOptimizedPackedTextureSize(dimensions, bitRatio) {
          var _dimensions2 = _slicedToArray(dimensions, 3),
              w = _dimensions2[0],
              h = _dimensions2[1],
              d = _dimensions2[2];

          var totalArea = utils.roundTo((w || 1) * (h || 1) * (d || 1), 4);
          var texelCount = totalArea / (4 / bitRatio);
          return utils.closestSquareDimensions(texelCount);
        },
        roundTo: function roundTo(n, d) {
          return Math.floor((n + d - 1) / d) * d;
        },
        getDimensions: function getDimensions(x, pad) {
          var ret;

          if (utils.isArray(x)) {
            var dim = [];
            var temp = x;

            while (utils.isArray(temp)) {
              dim.push(temp.length);
              temp = temp[0];
            }

            ret = dim.reverse();
          } else if (x instanceof Texture) {
            ret = x.output;
          } else if (x instanceof Input) {
            ret = x.size;
          } else {
            throw new Error("Unknown dimensions of ".concat(x));
          }

          if (pad) {
            ret = Array.from(ret);

            while (ret.length < 3) {
              ret.push(1);
            }
          }

          return new Int32Array(ret);
        },
        flatten2dArrayTo: function flatten2dArrayTo(array, target) {
          var offset = 0;

          for (var y = 0; y < array.length; y++) {
            target.set(array[y], offset);
            offset += array[y].length;
          }
        },
        flatten3dArrayTo: function flatten3dArrayTo(array, target) {
          var offset = 0;

          for (var z = 0; z < array.length; z++) {
            for (var y = 0; y < array[z].length; y++) {
              target.set(array[z][y], offset);
              offset += array[z][y].length;
            }
          }
        },
        flatten4dArrayTo: function flatten4dArrayTo(array, target) {
          var offset = 0;

          for (var l = 0; l < array.length; l++) {
            for (var z = 0; z < array[l].length; z++) {
              for (var y = 0; y < array[l][z].length; y++) {
                target.set(array[l][z][y], offset);
                offset += array[l][z][y].length;
              }
            }
          }
        },
        flattenTo: function flattenTo(array, target) {
          if (utils.isArray(array[0])) {
            if (utils.isArray(array[0][0])) {
              if (utils.isArray(array[0][0][0])) {
                utils.flatten4dArrayTo(array, target);
              } else {
                utils.flatten3dArrayTo(array, target);
              }
            } else {
              utils.flatten2dArrayTo(array, target);
            }
          } else {
            target.set(array);
          }
        },
        splitArray: function splitArray(array, part) {
          var result = [];

          for (var i = 0; i < array.length; i += part) {
            result.push(new array.constructor(array.buffer, i * 4 + array.byteOffset, part));
          }

          return result;
        },
        getAstString: function getAstString(source, ast) {
          var lines = Array.isArray(source) ? source : source.split(/\r?\n/g);
          var start = ast.loc.start;
          var end = ast.loc.end;
          var result = [];

          if (start.line === end.line) {
            result.push(lines[start.line - 1].substring(start.column, end.column));
          } else {
            result.push(lines[start.line - 1].slice(start.column));

            for (var i = start.line; i < end.line; i++) {
              result.push(lines[i]);
            }

            result.push(lines[end.line - 1].slice(0, end.column));
          }

          return result.join('\n');
        },
        allPropertiesOf: function allPropertiesOf(obj) {
          var props = [];

          do {
            props.push.apply(props, Object.getOwnPropertyNames(obj));
          } while (obj = Object.getPrototypeOf(obj));

          return props;
        },
        linesToString: function linesToString(lines) {
          if (lines.length > 0) {
            return lines.join(';\n') + ';\n';
          } else {
            return '\n';
          }
        },
        warnDeprecated: function warnDeprecated(type, oldName, newName) {
          if (newName) {
            console.warn("You are using a deprecated ".concat(type, " \"").concat(oldName, "\". It has been replaced with \"").concat(newName, "\". Fixing, but please upgrade as it will soon be removed."));
          } else {
            console.warn("You are using a deprecated ".concat(type, " \"").concat(oldName, "\". It has been removed. Fixing, but please upgrade as it will soon be removed."));
          }
        },
        functionToIFunction: function functionToIFunction(source, settings) {
          settings = settings || {};
          if (typeof source !== 'string' && typeof source !== 'function') throw new Error('source not a string or function');
          var sourceString = typeof source === 'string' ? source : source.toString();
          var argumentTypes = [];

          if (Array.isArray(settings.argumentTypes)) {
            argumentTypes = settings.argumentTypes;
          } else if (_typeof(settings.argumentTypes) === 'object') {
            argumentTypes = utils.getArgumentNamesFromString(sourceString).map(function (name) {
              return settings.argumentTypes[name];
            }) || [];
          } else {
            argumentTypes = settings.argumentTypes || [];
          }

          return {
            source: sourceString,
            argumentTypes: argumentTypes,
            returnType: settings.returnType || null
          };
        },
        flipPixels: function flipPixels(pixels, width, height) {
          var halfHeight = height / 2 | 0;
          var bytesPerRow = width * 4;
          var temp = new Uint8ClampedArray(width * 4);
          var result = pixels.slice(0);

          for (var y = 0; y < halfHeight; ++y) {
            var topOffset = y * bytesPerRow;
            var bottomOffset = (height - y - 1) * bytesPerRow;
            temp.set(result.subarray(topOffset, topOffset + bytesPerRow));
            result.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);
            result.set(temp, bottomOffset);
          }

          return result;
        },
        erectPackedFloat: function erectPackedFloat(array, width) {
          return array.subarray(0, width);
        },
        erect2DPackedFloat: function erect2DPackedFloat(array, width, height) {
          var yResults = new Array(height);

          for (var y = 0; y < height; y++) {
            var xStart = y * width;
            var xEnd = xStart + width;
            yResults[y] = array.subarray(xStart, xEnd);
          }

          return yResults;
        },
        erect3DPackedFloat: function erect3DPackedFloat(array, width, height, depth) {
          var zResults = new Array(depth);

          for (var z = 0; z < depth; z++) {
            var yResults = new Array(height);

            for (var y = 0; y < height; y++) {
              var xStart = z * height * width + y * width;
              var xEnd = xStart + width;
              yResults[y] = array.subarray(xStart, xEnd);
            }

            zResults[z] = yResults;
          }

          return zResults;
        },
        erectMemoryOptimizedFloat: function erectMemoryOptimizedFloat(array, width) {
          return array.subarray(0, width);
        },
        erectMemoryOptimized2DFloat: function erectMemoryOptimized2DFloat(array, width, height) {
          var yResults = new Array(height);

          for (var y = 0; y < height; y++) {
            var offset = y * width;
            yResults[y] = array.subarray(offset, offset + width);
          }

          return yResults;
        },
        erectMemoryOptimized3DFloat: function erectMemoryOptimized3DFloat(array, width, height, depth) {
          var zResults = new Array(depth);

          for (var z = 0; z < depth; z++) {
            var yResults = new Array(height);

            for (var y = 0; y < height; y++) {
              var offset = z * height * width + y * width;
              yResults[y] = array.subarray(offset, offset + width);
            }

            zResults[z] = yResults;
          }

          return zResults;
        },
        erectFloat: function erectFloat(array, width) {
          var xResults = new Float32Array(width);
          var i = 0;

          for (var x = 0; x < width; x++) {
            xResults[x] = array[i];
            i += 4;
          }

          return xResults;
        },
        erect2DFloat: function erect2DFloat(array, width, height) {
          var yResults = new Array(height);
          var i = 0;

          for (var y = 0; y < height; y++) {
            var xResults = new Float32Array(width);

            for (var x = 0; x < width; x++) {
              xResults[x] = array[i];
              i += 4;
            }

            yResults[y] = xResults;
          }

          return yResults;
        },
        erect3DFloat: function erect3DFloat(array, width, height, depth) {
          var zResults = new Array(depth);
          var i = 0;

          for (var z = 0; z < depth; z++) {
            var yResults = new Array(height);

            for (var y = 0; y < height; y++) {
              var xResults = new Float32Array(width);

              for (var x = 0; x < width; x++) {
                xResults[x] = array[i];
                i += 4;
              }

              yResults[y] = xResults;
            }

            zResults[z] = yResults;
          }

          return zResults;
        },
        erectArray2: function erectArray2(array, width) {
          var xResults = new Array(width);
          var xResultsMax = width * 4;
          var i = 0;

          for (var x = 0; x < xResultsMax; x += 4) {
            xResults[i++] = array.subarray(x, x + 2);
          }

          return xResults;
        },
        erect2DArray2: function erect2DArray2(array, width, height) {
          var yResults = new Array(height);
          var XResultsMax = width * 4;

          for (var y = 0; y < height; y++) {
            var xResults = new Array(width);
            var offset = y * XResultsMax;
            var i = 0;

            for (var x = 0; x < XResultsMax; x += 4) {
              xResults[i++] = array.subarray(x + offset, x + offset + 2);
            }

            yResults[y] = xResults;
          }

          return yResults;
        },
        erect3DArray2: function erect3DArray2(array, width, height, depth) {
          var xResultsMax = width * 4;
          var zResults = new Array(depth);

          for (var z = 0; z < depth; z++) {
            var yResults = new Array(height);

            for (var y = 0; y < height; y++) {
              var xResults = new Array(width);
              var offset = z * xResultsMax * height + y * xResultsMax;
              var i = 0;

              for (var x = 0; x < xResultsMax; x += 4) {
                xResults[i++] = array.subarray(x + offset, x + offset + 2);
              }

              yResults[y] = xResults;
            }

            zResults[z] = yResults;
          }

          return zResults;
        },
        erectArray3: function erectArray3(array, width) {
          var xResults = new Array(width);
          var xResultsMax = width * 4;
          var i = 0;

          for (var x = 0; x < xResultsMax; x += 4) {
            xResults[i++] = array.subarray(x, x + 3);
          }

          return xResults;
        },
        erect2DArray3: function erect2DArray3(array, width, height) {
          var xResultsMax = width * 4;
          var yResults = new Array(height);

          for (var y = 0; y < height; y++) {
            var xResults = new Array(width);
            var offset = y * xResultsMax;
            var i = 0;

            for (var x = 0; x < xResultsMax; x += 4) {
              xResults[i++] = array.subarray(x + offset, x + offset + 3);
            }

            yResults[y] = xResults;
          }

          return yResults;
        },
        erect3DArray3: function erect3DArray3(array, width, height, depth) {
          var xResultsMax = width * 4;
          var zResults = new Array(depth);

          for (var z = 0; z < depth; z++) {
            var yResults = new Array(height);

            for (var y = 0; y < height; y++) {
              var xResults = new Array(width);
              var offset = z * xResultsMax * height + y * xResultsMax;
              var i = 0;

              for (var x = 0; x < xResultsMax; x += 4) {
                xResults[i++] = array.subarray(x + offset, x + offset + 3);
              }

              yResults[y] = xResults;
            }

            zResults[z] = yResults;
          }

          return zResults;
        },
        erectArray4: function erectArray4(array, width) {
          var xResults = new Array(array);
          var xResultsMax = width * 4;
          var i = 0;

          for (var x = 0; x < xResultsMax; x += 4) {
            xResults[i++] = array.subarray(x, x + 4);
          }

          return xResults;
        },
        erect2DArray4: function erect2DArray4(array, width, height) {
          var xResultsMax = width * 4;
          var yResults = new Array(height);

          for (var y = 0; y < height; y++) {
            var xResults = new Array(width);
            var offset = y * xResultsMax;
            var i = 0;

            for (var x = 0; x < xResultsMax; x += 4) {
              xResults[i++] = array.subarray(x + offset, x + offset + 4);
            }

            yResults[y] = xResults;
          }

          return yResults;
        },
        erect3DArray4: function erect3DArray4(array, width, height, depth) {
          var xResultsMax = width * 4;
          var zResults = new Array(depth);

          for (var z = 0; z < depth; z++) {
            var yResults = new Array(height);

            for (var y = 0; y < height; y++) {
              var xResults = new Array(width);
              var offset = z * xResultsMax * height + y * xResultsMax;
              var i = 0;

              for (var x = 0; x < xResultsMax; x += 4) {
                xResults[i++] = array.subarray(x + offset, x + offset + 4);
              }

              yResults[y] = xResults;
            }

            zResults[z] = yResults;
          }

          return zResults;
        },
        flattenFunctionToString: function flattenFunctionToString(source, settings) {
          var findDependency = settings.findDependency,
              thisLookup = settings.thisLookup,
              doNotDefine = settings.doNotDefine;
          var flattened = settings.flattened;

          if (!flattened) {
            flattened = settings.flattened = {};
          }

          var ast = acorn.parse(source);
          var functionDependencies = [];
          var indent = 0;

          function flatten(ast) {
            if (Array.isArray(ast)) {
              var results = [];

              for (var i = 0; i < ast.length; i++) {
                results.push(flatten(ast[i]));
              }

              return results.join('');
            }

            switch (ast.type) {
              case 'Program':
                return flatten(ast.body) + (ast.body[0].type === 'VariableDeclaration' ? ';' : '');

              case 'FunctionDeclaration':
                return "function ".concat(ast.id.name, "(").concat(ast.params.map(flatten).join(', '), ") ").concat(flatten(ast.body));

              case 'BlockStatement':
                {
                  var _result2 = [];
                  indent += 2;

                  for (var _i30 = 0; _i30 < ast.body.length; _i30++) {
                    var flat = flatten(ast.body[_i30]);

                    if (flat) {
                      _result2.push(' '.repeat(indent) + flat, ';\n');
                    }
                  }

                  indent -= 2;
                  return "{\n".concat(_result2.join(''), "}");
                }

              case 'VariableDeclaration':
                var declarations = utils.normalizeDeclarations(ast).map(flatten).filter(function (r) {
                  return r !== null;
                });

                if (declarations.length < 1) {
                  return '';
                } else {
                  return "".concat(ast.kind, " ").concat(declarations.join(','));
                }

              case 'VariableDeclarator':
                if (ast.init.object && ast.init.object.type === 'ThisExpression') {
                  var lookup = thisLookup(ast.init.property.name);

                  if (lookup) {
                    return "".concat(ast.id.name, " = ").concat(flatten(ast.init));
                  } else {
                    return null;
                  }
                } else {
                  return "".concat(ast.id.name, " = ").concat(flatten(ast.init));
                }

              case 'CallExpression':
                {
                  if (ast.callee.property.name === 'subarray') {
                    return "".concat(flatten(ast.callee.object), ".").concat(flatten(ast.callee.property), "(").concat(ast.arguments.map(function (value) {
                      return flatten(value);
                    }).join(', '), ")");
                  }

                  if (ast.callee.object.name === 'gl' || ast.callee.object.name === 'context') {
                    return "".concat(flatten(ast.callee.object), ".").concat(flatten(ast.callee.property), "(").concat(ast.arguments.map(function (value) {
                      return flatten(value);
                    }).join(', '), ")");
                  }

                  if (ast.callee.object.type === 'ThisExpression') {
                    functionDependencies.push(findDependency('this', ast.callee.property.name));
                    return "".concat(ast.callee.property.name, "(").concat(ast.arguments.map(function (value) {
                      return flatten(value);
                    }).join(', '), ")");
                  } else if (ast.callee.object.name) {
                    var foundSource = findDependency(ast.callee.object.name, ast.callee.property.name);

                    if (foundSource === null) {
                      return "".concat(ast.callee.object.name, ".").concat(ast.callee.property.name, "(").concat(ast.arguments.map(function (value) {
                        return flatten(value);
                      }).join(', '), ")");
                    } else {
                      functionDependencies.push(foundSource);
                      return "".concat(ast.callee.property.name, "(").concat(ast.arguments.map(function (value) {
                        return flatten(value);
                      }).join(', '), ")");
                    }
                  } else if (ast.callee.object.type === 'MemberExpression') {
                    return "".concat(flatten(ast.callee.object), ".").concat(ast.callee.property.name, "(").concat(ast.arguments.map(function (value) {
                      return flatten(value);
                    }).join(', '), ")");
                  } else {
                    throw new Error('unknown ast.callee');
                  }
                }

              case 'ReturnStatement':
                return "return ".concat(flatten(ast.argument));

              case 'BinaryExpression':
                return "(".concat(flatten(ast.left)).concat(ast.operator).concat(flatten(ast.right), ")");

              case 'UnaryExpression':
                if (ast.prefix) {
                  return "".concat(ast.operator, " ").concat(flatten(ast.argument));
                } else {
                  return "".concat(flatten(ast.argument), " ").concat(ast.operator);
                }

              case 'ExpressionStatement':
                return "".concat(flatten(ast.expression));

              case 'SequenceExpression':
                return "(".concat(flatten(ast.expressions), ")");

              case 'ArrowFunctionExpression':
                return "(".concat(ast.params.map(flatten).join(', '), ") => ").concat(flatten(ast.body));

              case 'Literal':
                return ast.raw;

              case 'Identifier':
                return ast.name;

              case 'MemberExpression':
                if (ast.object.type === 'ThisExpression') {
                  return thisLookup(ast.property.name);
                }

                if (ast.computed) {
                  return "".concat(flatten(ast.object), "[").concat(flatten(ast.property), "]");
                }

                return flatten(ast.object) + '.' + flatten(ast.property);

              case 'ThisExpression':
                return 'this';

              case 'NewExpression':
                return "new ".concat(flatten(ast.callee), "(").concat(ast.arguments.map(function (value) {
                  return flatten(value);
                }).join(', '), ")");

              case 'ForStatement':
                return "for (".concat(flatten(ast.init), ";").concat(flatten(ast.test), ";").concat(flatten(ast.update), ") ").concat(flatten(ast.body));

              case 'AssignmentExpression':
                return "".concat(flatten(ast.left)).concat(ast.operator).concat(flatten(ast.right));

              case 'UpdateExpression':
                return "".concat(flatten(ast.argument)).concat(ast.operator);

              case 'IfStatement':
                return "if (".concat(flatten(ast.test), ") ").concat(flatten(ast.consequent));

              case 'ThrowStatement':
                return "throw ".concat(flatten(ast.argument));

              case 'ObjectPattern':
                return ast.properties.map(flatten).join(', ');

              case 'ArrayPattern':
                return ast.elements.map(flatten).join(', ');

              case 'DebuggerStatement':
                return 'debugger;';

              case 'ConditionalExpression':
                return "".concat(flatten(ast.test), "?").concat(flatten(ast.consequent), ":").concat(flatten(ast.alternate));

              case 'Property':
                if (ast.kind === 'init') {
                  return flatten(ast.key);
                }

            }

            throw new Error("unhandled ast.type of ".concat(ast.type));
          }

          var result = flatten(ast);

          if (functionDependencies.length > 0) {
            var flattenedFunctionDependencies = [];

            for (var i = 0; i < functionDependencies.length; i++) {
              var functionDependency = functionDependencies[i];

              if (!flattened[functionDependency]) {
                flattened[functionDependency] = true;
              }

              flattenedFunctionDependencies.push(utils.flattenFunctionToString(functionDependency, settings) + '\n');
            }

            return flattenedFunctionDependencies.join('') + result;
          }

          return result;
        },
        normalizeDeclarations: function normalizeDeclarations(ast) {
          if (ast.type !== 'VariableDeclaration') throw new Error('Ast is not of type "VariableDeclaration"');
          var normalizedDeclarations = [];

          for (var declarationIndex = 0; declarationIndex < ast.declarations.length; declarationIndex++) {
            var declaration = ast.declarations[declarationIndex];

            if (declaration.id && declaration.id.type === 'ObjectPattern' && declaration.id.properties) {
              var properties = declaration.id.properties;

              for (var propertyIndex = 0; propertyIndex < properties.length; propertyIndex++) {
                var property = properties[propertyIndex];

                if (property.value.type === 'ObjectPattern' && property.value.properties) {
                  for (var subPropertyIndex = 0; subPropertyIndex < property.value.properties.length; subPropertyIndex++) {
                    var subProperty = property.value.properties[subPropertyIndex];

                    if (subProperty.type === 'Property') {
                      normalizedDeclarations.push({
                        type: 'VariableDeclarator',
                        id: {
                          type: 'Identifier',
                          name: subProperty.key.name
                        },
                        init: {
                          type: 'MemberExpression',
                          object: {
                            type: 'MemberExpression',
                            object: declaration.init,
                            property: {
                              type: 'Identifier',
                              name: property.key.name
                            },
                            computed: false
                          },
                          property: {
                            type: 'Identifier',
                            name: subProperty.key.name
                          },
                          computed: false
                        }
                      });
                    } else {
                      throw new Error('unexpected state');
                    }
                  }
                } else if (property.value.type === 'Identifier') {
                  normalizedDeclarations.push({
                    type: 'VariableDeclarator',
                    id: {
                      type: 'Identifier',
                      name: property.value && property.value.name ? property.value.name : property.key.name
                    },
                    init: {
                      type: 'MemberExpression',
                      object: declaration.init,
                      property: {
                        type: 'Identifier',
                        name: property.key.name
                      },
                      computed: false
                    }
                  });
                } else {
                  throw new Error('unexpected state');
                }
              }
            } else if (declaration.id && declaration.id.type === 'ArrayPattern' && declaration.id.elements) {
              var elements = declaration.id.elements;

              for (var elementIndex = 0; elementIndex < elements.length; elementIndex++) {
                var element = elements[elementIndex];

                if (element.type === 'Identifier') {
                  normalizedDeclarations.push({
                    type: 'VariableDeclarator',
                    id: {
                      type: 'Identifier',
                      name: element.name
                    },
                    init: {
                      type: 'MemberExpression',
                      object: declaration.init,
                      property: {
                        type: 'Literal',
                        value: elementIndex,
                        raw: elementIndex.toString(),
                        start: element.start,
                        end: element.end
                      },
                      computed: true
                    }
                  });
                } else {
                  throw new Error('unexpected state');
                }
              }
            } else {
              normalizedDeclarations.push(declaration);
            }
          }

          return normalizedDeclarations;
        },
        splitHTMLImageToRGB: function splitHTMLImageToRGB(gpu, image) {
          var rKernel = gpu.createKernel(function (a) {
            var pixel = a[this.thread.y][this.thread.x];
            return pixel.r * 255;
          }, {
            output: [image.width, image.height],
            precision: 'unsigned',
            argumentTypes: {
              a: 'HTMLImage'
            }
          });
          var gKernel = gpu.createKernel(function (a) {
            var pixel = a[this.thread.y][this.thread.x];
            return pixel.g * 255;
          }, {
            output: [image.width, image.height],
            precision: 'unsigned',
            argumentTypes: {
              a: 'HTMLImage'
            }
          });
          var bKernel = gpu.createKernel(function (a) {
            var pixel = a[this.thread.y][this.thread.x];
            return pixel.b * 255;
          }, {
            output: [image.width, image.height],
            precision: 'unsigned',
            argumentTypes: {
              a: 'HTMLImage'
            }
          });
          var aKernel = gpu.createKernel(function (a) {
            var pixel = a[this.thread.y][this.thread.x];
            return pixel.a * 255;
          }, {
            output: [image.width, image.height],
            precision: 'unsigned',
            argumentTypes: {
              a: 'HTMLImage'
            }
          });
          var result = [rKernel(image), gKernel(image), bKernel(image), aKernel(image)];
          result.rKernel = rKernel;
          result.gKernel = gKernel;
          result.bKernel = bKernel;
          result.aKernel = aKernel;
          result.gpu = gpu;
          return result;
        },
        splitRGBAToCanvases: function splitRGBAToCanvases(gpu, rgba, width, height) {
          var visualKernelR = gpu.createKernel(function (v) {
            var pixel = v[this.thread.y][this.thread.x];
            this.color(pixel.r / 255, 0, 0, 255);
          }, {
            output: [width, height],
            graphical: true,
            argumentTypes: {
              v: 'Array2D(4)'
            }
          });
          visualKernelR(rgba);
          var visualKernelG = gpu.createKernel(function (v) {
            var pixel = v[this.thread.y][this.thread.x];
            this.color(0, pixel.g / 255, 0, 255);
          }, {
            output: [width, height],
            graphical: true,
            argumentTypes: {
              v: 'Array2D(4)'
            }
          });
          visualKernelG(rgba);
          var visualKernelB = gpu.createKernel(function (v) {
            var pixel = v[this.thread.y][this.thread.x];
            this.color(0, 0, pixel.b / 255, 255);
          }, {
            output: [width, height],
            graphical: true,
            argumentTypes: {
              v: 'Array2D(4)'
            }
          });
          visualKernelB(rgba);
          var visualKernelA = gpu.createKernel(function (v) {
            var pixel = v[this.thread.y][this.thread.x];
            this.color(255, 255, 255, pixel.a / 255);
          }, {
            output: [width, height],
            graphical: true,
            argumentTypes: {
              v: 'Array2D(4)'
            }
          });
          visualKernelA(rgba);
          return [visualKernelR.canvas, visualKernelG.canvas, visualKernelB.canvas, visualKernelA.canvas];
        }
      };

      var _systemEndianness = utils.getSystemEndianness();

      module.exports = {
        utils: utils
      };
    }, {
      "./input": 109,
      "./texture": 112,
      "acorn": 1
    }]
  }, {}, [106])(106);
});
},{}],"../node_modules/mouse-event/mouse.js":[function(require,module,exports) {
'use strict'

function mouseButtons(ev) {
  if(typeof ev === 'object') {
    if('buttons' in ev) {
      return ev.buttons
    } else if('which' in ev) {
      var b = ev.which
      if(b === 2) {
        return 4
      } else if(b === 3) {
        return 2
      } else if(b > 0) {
        return 1<<(b-1)
      }
    } else if('button' in ev) {
      var b = ev.button
      if(b === 1) {
        return 4
      } else if(b === 2) {
        return 2
      } else if(b >= 0) {
        return 1<<b
      }
    }
  }
  return 0
}
exports.buttons = mouseButtons

function mouseElement(ev) {
  return ev.target || ev.srcElement || window
}
exports.element = mouseElement

function mouseRelativeX(ev) {
  if(typeof ev === 'object') {
    if('offsetX' in ev) {
      return ev.offsetX
    }
    var target = mouseElement(ev)
    var bounds = target.getBoundingClientRect()
    return ev.clientX - bounds.left
  }
  return 0
}
exports.x = mouseRelativeX

function mouseRelativeY(ev) {
  if(typeof ev === 'object') {
    if('offsetY' in ev) {
      return ev.offsetY
    }
    var target = mouseElement(ev)
    var bounds = target.getBoundingClientRect()
    return ev.clientY - bounds.top
  }
  return 0
}
exports.y = mouseRelativeY

},{}],"../node_modules/mouse-change/mouse-listen.js":[function(require,module,exports) {
'use strict'

module.exports = mouseListen

var mouse = require('mouse-event')

function mouseListen (element, callback) {
  if (!callback) {
    callback = element
    element = window
  }

  var buttonState = 0
  var x = 0
  var y = 0
  var mods = {
    shift: false,
    alt: false,
    control: false,
    meta: false
  }
  var attached = false

  function updateMods (ev) {
    var changed = false
    if ('altKey' in ev) {
      changed = changed || ev.altKey !== mods.alt
      mods.alt = !!ev.altKey
    }
    if ('shiftKey' in ev) {
      changed = changed || ev.shiftKey !== mods.shift
      mods.shift = !!ev.shiftKey
    }
    if ('ctrlKey' in ev) {
      changed = changed || ev.ctrlKey !== mods.control
      mods.control = !!ev.ctrlKey
    }
    if ('metaKey' in ev) {
      changed = changed || ev.metaKey !== mods.meta
      mods.meta = !!ev.metaKey
    }
    return changed
  }

  function handleEvent (nextButtons, ev) {
    var nextX = mouse.x(ev)
    var nextY = mouse.y(ev)
    if ('buttons' in ev) {
      nextButtons = ev.buttons | 0
    }
    if (nextButtons !== buttonState ||
      nextX !== x ||
      nextY !== y ||
      updateMods(ev)) {
      buttonState = nextButtons | 0
      x = nextX || 0
      y = nextY || 0
      callback && callback(buttonState, x, y, mods)
    }
  }

  function clearState (ev) {
    handleEvent(0, ev)
  }

  function handleBlur () {
    if (buttonState ||
      x ||
      y ||
      mods.shift ||
      mods.alt ||
      mods.meta ||
      mods.control) {
      x = y = 0
      buttonState = 0
      mods.shift = mods.alt = mods.control = mods.meta = false
      callback && callback(0, 0, 0, mods)
    }
  }

  function handleMods (ev) {
    if (updateMods(ev)) {
      callback && callback(buttonState, x, y, mods)
    }
  }

  function handleMouseMove (ev) {
    if (mouse.buttons(ev) === 0) {
      handleEvent(0, ev)
    } else {
      handleEvent(buttonState, ev)
    }
  }

  function handleMouseDown (ev) {
    handleEvent(buttonState | mouse.buttons(ev), ev)
  }

  function handleMouseUp (ev) {
    handleEvent(buttonState & ~mouse.buttons(ev), ev)
  }

  function attachListeners () {
    if (attached) {
      return
    }
    attached = true

    element.addEventListener('mousemove', handleMouseMove)

    element.addEventListener('mousedown', handleMouseDown)

    element.addEventListener('mouseup', handleMouseUp)

    element.addEventListener('mouseleave', clearState)
    element.addEventListener('mouseenter', clearState)
    element.addEventListener('mouseout', clearState)
    element.addEventListener('mouseover', clearState)

    element.addEventListener('blur', handleBlur)

    element.addEventListener('keyup', handleMods)
    element.addEventListener('keydown', handleMods)
    element.addEventListener('keypress', handleMods)

    if (element !== window) {
      window.addEventListener('blur', handleBlur)

      window.addEventListener('keyup', handleMods)
      window.addEventListener('keydown', handleMods)
      window.addEventListener('keypress', handleMods)
    }
  }

  function detachListeners () {
    if (!attached) {
      return
    }
    attached = false

    element.removeEventListener('mousemove', handleMouseMove)

    element.removeEventListener('mousedown', handleMouseDown)

    element.removeEventListener('mouseup', handleMouseUp)

    element.removeEventListener('mouseleave', clearState)
    element.removeEventListener('mouseenter', clearState)
    element.removeEventListener('mouseout', clearState)
    element.removeEventListener('mouseover', clearState)

    element.removeEventListener('blur', handleBlur)

    element.removeEventListener('keyup', handleMods)
    element.removeEventListener('keydown', handleMods)
    element.removeEventListener('keypress', handleMods)

    if (element !== window) {
      window.removeEventListener('blur', handleBlur)

      window.removeEventListener('keyup', handleMods)
      window.removeEventListener('keydown', handleMods)
      window.removeEventListener('keypress', handleMods)
    }
  }

  // Attach listeners
  attachListeners()

  var result = {
    element: element
  }

  Object.defineProperties(result, {
    enabled: {
      get: function () { return attached },
      set: function (f) {
        if (f) {
          attachListeners()
        } else {
          detachListeners()
        }
      },
      enumerable: true
    },
    buttons: {
      get: function () { return buttonState },
      enumerable: true
    },
    x: {
      get: function () { return x },
      enumerable: true
    },
    y: {
      get: function () { return y },
      enumerable: true
    },
    mods: {
      get: function () { return mods },
      enumerable: true
    }
  })

  return result
}

},{"mouse-event":"../node_modules/mouse-event/mouse.js"}],"../node_modules/webrtc-adapter/src/js/utils.js":[function(require,module,exports) {
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';

var logDisabled_ = true;

// Utility methods.
var utils = {
  disableLog: function(bool) {
    if (typeof bool !== 'boolean') {
      return new Error('Argument type: ' + typeof bool +
          '. Please use a boolean.');
    }
    logDisabled_ = bool;
    return (bool) ? 'adapter.js logging disabled' :
        'adapter.js logging enabled';
  },

  log: function() {
    if (typeof window === 'object') {
      if (logDisabled_) {
        return;
      }
      if (typeof console !== 'undefined' && typeof console.log === 'function') {
        console.log.apply(console, arguments);
      }
    }
  },

  /**
   * Extract browser version out of the provided user agent string.
   *
   * @param {!string} uastring userAgent string.
   * @param {!string} expr Regular expression used as match criteria.
   * @param {!number} pos position in the version string to be returned.
   * @return {!number} browser version.
   */
  extractVersion: function(uastring, expr, pos) {
    var match = uastring.match(expr);
    return match && match.length >= pos && parseInt(match[pos], 10);
  },

  /**
   * Browser detector.
   *
   * @return {object} result containing browser and version
   *     properties.
   */
  detectBrowser: function() {
    // Returned result object.
    var result = {};
    result.browser = null;
    result.version = null;

    // Fail early if it's not a browser
    if (typeof window === 'undefined' || !window.navigator) {
      result.browser = 'Not a browser.';
      return result;
    }

    // Firefox.
    if (navigator.mozGetUserMedia) {
      result.browser = 'firefox';
      result.version = this.extractVersion(navigator.userAgent,
          /Firefox\/([0-9]+)\./, 1);

    // all webkit-based browsers
    } else if (navigator.webkitGetUserMedia) {
      // Chrome, Chromium, Webview, Opera, all use the chrome shim for now
      if (window.webkitRTCPeerConnection) {
        result.browser = 'chrome';
        result.version = this.extractVersion(navigator.userAgent,
          /Chrom(e|ium)\/([0-9]+)\./, 2);

      // Safari or unknown webkit-based
      // for the time being Safari has support for MediaStreams but not webRTC
      } else {
        // Safari UA substrings of interest for reference:
        // - webkit version:           AppleWebKit/602.1.25 (also used in Op,Cr)
        // - safari UI version:        Version/9.0.3 (unique to Safari)
        // - safari UI webkit version: Safari/601.4.4 (also used in Op,Cr)
        //
        // if the webkit version and safari UI webkit versions are equals,
        // ... this is a stable version.
        //
        // only the internal webkit version is important today to know if
        // media streams are supported
        //
        if (navigator.userAgent.match(/Version\/(\d+).(\d+)/)) {
          result.browser = 'safari';
          result.version = this.extractVersion(navigator.userAgent,
            /AppleWebKit\/([0-9]+)\./, 1);

        // unknown webkit-based browser
        } else {
          result.browser = 'Unsupported webkit-based browser ' +
              'with GUM support but no WebRTC support.';
          return result;
        }
      }

    // Edge.
    } else if (navigator.mediaDevices &&
        navigator.userAgent.match(/Edge\/(\d+).(\d+)$/)) {
      result.browser = 'edge';
      result.version = this.extractVersion(navigator.userAgent,
          /Edge\/(\d+).(\d+)$/, 2);

    // Default fallthrough: not supported.
    } else {
      result.browser = 'Not a supported browser.';
      return result;
    }

    return result;
  }
};

// Export.
module.exports = {
  log: utils.log,
  disableLog: utils.disableLog,
  browserDetails: utils.detectBrowser(),
  extractVersion: utils.extractVersion
};

},{}],"../node_modules/webrtc-adapter/src/js/chrome/getusermedia.js":[function(require,module,exports) {
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';
var logging = require('../utils.js').log;

// Expose public methods.
module.exports = function() {
  var constraintsToChrome_ = function(c) {
    if (typeof c !== 'object' || c.mandatory || c.optional) {
      return c;
    }
    var cc = {};
    Object.keys(c).forEach(function(key) {
      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
        return;
      }
      var r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};
      if (r.exact !== undefined && typeof r.exact === 'number') {
        r.min = r.max = r.exact;
      }
      var oldname_ = function(prefix, name) {
        if (prefix) {
          return prefix + name.charAt(0).toUpperCase() + name.slice(1);
        }
        return (name === 'deviceId') ? 'sourceId' : name;
      };
      if (r.ideal !== undefined) {
        cc.optional = cc.optional || [];
        var oc = {};
        if (typeof r.ideal === 'number') {
          oc[oldname_('min', key)] = r.ideal;
          cc.optional.push(oc);
          oc = {};
          oc[oldname_('max', key)] = r.ideal;
          cc.optional.push(oc);
        } else {
          oc[oldname_('', key)] = r.ideal;
          cc.optional.push(oc);
        }
      }
      if (r.exact !== undefined && typeof r.exact !== 'number') {
        cc.mandatory = cc.mandatory || {};
        cc.mandatory[oldname_('', key)] = r.exact;
      } else {
        ['min', 'max'].forEach(function(mix) {
          if (r[mix] !== undefined) {
            cc.mandatory = cc.mandatory || {};
            cc.mandatory[oldname_(mix, key)] = r[mix];
          }
        });
      }
    });
    if (c.advanced) {
      cc.optional = (cc.optional || []).concat(c.advanced);
    }
    return cc;
  };

  var shimConstraints_ = function(constraints, func) {
    constraints = JSON.parse(JSON.stringify(constraints));
    if (constraints && constraints.audio) {
      constraints.audio = constraintsToChrome_(constraints.audio);
    }
    if (constraints && typeof constraints.video === 'object') {
      // Shim facingMode for mobile, where it defaults to "user".
      var face = constraints.video.facingMode;
      face = face && ((typeof face === 'object') ? face : {ideal: face});

      if ((face && (face.exact === 'user' || face.exact === 'environment' ||
                    face.ideal === 'user' || face.ideal === 'environment')) &&
          !(navigator.mediaDevices.getSupportedConstraints &&
            navigator.mediaDevices.getSupportedConstraints().facingMode)) {
        delete constraints.video.facingMode;
        if (face.exact === 'environment' || face.ideal === 'environment') {
          // Look for "back" in label, or use last cam (typically back cam).
          return navigator.mediaDevices.enumerateDevices()
          .then(function(devices) {
            devices = devices.filter(function(d) {
              return d.kind === 'videoinput';
            });
            var back = devices.find(function(d) {
              return d.label.toLowerCase().indexOf('back') !== -1;
            }) || (devices.length && devices[devices.length - 1]);
            if (back) {
              constraints.video.deviceId = face.exact ? {exact: back.deviceId} :
                                                        {ideal: back.deviceId};
            }
            constraints.video = constraintsToChrome_(constraints.video);
            logging('chrome: ' + JSON.stringify(constraints));
            return func(constraints);
          });
        }
      }
      constraints.video = constraintsToChrome_(constraints.video);
    }
    logging('chrome: ' + JSON.stringify(constraints));
    return func(constraints);
  };

  var shimError_ = function(e) {
    return {
      name: {
        PermissionDeniedError: 'NotAllowedError',
        ConstraintNotSatisfiedError: 'OverconstrainedError'
      }[e.name] || e.name,
      message: e.message,
      constraint: e.constraintName,
      toString: function() {
        return this.name + (this.message && ': ') + this.message;
      }
    };
  };

  var getUserMedia_ = function(constraints, onSuccess, onError) {
    shimConstraints_(constraints, function(c) {
      navigator.webkitGetUserMedia(c, onSuccess, function(e) {
        onError(shimError_(e));
      });
    });
  };

  navigator.getUserMedia = getUserMedia_;

  // Returns the result of getUserMedia as a Promise.
  var getUserMediaPromise_ = function(constraints) {
    return new Promise(function(resolve, reject) {
      navigator.getUserMedia(constraints, resolve, reject);
    });
  };

  if (!navigator.mediaDevices) {
    navigator.mediaDevices = {
      getUserMedia: getUserMediaPromise_,
      enumerateDevices: function() {
        return new Promise(function(resolve) {
          var kinds = {audio: 'audioinput', video: 'videoinput'};
          return MediaStreamTrack.getSources(function(devices) {
            resolve(devices.map(function(device) {
              return {label: device.label,
                      kind: kinds[device.kind],
                      deviceId: device.id,
                      groupId: ''};
            }));
          });
        });
      }
    };
  }

  // A shim for getUserMedia method on the mediaDevices object.
  // TODO(KaptenJansson) remove once implemented in Chrome stable.
  if (!navigator.mediaDevices.getUserMedia) {
    navigator.mediaDevices.getUserMedia = function(constraints) {
      return getUserMediaPromise_(constraints);
    };
  } else {
    // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia
    // function which returns a Promise, it does not accept spec-style
    // constraints.
    var origGetUserMedia = navigator.mediaDevices.getUserMedia.
        bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function(cs) {
      return shimConstraints_(cs, function(c) {
        return origGetUserMedia(c).then(function(stream) {
          if (c.audio && !stream.getAudioTracks().length ||
              c.video && !stream.getVideoTracks().length) {
            stream.getTracks().forEach(function(track) {
              track.stop();
            });
            throw new DOMException('', 'NotFoundError');
          }
          return stream;
        }, function(e) {
          return Promise.reject(shimError_(e));
        });
      });
    };
  }

  // Dummy devicechange event methods.
  // TODO(KaptenJansson) remove once implemented in Chrome stable.
  if (typeof navigator.mediaDevices.addEventListener === 'undefined') {
    navigator.mediaDevices.addEventListener = function() {
      logging('Dummy mediaDevices.addEventListener called.');
    };
  }
  if (typeof navigator.mediaDevices.removeEventListener === 'undefined') {
    navigator.mediaDevices.removeEventListener = function() {
      logging('Dummy mediaDevices.removeEventListener called.');
    };
  }
};

},{"../utils.js":"../node_modules/webrtc-adapter/src/js/utils.js"}],"../node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js":[function(require,module,exports) {

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';
var logging = require('../utils.js').log;
var browserDetails = require('../utils.js').browserDetails;

var chromeShim = {
  shimMediaStream: function() {
    window.MediaStream = window.MediaStream || window.webkitMediaStream;
  },

  shimOnTrack: function() {
    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in
        window.RTCPeerConnection.prototype)) {
      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
        get: function() {
          return this._ontrack;
        },
        set: function(f) {
          var self = this;
          if (this._ontrack) {
            this.removeEventListener('track', this._ontrack);
            this.removeEventListener('addstream', this._ontrackpoly);
          }
          this.addEventListener('track', this._ontrack = f);
          this.addEventListener('addstream', this._ontrackpoly = function(e) {
            // onaddstream does not fire when a track is added to an existing
            // stream. But stream.onaddtrack is implemented so we use that.
            e.stream.addEventListener('addtrack', function(te) {
              var event = new Event('track');
              event.track = te.track;
              event.receiver = {track: te.track};
              event.streams = [e.stream];
              self.dispatchEvent(event);
            });
            e.stream.getTracks().forEach(function(track) {
              var event = new Event('track');
              event.track = track;
              event.receiver = {track: track};
              event.streams = [e.stream];
              this.dispatchEvent(event);
            }.bind(this));
          }.bind(this));
        }
      });
    }
  },

  shimSourceObject: function() {
    if (typeof window === 'object') {
      if (window.HTMLMediaElement &&
        !('srcObject' in window.HTMLMediaElement.prototype)) {
        // Shim the srcObject property, once, when HTMLMediaElement is found.
        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {
          get: function() {
            return this._srcObject;
          },
          set: function(stream) {
            var self = this;
            // Use _srcObject as a private property for this shim
            this._srcObject = stream;
            if (this.src) {
              URL.revokeObjectURL(this.src);
            }

            if (!stream) {
              this.src = '';
              return;
            }
            this.src = URL.createObjectURL(stream);
            // We need to recreate the blob url when a track is added or
            // removed. Doing it manually since we want to avoid a recursion.
            stream.addEventListener('addtrack', function() {
              if (self.src) {
                URL.revokeObjectURL(self.src);
              }
              self.src = URL.createObjectURL(stream);
            });
            stream.addEventListener('removetrack', function() {
              if (self.src) {
                URL.revokeObjectURL(self.src);
              }
              self.src = URL.createObjectURL(stream);
            });
          }
        });
      }
    }
  },

  shimPeerConnection: function() {
    // The RTCPeerConnection object.
    window.RTCPeerConnection = function(pcConfig, pcConstraints) {
      // Translate iceTransportPolicy to iceTransports,
      // see https://code.google.com/p/webrtc/issues/detail?id=4869
      logging('PeerConnection');
      if (pcConfig && pcConfig.iceTransportPolicy) {
        pcConfig.iceTransports = pcConfig.iceTransportPolicy;
      }

      var pc = new webkitRTCPeerConnection(pcConfig, pcConstraints);
      var origGetStats = pc.getStats.bind(pc);
      pc.getStats = function(selector, successCallback, errorCallback) {
        var self = this;
        var args = arguments;

        // If selector is a function then we are in the old style stats so just
        // pass back the original getStats format to avoid breaking old users.
        if (arguments.length > 0 && typeof selector === 'function') {
          return origGetStats(selector, successCallback);
        }

        var fixChromeStats_ = function(response) {
          var standardReport = {};
          var reports = response.result();
          reports.forEach(function(report) {
            var standardStats = {
              id: report.id,
              timestamp: report.timestamp,
              type: report.type
            };
            report.names().forEach(function(name) {
              standardStats[name] = report.stat(name);
            });
            standardReport[standardStats.id] = standardStats;
          });

          return standardReport;
        };

        // shim getStats with maplike support
        var makeMapStats = function(stats, legacyStats) {
          var map = new Map(Object.keys(stats).map(function(key) {
            return[key, stats[key]];
          }));
          legacyStats = legacyStats || stats;
          Object.keys(legacyStats).forEach(function(key) {
            map[key] = legacyStats[key];
          });
          return map;
        };

        if (arguments.length >= 2) {
          var successCallbackWrapper_ = function(response) {
            args[1](makeMapStats(fixChromeStats_(response)));
          };

          return origGetStats.apply(this, [successCallbackWrapper_,
              arguments[0]]);
        }

        // promise-support
        return new Promise(function(resolve, reject) {
          if (args.length === 1 && typeof selector === 'object') {
            origGetStats.apply(self, [
              function(response) {
                resolve(makeMapStats(fixChromeStats_(response)));
              }, reject]);
          } else {
            // Preserve legacy chrome stats only on legacy access of stats obj
            origGetStats.apply(self, [
              function(response) {
                resolve(makeMapStats(fixChromeStats_(response),
                    response.result()));
              }, reject]);
          }
        }).then(successCallback, errorCallback);
      };

      return pc;
    };
    window.RTCPeerConnection.prototype = webkitRTCPeerConnection.prototype;

    // wrap static methods. Currently just generateCertificate.
    if (webkitRTCPeerConnection.generateCertificate) {
      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
        get: function() {
          return webkitRTCPeerConnection.generateCertificate;
        }
      });
    }

    ['createOffer', 'createAnswer'].forEach(function(method) {
      var nativeMethod = webkitRTCPeerConnection.prototype[method];
      webkitRTCPeerConnection.prototype[method] = function() {
        var self = this;
        if (arguments.length < 1 || (arguments.length === 1 &&
            typeof arguments[0] === 'object')) {
          var opts = arguments.length === 1 ? arguments[0] : undefined;
          return new Promise(function(resolve, reject) {
            nativeMethod.apply(self, [resolve, reject, opts]);
          });
        }
        return nativeMethod.apply(this, arguments);
      };
    });

    // add promise support -- natively available in Chrome 51
    if (browserDetails.version < 51) {
      ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
          .forEach(function(method) {
            var nativeMethod = webkitRTCPeerConnection.prototype[method];
            webkitRTCPeerConnection.prototype[method] = function() {
              var args = arguments;
              var self = this;
              var promise = new Promise(function(resolve, reject) {
                nativeMethod.apply(self, [args[0], resolve, reject]);
              });
              if (args.length < 2) {
                return promise;
              }
              return promise.then(function() {
                args[1].apply(null, []);
              },
              function(err) {
                if (args.length >= 3) {
                  args[2].apply(null, [err]);
                }
              });
            };
          });
    }

    // shim implicit creation of RTCSessionDescription/RTCIceCandidate
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
        .forEach(function(method) {
          var nativeMethod = webkitRTCPeerConnection.prototype[method];
          webkitRTCPeerConnection.prototype[method] = function() {
            arguments[0] = new ((method === 'addIceCandidate') ?
                RTCIceCandidate : RTCSessionDescription)(arguments[0]);
            return nativeMethod.apply(this, arguments);
          };
        });

    // support for addIceCandidate(null or undefined)
    var nativeAddIceCandidate =
        RTCPeerConnection.prototype.addIceCandidate;
    RTCPeerConnection.prototype.addIceCandidate = function() {
      if (!arguments[0]) {
        if (arguments[1]) {
          arguments[1].apply(null);
        }
        return Promise.resolve();
      }
      return nativeAddIceCandidate.apply(this, arguments);
    };
  }
};


// Expose public methods.
module.exports = {
  shimMediaStream: chromeShim.shimMediaStream,
  shimOnTrack: chromeShim.shimOnTrack,
  shimSourceObject: chromeShim.shimSourceObject,
  shimPeerConnection: chromeShim.shimPeerConnection,
  shimGetUserMedia: require('./getusermedia')
};

},{"../utils.js":"../node_modules/webrtc-adapter/src/js/utils.js","./getusermedia":"../node_modules/webrtc-adapter/src/js/chrome/getusermedia.js"}],"../node_modules/sdp/sdp.js":[function(require,module,exports) {
 /* eslint-env node */
'use strict';

// SDP helpers.
var SDPUtils = {};

// Generate an alphanumeric identifier for cname or mids.
// TODO: use UUIDs instead? https://gist.github.com/jed/982883
SDPUtils.generateIdentifier = function() {
  return Math.random().toString(36).substr(2, 10);
};

// The RTCP CNAME used by all peerconnections from the same JS.
SDPUtils.localCName = SDPUtils.generateIdentifier();

// Splits SDP into lines, dealing with both CRLF and LF.
SDPUtils.splitLines = function(blob) {
  return blob.trim().split('\n').map(function(line) {
    return line.trim();
  });
};
// Splits SDP into sessionpart and mediasections. Ensures CRLF.
SDPUtils.splitSections = function(blob) {
  var parts = blob.split('\nm=');
  return parts.map(function(part, index) {
    return (index > 0 ? 'm=' + part : part).trim() + '\r\n';
  });
};

// Returns lines that start with a certain prefix.
SDPUtils.matchPrefix = function(blob, prefix) {
  return SDPUtils.splitLines(blob).filter(function(line) {
    return line.indexOf(prefix) === 0;
  });
};

// Parses an ICE candidate line. Sample input:
// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
// rport 55996"
SDPUtils.parseCandidate = function(line) {
  var parts;
  // Parse both variants.
  if (line.indexOf('a=candidate:') === 0) {
    parts = line.substring(12).split(' ');
  } else {
    parts = line.substring(10).split(' ');
  }

  var candidate = {
    foundation: parts[0],
    component: parts[1],
    protocol: parts[2].toLowerCase(),
    priority: parseInt(parts[3], 10),
    ip: parts[4],
    port: parseInt(parts[5], 10),
    // skip parts[6] == 'typ'
    type: parts[7]
  };

  for (var i = 8; i < parts.length; i += 2) {
    switch (parts[i]) {
      case 'raddr':
        candidate.relatedAddress = parts[i + 1];
        break;
      case 'rport':
        candidate.relatedPort = parseInt(parts[i + 1], 10);
        break;
      case 'tcptype':
        candidate.tcpType = parts[i + 1];
        break;
      default: // extension handling, in particular ufrag
        candidate[parts[i]] = parts[i + 1];
        break;
    }
  }
  return candidate;
};

// Translates a candidate object into SDP candidate attribute.
SDPUtils.writeCandidate = function(candidate) {
  var sdp = [];
  sdp.push(candidate.foundation);
  sdp.push(candidate.component);
  sdp.push(candidate.protocol.toUpperCase());
  sdp.push(candidate.priority);
  sdp.push(candidate.ip);
  sdp.push(candidate.port);

  var type = candidate.type;
  sdp.push('typ');
  sdp.push(type);
  if (type !== 'host' && candidate.relatedAddress &&
      candidate.relatedPort) {
    sdp.push('raddr');
    sdp.push(candidate.relatedAddress); // was: relAddr
    sdp.push('rport');
    sdp.push(candidate.relatedPort); // was: relPort
  }
  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
    sdp.push('tcptype');
    sdp.push(candidate.tcpType);
  }
  return 'candidate:' + sdp.join(' ');
};

// Parses an ice-options line, returns an array of option tags.
// a=ice-options:foo bar
SDPUtils.parseIceOptions = function(line) {
  return line.substr(14).split(' ');
}

// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:
// a=rtpmap:111 opus/48000/2
SDPUtils.parseRtpMap = function(line) {
  var parts = line.substr(9).split(' ');
  var parsed = {
    payloadType: parseInt(parts.shift(), 10) // was: id
  };

  parts = parts[0].split('/');

  parsed.name = parts[0];
  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate
  // was: channels
  parsed.numChannels = parts.length === 3 ? parseInt(parts[2], 10) : 1;
  return parsed;
};

// Generate an a=rtpmap line from RTCRtpCodecCapability or
// RTCRtpCodecParameters.
SDPUtils.writeRtpMap = function(codec) {
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +
      (codec.numChannels !== 1 ? '/' + codec.numChannels : '') + '\r\n';
};

// Parses an a=extmap line (headerextension from RFC 5285). Sample input:
// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset
SDPUtils.parseExtmap = function(line) {
  var parts = line.substr(9).split(' ');
  return {
    id: parseInt(parts[0], 10),
    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',
    uri: parts[1]
  };
};

// Generates a=extmap line from RTCRtpHeaderExtensionParameters or
// RTCRtpHeaderExtension.
SDPUtils.writeExtmap = function(headerExtension) {
  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +
      (headerExtension.direction && headerExtension.direction !== 'sendrecv'
          ? '/' + headerExtension.direction
          : '') +
      ' ' + headerExtension.uri + '\r\n';
};

// Parses an ftmp line, returns dictionary. Sample input:
// a=fmtp:96 vbr=on;cng=on
// Also deals with vbr=on; cng=on
SDPUtils.parseFmtp = function(line) {
  var parsed = {};
  var kv;
  var parts = line.substr(line.indexOf(' ') + 1).split(';');
  for (var j = 0; j < parts.length; j++) {
    kv = parts[j].trim().split('=');
    parsed[kv[0].trim()] = kv[1];
  }
  return parsed;
};

// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeFmtp = function(codec) {
  var line = '';
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.parameters && Object.keys(codec.parameters).length) {
    var params = [];
    Object.keys(codec.parameters).forEach(function(param) {
      params.push(param + '=' + codec.parameters[param]);
    });
    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\r\n';
  }
  return line;
};

// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
// a=rtcp-fb:98 nack rpsi
SDPUtils.parseRtcpFb = function(line) {
  var parts = line.substr(line.indexOf(' ') + 1).split(' ');
  return {
    type: parts.shift(),
    parameter: parts.join(' ')
  };
};
// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeRtcpFb = function(codec) {
  var lines = '';
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
    // FIXME: special handling for trr-int?
    codec.rtcpFeedback.forEach(function(fb) {
      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +
      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +
          '\r\n';
    });
  }
  return lines;
};

// Parses an RFC 5576 ssrc media attribute. Sample input:
// a=ssrc:3735928559 cname:something
SDPUtils.parseSsrcMedia = function(line) {
  var sp = line.indexOf(' ');
  var parts = {
    ssrc: parseInt(line.substr(7, sp - 7), 10)
  };
  var colon = line.indexOf(':', sp);
  if (colon > -1) {
    parts.attribute = line.substr(sp + 1, colon - sp - 1);
    parts.value = line.substr(colon + 1);
  } else {
    parts.attribute = line.substr(sp + 1);
  }
  return parts;
};

// Extracts the MID (RFC 5888) from a media section.
// returns the MID or undefined if no mid line was found.
SDPUtils.getMid = function(mediaSection) {
  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];
  if (mid) {
    return mid.substr(6);
  }
}

SDPUtils.parseFingerprint = function(line) {
  var parts = line.substr(14).split(' ');
  return {
    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.
    value: parts[1]
  };
};

// Extracts DTLS parameters from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the fingerprint line as input. See also getIceParameters.
SDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {
  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
      'a=fingerprint:');
  // Note: a=setup line is ignored since we use the 'auto' role.
  // Note2: 'algorithm' is not case sensitive except in Edge.
  return {
    role: 'auto',
    fingerprints: lines.map(SDPUtils.parseFingerprint)
  };
};

// Serializes DTLS parameters to SDP.
SDPUtils.writeDtlsParameters = function(params, setupType) {
  var sdp = 'a=setup:' + setupType + '\r\n';
  params.fingerprints.forEach(function(fp) {
    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\r\n';
  });
  return sdp;
};
// Parses ICE information from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the ice-ufrag and ice-pwd lines as input.
SDPUtils.getIceParameters = function(mediaSection, sessionpart) {
  var lines = SDPUtils.splitLines(mediaSection);
  // Search in session part, too.
  lines = lines.concat(SDPUtils.splitLines(sessionpart));
  var iceParameters = {
    usernameFragment: lines.filter(function(line) {
      return line.indexOf('a=ice-ufrag:') === 0;
    })[0].substr(12),
    password: lines.filter(function(line) {
      return line.indexOf('a=ice-pwd:') === 0;
    })[0].substr(10)
  };
  return iceParameters;
};

// Serializes ICE parameters to SDP.
SDPUtils.writeIceParameters = function(params) {
  return 'a=ice-ufrag:' + params.usernameFragment + '\r\n' +
      'a=ice-pwd:' + params.password + '\r\n';
};

// Parses the SDP media section and returns RTCRtpParameters.
SDPUtils.parseRtpParameters = function(mediaSection) {
  var description = {
    codecs: [],
    headerExtensions: [],
    fecMechanisms: [],
    rtcp: []
  };
  var lines = SDPUtils.splitLines(mediaSection);
  var mline = lines[0].split(' ');
  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]
    var pt = mline[i];
    var rtpmapline = SDPUtils.matchPrefix(
        mediaSection, 'a=rtpmap:' + pt + ' ')[0];
    if (rtpmapline) {
      var codec = SDPUtils.parseRtpMap(rtpmapline);
      var fmtps = SDPUtils.matchPrefix(
          mediaSection, 'a=fmtp:' + pt + ' ');
      // Only the first a=fmtp:<pt> is considered.
      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
      codec.rtcpFeedback = SDPUtils.matchPrefix(
          mediaSection, 'a=rtcp-fb:' + pt + ' ')
        .map(SDPUtils.parseRtcpFb);
      description.codecs.push(codec);
      // parse FEC mechanisms from rtpmap lines.
      switch (codec.name.toUpperCase()) {
        case 'RED':
        case 'ULPFEC':
          description.fecMechanisms.push(codec.name.toUpperCase());
          break;
        default: // only RED and ULPFEC are recognized as FEC mechanisms.
          break;
      }
    }
  }
  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {
    description.headerExtensions.push(SDPUtils.parseExtmap(line));
  });
  // FIXME: parse rtcp.
  return description;
};

// Generates parts of the SDP media section describing the capabilities /
// parameters.
SDPUtils.writeRtpDescription = function(kind, caps) {
  var sdp = '';

  // Build the mline.
  sdp += 'm=' + kind + ' ';
  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.
  sdp += ' UDP/TLS/RTP/SAVPF ';
  sdp += caps.codecs.map(function(codec) {
    if (codec.preferredPayloadType !== undefined) {
      return codec.preferredPayloadType;
    }
    return codec.payloadType;
  }).join(' ') + '\r\n';

  sdp += 'c=IN IP4 0.0.0.0\r\n';
  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n';

  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
  caps.codecs.forEach(function(codec) {
    sdp += SDPUtils.writeRtpMap(codec);
    sdp += SDPUtils.writeFmtp(codec);
    sdp += SDPUtils.writeRtcpFb(codec);
  });
  var maxptime = 0;
  caps.codecs.forEach(function(codec) {
    if (codec.maxptime > maxptime) {
      maxptime = codec.maxptime;
    }
  });
  if (maxptime > 0) {
    sdp += 'a=maxptime:' + maxptime + '\r\n';
  }
  sdp += 'a=rtcp-mux\r\n';

  caps.headerExtensions.forEach(function(extension) {
    sdp += SDPUtils.writeExtmap(extension);
  });
  // FIXME: write fecMechanisms.
  return sdp;
};

// Parses the SDP media section and returns an array of
// RTCRtpEncodingParameters.
SDPUtils.parseRtpEncodingParameters = function(mediaSection) {
  var encodingParameters = [];
  var description = SDPUtils.parseRtpParameters(mediaSection);
  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;
  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;

  // filter a=ssrc:... cname:, ignore PlanB-msid
  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
  .map(function(line) {
    return SDPUtils.parseSsrcMedia(line);
  })
  .filter(function(parts) {
    return parts.attribute === 'cname';
  });
  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
  var secondarySsrc;

  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')
  .map(function(line) {
    var parts = line.split(' ');
    parts.shift();
    return parts.map(function(part) {
      return parseInt(part, 10);
    });
  });
  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
    secondarySsrc = flows[0][1];
  }

  description.codecs.forEach(function(codec) {
    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {
      var encParam = {
        ssrc: primarySsrc,
        codecPayloadType: parseInt(codec.parameters.apt, 10),
        rtx: {
          ssrc: secondarySsrc
        }
      };
      encodingParameters.push(encParam);
      if (hasRed) {
        encParam = JSON.parse(JSON.stringify(encParam));
        encParam.fec = {
          ssrc: secondarySsrc,
          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'
        };
        encodingParameters.push(encParam);
      }
    }
  });
  if (encodingParameters.length === 0 && primarySsrc) {
    encodingParameters.push({
      ssrc: primarySsrc
    });
  }

  // we support both b=AS and b=TIAS but interpret AS as TIAS.
  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');
  if (bandwidth.length) {
    if (bandwidth[0].indexOf('b=TIAS:') === 0) {
      bandwidth = parseInt(bandwidth[0].substr(7), 10);
    } else if (bandwidth[0].indexOf('b=AS:') === 0) {
      bandwidth = parseInt(bandwidth[0].substr(5), 10);
    }
    encodingParameters.forEach(function(params) {
      params.maxBitrate = bandwidth;
    });
  }
  return encodingParameters;
};

// parses http://draft.ortc.org/#rtcrtcpparameters*
SDPUtils.parseRtcpParameters = function(mediaSection) {
  var rtcpParameters = {};

  var cname;
  // Gets the first SSRC. Note that with RTX there might be multiple
  // SSRCs.
  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
      .map(function(line) {
        return SDPUtils.parseSsrcMedia(line);
      })
      .filter(function(obj) {
        return obj.attribute === 'cname';
      })[0];
  if (remoteSsrc) {
    rtcpParameters.cname = remoteSsrc.value;
    rtcpParameters.ssrc = remoteSsrc.ssrc;
  }

  // Edge uses the compound attribute instead of reducedSize
  // compound is !reducedSize
  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');
  rtcpParameters.reducedSize = rsize.length > 0;
  rtcpParameters.compound = rsize.length === 0;

  // parses the rtcp-mux attrіbute.
  // Note that Edge does not support unmuxed RTCP.
  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');
  rtcpParameters.mux = mux.length > 0;

  return rtcpParameters;
};

// parses either a=msid: or a=ssrc:... msid lines and returns
// the id of the MediaStream and MediaStreamTrack.
SDPUtils.parseMsid = function(mediaSection) {
  var parts;
  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');
  if (spec.length === 1) {
    parts = spec[0].substr(7).split(' ');
    return {stream: parts[0], track: parts[1]};
  }
  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
  .map(function(line) {
    return SDPUtils.parseSsrcMedia(line);
  })
  .filter(function(parts) {
    return parts.attribute === 'msid';
  });
  if (planB.length > 0) {
    parts = planB[0].value.split(' ');
    return {stream: parts[0], track: parts[1]};
  }
};

SDPUtils.writeSessionBoilerplate = function() {
  // FIXME: sess-id should be an NTP timestamp.
  return 'v=0\r\n' +
      'o=thisisadapterortc 8169639915646943137 2 IN IP4 127.0.0.1\r\n' +
      's=-\r\n' +
      't=0 0\r\n';
};

SDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {
  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);

  // Map ICE parameters (ufrag, pwd) to SDP.
  sdp += SDPUtils.writeIceParameters(
      transceiver.iceGatherer.getLocalParameters());

  // Map DTLS parameters to SDP.
  sdp += SDPUtils.writeDtlsParameters(
      transceiver.dtlsTransport.getLocalParameters(),
      type === 'offer' ? 'actpass' : 'active');

  sdp += 'a=mid:' + transceiver.mid + '\r\n';

  if (transceiver.direction) {
    sdp += 'a=' + transceiver.direction + '\r\n';
  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {
    sdp += 'a=sendrecv\r\n';
  } else if (transceiver.rtpSender) {
    sdp += 'a=sendonly\r\n';
  } else if (transceiver.rtpReceiver) {
    sdp += 'a=recvonly\r\n';
  } else {
    sdp += 'a=inactive\r\n';
  }

  if (transceiver.rtpSender) {
    // spec.
    var msid = 'msid:' + stream.id + ' ' +
        transceiver.rtpSender.track.id + '\r\n';
    sdp += 'a=' + msid;

    // for Chrome.
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
        ' ' + msid;
    if (transceiver.sendEncodingParameters[0].rtx) {
      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
          ' ' + msid;
      sdp += 'a=ssrc-group:FID ' +
          transceiver.sendEncodingParameters[0].ssrc + ' ' +
          transceiver.sendEncodingParameters[0].rtx.ssrc +
          '\r\n';
    }
  }
  // FIXME: this should be written by writeRtpDescription.
  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
      ' cname:' + SDPUtils.localCName + '\r\n';
  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
        ' cname:' + SDPUtils.localCName + '\r\n';
  }
  return sdp;
};

// Gets the direction from the mediaSection or the sessionpart.
SDPUtils.getDirection = function(mediaSection, sessionpart) {
  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
  var lines = SDPUtils.splitLines(mediaSection);
  for (var i = 0; i < lines.length; i++) {
    switch (lines[i]) {
      case 'a=sendrecv':
      case 'a=sendonly':
      case 'a=recvonly':
      case 'a=inactive':
        return lines[i].substr(2);
      default:
        // FIXME: What should happen here?
    }
  }
  if (sessionpart) {
    return SDPUtils.getDirection(sessionpart);
  }
  return 'sendrecv';
};

SDPUtils.getKind = function(mediaSection) {
  var lines = SDPUtils.splitLines(mediaSection);
  var mline = lines[0].split(' ');
  return mline[0].substr(2);
};

SDPUtils.isRejected = function(mediaSection) {
  return mediaSection.split(' ', 2)[1] === '0';
};

// Expose public methods.
module.exports = SDPUtils;

},{}],"../node_modules/webrtc-adapter/src/js/edge/getusermedia.js":[function(require,module,exports) {
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';

// Expose public methods.
module.exports = function() {
  var shimError_ = function(e) {
    return {
      name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,
      message: e.message,
      constraint: e.constraint,
      toString: function() {
        return this.name;
      }
    };
  };

  // getUserMedia error shim.
  var origGetUserMedia = navigator.mediaDevices.getUserMedia.
      bind(navigator.mediaDevices);
  navigator.mediaDevices.getUserMedia = function(c) {
    return origGetUserMedia(c).catch(function(e) {
      return Promise.reject(shimError_(e));
    });
  };
};

},{}],"../node_modules/webrtc-adapter/src/js/edge/edge_shim.js":[function(require,module,exports) {
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';

var SDPUtils = require('sdp');
var browserDetails = require('../utils').browserDetails;

var edgeShim = {
  shimPeerConnection: function() {
    if (window.RTCIceGatherer) {
      // ORTC defines an RTCIceCandidate object but no constructor.
      // Not implemented in Edge.
      if (!window.RTCIceCandidate) {
        window.RTCIceCandidate = function(args) {
          return args;
        };
      }
      // ORTC does not have a session description object but
      // other browsers (i.e. Chrome) that will support both PC and ORTC
      // in the future might have this defined already.
      if (!window.RTCSessionDescription) {
        window.RTCSessionDescription = function(args) {
          return args;
        };
      }
      // this adds an additional event listener to MediaStrackTrack that signals
      // when a tracks enabled property was changed.
      var origMSTEnabled = Object.getOwnPropertyDescriptor(
          MediaStreamTrack.prototype, 'enabled');
      Object.defineProperty(MediaStreamTrack.prototype, 'enabled', {
        set: function(value) {
          origMSTEnabled.set.call(this, value);
          var ev = new Event('enabled');
          ev.enabled = value;
          this.dispatchEvent(ev);
        }
      });
    }

    window.RTCPeerConnection = function(config) {
      var self = this;

      var _eventTarget = document.createDocumentFragment();
      ['addEventListener', 'removeEventListener', 'dispatchEvent']
          .forEach(function(method) {
            self[method] = _eventTarget[method].bind(_eventTarget);
          });

      this.onicecandidate = null;
      this.onaddstream = null;
      this.ontrack = null;
      this.onremovestream = null;
      this.onsignalingstatechange = null;
      this.oniceconnectionstatechange = null;
      this.onnegotiationneeded = null;
      this.ondatachannel = null;

      this.localStreams = [];
      this.remoteStreams = [];
      this.getLocalStreams = function() {
        return self.localStreams;
      };
      this.getRemoteStreams = function() {
        return self.remoteStreams;
      };

      this.localDescription = new RTCSessionDescription({
        type: '',
        sdp: ''
      });
      this.remoteDescription = new RTCSessionDescription({
        type: '',
        sdp: ''
      });
      this.signalingState = 'stable';
      this.iceConnectionState = 'new';
      this.iceGatheringState = 'new';

      this.iceOptions = {
        gatherPolicy: 'all',
        iceServers: []
      };
      if (config && config.iceTransportPolicy) {
        switch (config.iceTransportPolicy) {
          case 'all':
          case 'relay':
            this.iceOptions.gatherPolicy = config.iceTransportPolicy;
            break;
          case 'none':
            // FIXME: remove once implementation and spec have added this.
            throw new TypeError('iceTransportPolicy "none" not supported');
          default:
            // don't set iceTransportPolicy.
            break;
        }
      }
      this.usingBundle = config && config.bundlePolicy === 'max-bundle';

      if (config && config.iceServers) {
        // Edge does not like
        // 1) stun:
        // 2) turn: that does not have all of turn:host:port?transport=udp
        // 3) turn: with ipv6 addresses
        var iceServers = JSON.parse(JSON.stringify(config.iceServers));
        this.iceOptions.iceServers = iceServers.filter(function(server) {
          if (server && server.urls) {
            var urls = server.urls;
            if (typeof urls === 'string') {
              urls = [urls];
            }
            urls = urls.filter(function(url) {
              return (url.indexOf('turn:') === 0 &&
                  url.indexOf('transport=udp') !== -1 &&
                  url.indexOf('turn:[') === -1) ||
                  (url.indexOf('stun:') === 0 &&
                    browserDetails.version >= 14393);
            })[0];
            return !!urls;
          }
          return false;
        });
      }
      this._config = config;

      // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...
      // everything that is needed to describe a SDP m-line.
      this.transceivers = [];

      // since the iceGatherer is currently created in createOffer but we
      // must not emit candidates until after setLocalDescription we buffer
      // them in this array.
      this._localIceCandidatesBuffer = [];
    };

    window.RTCPeerConnection.prototype._emitBufferedCandidates = function() {
      var self = this;
      var sections = SDPUtils.splitSections(self.localDescription.sdp);
      // FIXME: need to apply ice candidates in a way which is async but
      // in-order
      this._localIceCandidatesBuffer.forEach(function(event) {
        var end = !event.candidate || Object.keys(event.candidate).length === 0;
        if (end) {
          for (var j = 1; j < sections.length; j++) {
            if (sections[j].indexOf('\r\na=end-of-candidates\r\n') === -1) {
              sections[j] += 'a=end-of-candidates\r\n';
            }
          }
        } else if (event.candidate.candidate.indexOf('typ endOfCandidates')
            === -1) {
          sections[event.candidate.sdpMLineIndex + 1] +=
              'a=' + event.candidate.candidate + '\r\n';
        }
        self.localDescription.sdp = sections.join('');
        self.dispatchEvent(event);
        if (self.onicecandidate !== null) {
          self.onicecandidate(event);
        }
        if (!event.candidate && self.iceGatheringState !== 'complete') {
          var complete = self.transceivers.every(function(transceiver) {
            return transceiver.iceGatherer &&
                transceiver.iceGatherer.state === 'completed';
          });
          if (complete) {
            self.iceGatheringState = 'complete';
          }
        }
      });
      this._localIceCandidatesBuffer = [];
    };

    window.RTCPeerConnection.prototype.getConfiguration = function() {
      return this._config;
    };

    window.RTCPeerConnection.prototype.addStream = function(stream) {
      // Clone is necessary for local demos mostly, attaching directly
      // to two different senders does not work (build 10547).
      var clonedStream = stream.clone();
      stream.getTracks().forEach(function(track, idx) {
        var clonedTrack = clonedStream.getTracks()[idx];
        track.addEventListener('enabled', function(event) {
          clonedTrack.enabled = event.enabled;
        });
      });
      this.localStreams.push(clonedStream);
      this._maybeFireNegotiationNeeded();
    };

    window.RTCPeerConnection.prototype.removeStream = function(stream) {
      var idx = this.localStreams.indexOf(stream);
      if (idx > -1) {
        this.localStreams.splice(idx, 1);
        this._maybeFireNegotiationNeeded();
      }
    };

    window.RTCPeerConnection.prototype.getSenders = function() {
      return this.transceivers.filter(function(transceiver) {
        return !!transceiver.rtpSender;
      })
      .map(function(transceiver) {
        return transceiver.rtpSender;
      });
    };

    window.RTCPeerConnection.prototype.getReceivers = function() {
      return this.transceivers.filter(function(transceiver) {
        return !!transceiver.rtpReceiver;
      })
      .map(function(transceiver) {
        return transceiver.rtpReceiver;
      });
    };

    // Determines the intersection of local and remote capabilities.
    window.RTCPeerConnection.prototype._getCommonCapabilities =
        function(localCapabilities, remoteCapabilities) {
          var commonCapabilities = {
            codecs: [],
            headerExtensions: [],
            fecMechanisms: []
          };
          localCapabilities.codecs.forEach(function(lCodec) {
            for (var i = 0; i < remoteCapabilities.codecs.length; i++) {
              var rCodec = remoteCapabilities.codecs[i];
              if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&
                  lCodec.clockRate === rCodec.clockRate) {
                // number of channels is the highest common number of channels
                rCodec.numChannels = Math.min(lCodec.numChannels,
                    rCodec.numChannels);
                // push rCodec so we reply with offerer payload type
                commonCapabilities.codecs.push(rCodec);

                // determine common feedback mechanisms
                rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {
                  for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {
                    if (lCodec.rtcpFeedback[j].type === fb.type &&
                        lCodec.rtcpFeedback[j].parameter === fb.parameter) {
                      return true;
                    }
                  }
                  return false;
                });
                // FIXME: also need to determine .parameters
                //  see https://github.com/openpeer/ortc/issues/569
                break;
              }
            }
          });

          localCapabilities.headerExtensions
              .forEach(function(lHeaderExtension) {
                for (var i = 0; i < remoteCapabilities.headerExtensions.length;
                     i++) {
                  var rHeaderExtension = remoteCapabilities.headerExtensions[i];
                  if (lHeaderExtension.uri === rHeaderExtension.uri) {
                    commonCapabilities.headerExtensions.push(rHeaderExtension);
                    break;
                  }
                }
              });

          // FIXME: fecMechanisms
          return commonCapabilities;
        };

    // Create ICE gatherer, ICE transport and DTLS transport.
    window.RTCPeerConnection.prototype._createIceAndDtlsTransports =
        function(mid, sdpMLineIndex) {
          var self = this;
          var iceGatherer = new RTCIceGatherer(self.iceOptions);
          var iceTransport = new RTCIceTransport(iceGatherer);
          iceGatherer.onlocalcandidate = function(evt) {
            var event = new Event('icecandidate');
            event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};

            var cand = evt.candidate;
            var end = !cand || Object.keys(cand).length === 0;
            // Edge emits an empty object for RTCIceCandidateComplete‥
            if (end) {
              // polyfill since RTCIceGatherer.state is not implemented in
              // Edge 10547 yet.
              if (iceGatherer.state === undefined) {
                iceGatherer.state = 'completed';
              }

              // Emit a candidate with type endOfCandidates to make the samples
              // work. Edge requires addIceCandidate with this empty candidate
              // to start checking. The real solution is to signal
              // end-of-candidates to the other side when getting the null
              // candidate but some apps (like the samples) don't do that.
              event.candidate.candidate =
                  'candidate:1 1 udp 1 0.0.0.0 9 typ endOfCandidates';
            } else {
              // RTCIceCandidate doesn't have a component, needs to be added
              cand.component = iceTransport.component === 'RTCP' ? 2 : 1;
              event.candidate.candidate = SDPUtils.writeCandidate(cand);
            }

            // update local description.
            var sections = SDPUtils.splitSections(self.localDescription.sdp);
            if (event.candidate.candidate.indexOf('typ endOfCandidates')
                === -1) {
              sections[event.candidate.sdpMLineIndex + 1] +=
                  'a=' + event.candidate.candidate + '\r\n';
            } else {
              sections[event.candidate.sdpMLineIndex + 1] +=
                  'a=end-of-candidates\r\n';
            }
            self.localDescription.sdp = sections.join('');

            var complete = self.transceivers.every(function(transceiver) {
              return transceiver.iceGatherer &&
                  transceiver.iceGatherer.state === 'completed';
            });

            // Emit candidate if localDescription is set.
            // Also emits null candidate when all gatherers are complete.
            switch (self.iceGatheringState) {
              case 'new':
                self._localIceCandidatesBuffer.push(event);
                if (end && complete) {
                  self._localIceCandidatesBuffer.push(
                      new Event('icecandidate'));
                }
                break;
              case 'gathering':
                self._emitBufferedCandidates();
                self.dispatchEvent(event);
                if (self.onicecandidate !== null) {
                  self.onicecandidate(event);
                }
                if (complete) {
                  self.dispatchEvent(new Event('icecandidate'));
                  if (self.onicecandidate !== null) {
                    self.onicecandidate(new Event('icecandidate'));
                  }
                  self.iceGatheringState = 'complete';
                }
                break;
              case 'complete':
                // should not happen... currently!
                break;
              default: // no-op.
                break;
            }
          };
          iceTransport.onicestatechange = function() {
            self._updateConnectionState();
          };

          var dtlsTransport = new RTCDtlsTransport(iceTransport);
          dtlsTransport.ondtlsstatechange = function() {
            self._updateConnectionState();
          };
          dtlsTransport.onerror = function() {
            // onerror does not set state to failed by itself.
            dtlsTransport.state = 'failed';
            self._updateConnectionState();
          };

          return {
            iceGatherer: iceGatherer,
            iceTransport: iceTransport,
            dtlsTransport: dtlsTransport
          };
        };

    // Start the RTP Sender and Receiver for a transceiver.
    window.RTCPeerConnection.prototype._transceive = function(transceiver,
        send, recv) {
      var params = this._getCommonCapabilities(transceiver.localCapabilities,
          transceiver.remoteCapabilities);
      if (send && transceiver.rtpSender) {
        params.encodings = transceiver.sendEncodingParameters;
        params.rtcp = {
          cname: SDPUtils.localCName
        };
        if (transceiver.recvEncodingParameters.length) {
          params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;
        }
        transceiver.rtpSender.send(params);
      }
      if (recv && transceiver.rtpReceiver) {
        // remove RTX field in Edge 14942
        if (transceiver.kind === 'video'
            && transceiver.recvEncodingParameters) {
          transceiver.recvEncodingParameters.forEach(function(p) {
            delete p.rtx;
          });
        }
        params.encodings = transceiver.recvEncodingParameters;
        params.rtcp = {
          cname: transceiver.cname
        };
        if (transceiver.sendEncodingParameters.length) {
          params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;
        }
        transceiver.rtpReceiver.receive(params);
      }
    };

    window.RTCPeerConnection.prototype.setLocalDescription =
        function(description) {
          var self = this;
          var sections;
          var sessionpart;
          if (description.type === 'offer') {
            // FIXME: What was the purpose of this empty if statement?
            // if (!this._pendingOffer) {
            // } else {
            if (this._pendingOffer) {
              // VERY limited support for SDP munging. Limited to:
              // * changing the order of codecs
              sections = SDPUtils.splitSections(description.sdp);
              sessionpart = sections.shift();
              sections.forEach(function(mediaSection, sdpMLineIndex) {
                var caps = SDPUtils.parseRtpParameters(mediaSection);
                self._pendingOffer[sdpMLineIndex].localCapabilities = caps;
              });
              this.transceivers = this._pendingOffer;
              delete this._pendingOffer;
            }
          } else if (description.type === 'answer') {
            sections = SDPUtils.splitSections(self.remoteDescription.sdp);
            sessionpart = sections.shift();
            var isIceLite = SDPUtils.matchPrefix(sessionpart,
                'a=ice-lite').length > 0;
            sections.forEach(function(mediaSection, sdpMLineIndex) {
              var transceiver = self.transceivers[sdpMLineIndex];
              var iceGatherer = transceiver.iceGatherer;
              var iceTransport = transceiver.iceTransport;
              var dtlsTransport = transceiver.dtlsTransport;
              var localCapabilities = transceiver.localCapabilities;
              var remoteCapabilities = transceiver.remoteCapabilities;

              var rejected = mediaSection.split('\n', 1)[0]
                  .split(' ', 2)[1] === '0';

              if (!rejected && !transceiver.isDatachannel) {
                var remoteIceParameters = SDPUtils.getIceParameters(
                    mediaSection, sessionpart);
                if (isIceLite) {
                  var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')
                  .map(function(cand) {
                    return SDPUtils.parseCandidate(cand);
                  })
                  .filter(function(cand) {
                    return cand.component === '1';
                  });
                  // ice-lite only includes host candidates in the SDP so we can
                  // use setRemoteCandidates (which implies an
                  // RTCIceCandidateComplete)
                  if (cands.length) {
                    iceTransport.setRemoteCandidates(cands);
                  }
                }
                var remoteDtlsParameters = SDPUtils.getDtlsParameters(
                    mediaSection, sessionpart);
                if (isIceLite) {
                  remoteDtlsParameters.role = 'server';
                }

                if (!self.usingBundle || sdpMLineIndex === 0) {
                  iceTransport.start(iceGatherer, remoteIceParameters,
                      isIceLite ? 'controlling' : 'controlled');
                  dtlsTransport.start(remoteDtlsParameters);
                }

                // Calculate intersection of capabilities.
                var params = self._getCommonCapabilities(localCapabilities,
                    remoteCapabilities);

                // Start the RTCRtpSender. The RTCRtpReceiver for this
                // transceiver has already been started in setRemoteDescription.
                self._transceive(transceiver,
                    params.codecs.length > 0,
                    false);
              }
            });
          }

          this.localDescription = {
            type: description.type,
            sdp: description.sdp
          };
          switch (description.type) {
            case 'offer':
              this._updateSignalingState('have-local-offer');
              break;
            case 'answer':
              this._updateSignalingState('stable');
              break;
            default:
              throw new TypeError('unsupported type "' + description.type +
                  '"');
          }

          // If a success callback was provided, emit ICE candidates after it
          // has been executed. Otherwise, emit callback after the Promise is
          // resolved.
          var hasCallback = arguments.length > 1 &&
            typeof arguments[1] === 'function';
          if (hasCallback) {
            var cb = arguments[1];
            window.setTimeout(function() {
              cb();
              if (self.iceGatheringState === 'new') {
                self.iceGatheringState = 'gathering';
              }
              self._emitBufferedCandidates();
            }, 0);
          }
          var p = Promise.resolve();
          p.then(function() {
            if (!hasCallback) {
              if (self.iceGatheringState === 'new') {
                self.iceGatheringState = 'gathering';
              }
              // Usually candidates will be emitted earlier.
              window.setTimeout(self._emitBufferedCandidates.bind(self), 500);
            }
          });
          return p;
        };

    window.RTCPeerConnection.prototype.setRemoteDescription =
        function(description) {
          var self = this;
          var stream = new MediaStream();
          var receiverList = [];
          var sections = SDPUtils.splitSections(description.sdp);
          var sessionpart = sections.shift();
          var isIceLite = SDPUtils.matchPrefix(sessionpart,
              'a=ice-lite').length > 0;
          this.usingBundle = SDPUtils.matchPrefix(sessionpart,
              'a=group:BUNDLE ').length > 0;
          sections.forEach(function(mediaSection, sdpMLineIndex) {
            var lines = SDPUtils.splitLines(mediaSection);
            var mline = lines[0].substr(2).split(' ');
            var kind = mline[0];
            var rejected = mline[1] === '0';
            var direction = SDPUtils.getDirection(mediaSection, sessionpart);

            var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:');
            if (mid.length) {
              mid = mid[0].substr(6);
            } else {
              mid = SDPUtils.generateIdentifier();
            }

            // Reject datachannels which are not implemented yet.
            if (kind === 'application' && mline[2] === 'DTLS/SCTP') {
              self.transceivers[sdpMLineIndex] = {
                mid: mid,
                isDatachannel: true
              };
              return;
            }

            var transceiver;
            var iceGatherer;
            var iceTransport;
            var dtlsTransport;
            var rtpSender;
            var rtpReceiver;
            var sendEncodingParameters;
            var recvEncodingParameters;
            var localCapabilities;

            var track;
            // FIXME: ensure the mediaSection has rtcp-mux set.
            var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);
            var remoteIceParameters;
            var remoteDtlsParameters;
            if (!rejected) {
              remoteIceParameters = SDPUtils.getIceParameters(mediaSection,
                  sessionpart);
              remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,
                  sessionpart);
              remoteDtlsParameters.role = 'client';
            }
            recvEncodingParameters =
                SDPUtils.parseRtpEncodingParameters(mediaSection);

            var cname;
            // Gets the first SSRC. Note that with RTX there might be multiple
            // SSRCs.
            var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
                .map(function(line) {
                  return SDPUtils.parseSsrcMedia(line);
                })
                .filter(function(obj) {
                  return obj.attribute === 'cname';
                })[0];
            if (remoteSsrc) {
              cname = remoteSsrc.value;
            }

            var isComplete = SDPUtils.matchPrefix(mediaSection,
                'a=end-of-candidates', sessionpart).length > 0;
            var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')
                .map(function(cand) {
                  return SDPUtils.parseCandidate(cand);
                })
                .filter(function(cand) {
                  return cand.component === '1';
                });
            if (description.type === 'offer' && !rejected) {
              var transports = self.usingBundle && sdpMLineIndex > 0 ? {
                iceGatherer: self.transceivers[0].iceGatherer,
                iceTransport: self.transceivers[0].iceTransport,
                dtlsTransport: self.transceivers[0].dtlsTransport
              } : self._createIceAndDtlsTransports(mid, sdpMLineIndex);

              if (isComplete) {
                transports.iceTransport.setRemoteCandidates(cands);
              }

              localCapabilities = RTCRtpReceiver.getCapabilities(kind);

              // filter RTX until additional stuff needed for RTX is implemented
              // in adapter.js
              localCapabilities.codecs = localCapabilities.codecs.filter(
                  function(codec) {
                    return codec.name !== 'rtx';
                  });

              sendEncodingParameters = [{
                ssrc: (2 * sdpMLineIndex + 2) * 1001
              }];

              rtpReceiver = new RTCRtpReceiver(transports.dtlsTransport, kind);

              track = rtpReceiver.track;
              receiverList.push([track, rtpReceiver]);
              // FIXME: not correct when there are multiple streams but that is
              // not currently supported in this shim.
              stream.addTrack(track);

              // FIXME: look at direction.
              if (self.localStreams.length > 0 &&
                  self.localStreams[0].getTracks().length >= sdpMLineIndex) {
                var localTrack;
                if (kind === 'audio') {
                  localTrack = self.localStreams[0].getAudioTracks()[0];
                } else if (kind === 'video') {
                  localTrack = self.localStreams[0].getVideoTracks()[0];
                }
                if (localTrack) {
                  rtpSender = new RTCRtpSender(localTrack,
                      transports.dtlsTransport);
                }
              }

              self.transceivers[sdpMLineIndex] = {
                iceGatherer: transports.iceGatherer,
                iceTransport: transports.iceTransport,
                dtlsTransport: transports.dtlsTransport,
                localCapabilities: localCapabilities,
                remoteCapabilities: remoteCapabilities,
                rtpSender: rtpSender,
                rtpReceiver: rtpReceiver,
                kind: kind,
                mid: mid,
                cname: cname,
                sendEncodingParameters: sendEncodingParameters,
                recvEncodingParameters: recvEncodingParameters
              };
              // Start the RTCRtpReceiver now. The RTPSender is started in
              // setLocalDescription.
              self._transceive(self.transceivers[sdpMLineIndex],
                  false,
                  direction === 'sendrecv' || direction === 'sendonly');
            } else if (description.type === 'answer' && !rejected) {
              transceiver = self.transceivers[sdpMLineIndex];
              iceGatherer = transceiver.iceGatherer;
              iceTransport = transceiver.iceTransport;
              dtlsTransport = transceiver.dtlsTransport;
              rtpSender = transceiver.rtpSender;
              rtpReceiver = transceiver.rtpReceiver;
              sendEncodingParameters = transceiver.sendEncodingParameters;
              localCapabilities = transceiver.localCapabilities;

              self.transceivers[sdpMLineIndex].recvEncodingParameters =
                  recvEncodingParameters;
              self.transceivers[sdpMLineIndex].remoteCapabilities =
                  remoteCapabilities;
              self.transceivers[sdpMLineIndex].cname = cname;

              if ((isIceLite || isComplete) && cands.length) {
                iceTransport.setRemoteCandidates(cands);
              }
              if (!self.usingBundle || sdpMLineIndex === 0) {
                iceTransport.start(iceGatherer, remoteIceParameters,
                    'controlling');
                dtlsTransport.start(remoteDtlsParameters);
              }

              self._transceive(transceiver,
                  direction === 'sendrecv' || direction === 'recvonly',
                  direction === 'sendrecv' || direction === 'sendonly');

              if (rtpReceiver &&
                  (direction === 'sendrecv' || direction === 'sendonly')) {
                track = rtpReceiver.track;
                receiverList.push([track, rtpReceiver]);
                stream.addTrack(track);
              } else {
                // FIXME: actually the receiver should be created later.
                delete transceiver.rtpReceiver;
              }
            }
          });

          this.remoteDescription = {
            type: description.type,
            sdp: description.sdp
          };
          switch (description.type) {
            case 'offer':
              this._updateSignalingState('have-remote-offer');
              break;
            case 'answer':
              this._updateSignalingState('stable');
              break;
            default:
              throw new TypeError('unsupported type "' + description.type +
                  '"');
          }
          if (stream.getTracks().length) {
            self.remoteStreams.push(stream);
            window.setTimeout(function() {
              var event = new Event('addstream');
              event.stream = stream;
              self.dispatchEvent(event);
              if (self.onaddstream !== null) {
                window.setTimeout(function() {
                  self.onaddstream(event);
                }, 0);
              }

              receiverList.forEach(function(item) {
                var track = item[0];
                var receiver = item[1];
                var trackEvent = new Event('track');
                trackEvent.track = track;
                trackEvent.receiver = receiver;
                trackEvent.streams = [stream];
                self.dispatchEvent(event);
                if (self.ontrack !== null) {
                  window.setTimeout(function() {
                    self.ontrack(trackEvent);
                  }, 0);
                }
              });
            }, 0);
          }
          if (arguments.length > 1 && typeof arguments[1] === 'function') {
            window.setTimeout(arguments[1], 0);
          }
          return Promise.resolve();
        };

    window.RTCPeerConnection.prototype.close = function() {
      this.transceivers.forEach(function(transceiver) {
        /* not yet
        if (transceiver.iceGatherer) {
          transceiver.iceGatherer.close();
        }
        */
        if (transceiver.iceTransport) {
          transceiver.iceTransport.stop();
        }
        if (transceiver.dtlsTransport) {
          transceiver.dtlsTransport.stop();
        }
        if (transceiver.rtpSender) {
          transceiver.rtpSender.stop();
        }
        if (transceiver.rtpReceiver) {
          transceiver.rtpReceiver.stop();
        }
      });
      // FIXME: clean up tracks, local streams, remote streams, etc
      this._updateSignalingState('closed');
    };

    // Update the signaling state.
    window.RTCPeerConnection.prototype._updateSignalingState =
        function(newState) {
          this.signalingState = newState;
          var event = new Event('signalingstatechange');
          this.dispatchEvent(event);
          if (this.onsignalingstatechange !== null) {
            this.onsignalingstatechange(event);
          }
        };

    // Determine whether to fire the negotiationneeded event.
    window.RTCPeerConnection.prototype._maybeFireNegotiationNeeded =
        function() {
          // Fire away (for now).
          var event = new Event('negotiationneeded');
          this.dispatchEvent(event);
          if (this.onnegotiationneeded !== null) {
            this.onnegotiationneeded(event);
          }
        };

    // Update the connection state.
    window.RTCPeerConnection.prototype._updateConnectionState = function() {
      var self = this;
      var newState;
      var states = {
        'new': 0,
        closed: 0,
        connecting: 0,
        checking: 0,
        connected: 0,
        completed: 0,
        failed: 0
      };
      this.transceivers.forEach(function(transceiver) {
        states[transceiver.iceTransport.state]++;
        states[transceiver.dtlsTransport.state]++;
      });
      // ICETransport.completed and connected are the same for this purpose.
      states.connected += states.completed;

      newState = 'new';
      if (states.failed > 0) {
        newState = 'failed';
      } else if (states.connecting > 0 || states.checking > 0) {
        newState = 'connecting';
      } else if (states.disconnected > 0) {
        newState = 'disconnected';
      } else if (states.new > 0) {
        newState = 'new';
      } else if (states.connected > 0 || states.completed > 0) {
        newState = 'connected';
      }

      if (newState !== self.iceConnectionState) {
        self.iceConnectionState = newState;
        var event = new Event('iceconnectionstatechange');
        this.dispatchEvent(event);
        if (this.oniceconnectionstatechange !== null) {
          this.oniceconnectionstatechange(event);
        }
      }
    };

    window.RTCPeerConnection.prototype.createOffer = function() {
      var self = this;
      if (this._pendingOffer) {
        throw new Error('createOffer called while there is a pending offer.');
      }
      var offerOptions;
      if (arguments.length === 1 && typeof arguments[0] !== 'function') {
        offerOptions = arguments[0];
      } else if (arguments.length === 3) {
        offerOptions = arguments[2];
      }

      var tracks = [];
      var numAudioTracks = 0;
      var numVideoTracks = 0;
      // Default to sendrecv.
      if (this.localStreams.length) {
        numAudioTracks = this.localStreams[0].getAudioTracks().length;
        numVideoTracks = this.localStreams[0].getVideoTracks().length;
      }
      // Determine number of audio and video tracks we need to send/recv.
      if (offerOptions) {
        // Reject Chrome legacy constraints.
        if (offerOptions.mandatory || offerOptions.optional) {
          throw new TypeError(
              'Legacy mandatory/optional constraints not supported.');
        }
        if (offerOptions.offerToReceiveAudio !== undefined) {
          numAudioTracks = offerOptions.offerToReceiveAudio;
        }
        if (offerOptions.offerToReceiveVideo !== undefined) {
          numVideoTracks = offerOptions.offerToReceiveVideo;
        }
      }
      if (this.localStreams.length) {
        // Push local streams.
        this.localStreams[0].getTracks().forEach(function(track) {
          tracks.push({
            kind: track.kind,
            track: track,
            wantReceive: track.kind === 'audio' ?
                numAudioTracks > 0 : numVideoTracks > 0
          });
          if (track.kind === 'audio') {
            numAudioTracks--;
          } else if (track.kind === 'video') {
            numVideoTracks--;
          }
        });
      }
      // Create M-lines for recvonly streams.
      while (numAudioTracks > 0 || numVideoTracks > 0) {
        if (numAudioTracks > 0) {
          tracks.push({
            kind: 'audio',
            wantReceive: true
          });
          numAudioTracks--;
        }
        if (numVideoTracks > 0) {
          tracks.push({
            kind: 'video',
            wantReceive: true
          });
          numVideoTracks--;
        }
      }

      var sdp = SDPUtils.writeSessionBoilerplate();
      var transceivers = [];
      tracks.forEach(function(mline, sdpMLineIndex) {
        // For each track, create an ice gatherer, ice transport,
        // dtls transport, potentially rtpsender and rtpreceiver.
        var track = mline.track;
        var kind = mline.kind;
        var mid = SDPUtils.generateIdentifier();

        var transports = self.usingBundle && sdpMLineIndex > 0 ? {
          iceGatherer: transceivers[0].iceGatherer,
          iceTransport: transceivers[0].iceTransport,
          dtlsTransport: transceivers[0].dtlsTransport
        } : self._createIceAndDtlsTransports(mid, sdpMLineIndex);

        var localCapabilities = RTCRtpSender.getCapabilities(kind);
        // filter RTX until additional stuff needed for RTX is implemented
        // in adapter.js
        localCapabilities.codecs = localCapabilities.codecs.filter(
            function(codec) {
              return codec.name !== 'rtx';
            });
        localCapabilities.codecs.forEach(function(codec) {
          // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552
          // by adding level-asymmetry-allowed=1
          if (codec.name === 'H264' &&
              codec.parameters['level-asymmetry-allowed'] === undefined) {
            codec.parameters['level-asymmetry-allowed'] = '1';
          }
        });

        var rtpSender;
        var rtpReceiver;

        // generate an ssrc now, to be used later in rtpSender.send
        var sendEncodingParameters = [{
          ssrc: (2 * sdpMLineIndex + 1) * 1001
        }];
        if (track) {
          rtpSender = new RTCRtpSender(track, transports.dtlsTransport);
        }

        if (mline.wantReceive) {
          rtpReceiver = new RTCRtpReceiver(transports.dtlsTransport, kind);
        }

        transceivers[sdpMLineIndex] = {
          iceGatherer: transports.iceGatherer,
          iceTransport: transports.iceTransport,
          dtlsTransport: transports.dtlsTransport,
          localCapabilities: localCapabilities,
          remoteCapabilities: null,
          rtpSender: rtpSender,
          rtpReceiver: rtpReceiver,
          kind: kind,
          mid: mid,
          sendEncodingParameters: sendEncodingParameters,
          recvEncodingParameters: null
        };
      });
      if (this.usingBundle) {
        sdp += 'a=group:BUNDLE ' + transceivers.map(function(t) {
          return t.mid;
        }).join(' ') + '\r\n';
      }
      tracks.forEach(function(mline, sdpMLineIndex) {
        var transceiver = transceivers[sdpMLineIndex];
        sdp += SDPUtils.writeMediaSection(transceiver,
            transceiver.localCapabilities, 'offer', self.localStreams[0]);
      });

      this._pendingOffer = transceivers;
      var desc = new RTCSessionDescription({
        type: 'offer',
        sdp: sdp
      });
      if (arguments.length && typeof arguments[0] === 'function') {
        window.setTimeout(arguments[0], 0, desc);
      }
      return Promise.resolve(desc);
    };

    window.RTCPeerConnection.prototype.createAnswer = function() {
      var self = this;

      var sdp = SDPUtils.writeSessionBoilerplate();
      if (this.usingBundle) {
        sdp += 'a=group:BUNDLE ' + this.transceivers.map(function(t) {
          return t.mid;
        }).join(' ') + '\r\n';
      }
      this.transceivers.forEach(function(transceiver) {
        if (transceiver.isDatachannel) {
          sdp += 'm=application 0 DTLS/SCTP 5000\r\n' +
              'c=IN IP4 0.0.0.0\r\n' +
              'a=mid:' + transceiver.mid + '\r\n';
          return;
        }
        // Calculate intersection of capabilities.
        var commonCapabilities = self._getCommonCapabilities(
            transceiver.localCapabilities,
            transceiver.remoteCapabilities);

        sdp += SDPUtils.writeMediaSection(transceiver, commonCapabilities,
            'answer', self.localStreams[0]);
      });

      var desc = new RTCSessionDescription({
        type: 'answer',
        sdp: sdp
      });
      if (arguments.length && typeof arguments[0] === 'function') {
        window.setTimeout(arguments[0], 0, desc);
      }
      return Promise.resolve(desc);
    };

    window.RTCPeerConnection.prototype.addIceCandidate = function(candidate) {
      if (!candidate) {
        this.transceivers.forEach(function(transceiver) {
          transceiver.iceTransport.addRemoteCandidate({});
        });
      } else {
        var mLineIndex = candidate.sdpMLineIndex;
        if (candidate.sdpMid) {
          for (var i = 0; i < this.transceivers.length; i++) {
            if (this.transceivers[i].mid === candidate.sdpMid) {
              mLineIndex = i;
              break;
            }
          }
        }
        var transceiver = this.transceivers[mLineIndex];
        if (transceiver) {
          var cand = Object.keys(candidate.candidate).length > 0 ?
              SDPUtils.parseCandidate(candidate.candidate) : {};
          // Ignore Chrome's invalid candidates since Edge does not like them.
          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {
            return;
          }
          // Ignore RTCP candidates, we assume RTCP-MUX.
          if (cand.component !== '1') {
            return;
          }
          // A dirty hack to make samples work.
          if (cand.type === 'endOfCandidates') {
            cand = {};
          }
          transceiver.iceTransport.addRemoteCandidate(cand);

          // update the remoteDescription.
          var sections = SDPUtils.splitSections(this.remoteDescription.sdp);
          sections[mLineIndex + 1] += (cand.type ? candidate.candidate.trim()
              : 'a=end-of-candidates') + '\r\n';
          this.remoteDescription.sdp = sections.join('');
        }
      }
      if (arguments.length > 1 && typeof arguments[1] === 'function') {
        window.setTimeout(arguments[1], 0);
      }
      return Promise.resolve();
    };

    window.RTCPeerConnection.prototype.getStats = function() {
      var promises = [];
      this.transceivers.forEach(function(transceiver) {
        ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',
            'dtlsTransport'].forEach(function(method) {
              if (transceiver[method]) {
                promises.push(transceiver[method].getStats());
              }
            });
      });
      var cb = arguments.length > 1 && typeof arguments[1] === 'function' &&
          arguments[1];
      return new Promise(function(resolve) {
        // shim getStats with maplike support
        var results = new Map();
        Promise.all(promises).then(function(res) {
          res.forEach(function(result) {
            Object.keys(result).forEach(function(id) {
              results.set(id, result[id]);
              results[id] = result[id];
            });
          });
          if (cb) {
            window.setTimeout(cb, 0, results);
          }
          resolve(results);
        });
      });
    };
  }
};

// Expose public methods.
module.exports = {
  shimPeerConnection: edgeShim.shimPeerConnection,
  shimGetUserMedia: require('./getusermedia')
};

},{"sdp":"../node_modules/sdp/sdp.js","../utils":"../node_modules/webrtc-adapter/src/js/utils.js","./getusermedia":"../node_modules/webrtc-adapter/src/js/edge/getusermedia.js"}],"../node_modules/webrtc-adapter/src/js/firefox/getusermedia.js":[function(require,module,exports) {
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';

var logging = require('../utils').log;
var browserDetails = require('../utils').browserDetails;

// Expose public methods.
module.exports = function() {
  var shimError_ = function(e) {
    return {
      name: {
        SecurityError: 'NotAllowedError',
        PermissionDeniedError: 'NotAllowedError'
      }[e.name] || e.name,
      message: {
        'The operation is insecure.': 'The request is not allowed by the ' +
        'user agent or the platform in the current context.'
      }[e.message] || e.message,
      constraint: e.constraint,
      toString: function() {
        return this.name + (this.message && ': ') + this.message;
      }
    };
  };

  // getUserMedia constraints shim.
  var getUserMedia_ = function(constraints, onSuccess, onError) {
    var constraintsToFF37_ = function(c) {
      if (typeof c !== 'object' || c.require) {
        return c;
      }
      var require = [];
      Object.keys(c).forEach(function(key) {
        if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
          return;
        }
        var r = c[key] = (typeof c[key] === 'object') ?
            c[key] : {ideal: c[key]};
        if (r.min !== undefined ||
            r.max !== undefined || r.exact !== undefined) {
          require.push(key);
        }
        if (r.exact !== undefined) {
          if (typeof r.exact === 'number') {
            r. min = r.max = r.exact;
          } else {
            c[key] = r.exact;
          }
          delete r.exact;
        }
        if (r.ideal !== undefined) {
          c.advanced = c.advanced || [];
          var oc = {};
          if (typeof r.ideal === 'number') {
            oc[key] = {min: r.ideal, max: r.ideal};
          } else {
            oc[key] = r.ideal;
          }
          c.advanced.push(oc);
          delete r.ideal;
          if (!Object.keys(r).length) {
            delete c[key];
          }
        }
      });
      if (require.length) {
        c.require = require;
      }
      return c;
    };
    constraints = JSON.parse(JSON.stringify(constraints));
    if (browserDetails.version < 38) {
      logging('spec: ' + JSON.stringify(constraints));
      if (constraints.audio) {
        constraints.audio = constraintsToFF37_(constraints.audio);
      }
      if (constraints.video) {
        constraints.video = constraintsToFF37_(constraints.video);
      }
      logging('ff37: ' + JSON.stringify(constraints));
    }
    return navigator.mozGetUserMedia(constraints, onSuccess, function(e) {
      onError(shimError_(e));
    });
  };

  // Returns the result of getUserMedia as a Promise.
  var getUserMediaPromise_ = function(constraints) {
    return new Promise(function(resolve, reject) {
      getUserMedia_(constraints, resolve, reject);
    });
  };

  // Shim for mediaDevices on older versions.
  if (!navigator.mediaDevices) {
    navigator.mediaDevices = {getUserMedia: getUserMediaPromise_,
      addEventListener: function() { },
      removeEventListener: function() { }
    };
  }
  navigator.mediaDevices.enumerateDevices =
      navigator.mediaDevices.enumerateDevices || function() {
        return new Promise(function(resolve) {
          var infos = [
            {kind: 'audioinput', deviceId: 'default', label: '', groupId: ''},
            {kind: 'videoinput', deviceId: 'default', label: '', groupId: ''}
          ];
          resolve(infos);
        });
      };

  if (browserDetails.version < 41) {
    // Work around http://bugzil.la/1169665
    var orgEnumerateDevices =
        navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);
    navigator.mediaDevices.enumerateDevices = function() {
      return orgEnumerateDevices().then(undefined, function(e) {
        if (e.name === 'NotFoundError') {
          return [];
        }
        throw e;
      });
    };
  }
  if (browserDetails.version < 49) {
    var origGetUserMedia = navigator.mediaDevices.getUserMedia.
        bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function(c) {
      return origGetUserMedia(c).then(function(stream) {
        // Work around https://bugzil.la/802326
        if (c.audio && !stream.getAudioTracks().length ||
            c.video && !stream.getVideoTracks().length) {
          stream.getTracks().forEach(function(track) {
            track.stop();
          });
          throw new DOMException('The object can not be found here.',
                                 'NotFoundError');
        }
        return stream;
      }, function(e) {
        return Promise.reject(shimError_(e));
      });
    };
  }
  navigator.getUserMedia = function(constraints, onSuccess, onError) {
    if (browserDetails.version < 44) {
      return getUserMedia_(constraints, onSuccess, onError);
    }
    // Replace Firefox 44+'s deprecation warning with unprefixed version.
    console.warn('navigator.getUserMedia has been replaced by ' +
                 'navigator.mediaDevices.getUserMedia');
    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
  };
};

},{"../utils":"../node_modules/webrtc-adapter/src/js/utils.js"}],"../node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js":[function(require,module,exports) {
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';

var browserDetails = require('../utils').browserDetails;

var firefoxShim = {
  shimOnTrack: function() {
    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in
        window.RTCPeerConnection.prototype)) {
      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
        get: function() {
          return this._ontrack;
        },
        set: function(f) {
          if (this._ontrack) {
            this.removeEventListener('track', this._ontrack);
            this.removeEventListener('addstream', this._ontrackpoly);
          }
          this.addEventListener('track', this._ontrack = f);
          this.addEventListener('addstream', this._ontrackpoly = function(e) {
            e.stream.getTracks().forEach(function(track) {
              var event = new Event('track');
              event.track = track;
              event.receiver = {track: track};
              event.streams = [e.stream];
              this.dispatchEvent(event);
            }.bind(this));
          }.bind(this));
        }
      });
    }
  },

  shimSourceObject: function() {
    // Firefox has supported mozSrcObject since FF22, unprefixed in 42.
    if (typeof window === 'object') {
      if (window.HTMLMediaElement &&
        !('srcObject' in window.HTMLMediaElement.prototype)) {
        // Shim the srcObject property, once, when HTMLMediaElement is found.
        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {
          get: function() {
            return this.mozSrcObject;
          },
          set: function(stream) {
            this.mozSrcObject = stream;
          }
        });
      }
    }
  },

  shimPeerConnection: function() {
    if (typeof window !== 'object' || !(window.RTCPeerConnection ||
        window.mozRTCPeerConnection)) {
      return; // probably media.peerconnection.enabled=false in about:config
    }
    // The RTCPeerConnection object.
    if (!window.RTCPeerConnection) {
      window.RTCPeerConnection = function(pcConfig, pcConstraints) {
        if (browserDetails.version < 38) {
          // .urls is not supported in FF < 38.
          // create RTCIceServers with a single url.
          if (pcConfig && pcConfig.iceServers) {
            var newIceServers = [];
            for (var i = 0; i < pcConfig.iceServers.length; i++) {
              var server = pcConfig.iceServers[i];
              if (server.hasOwnProperty('urls')) {
                for (var j = 0; j < server.urls.length; j++) {
                  var newServer = {
                    url: server.urls[j]
                  };
                  if (server.urls[j].indexOf('turn') === 0) {
                    newServer.username = server.username;
                    newServer.credential = server.credential;
                  }
                  newIceServers.push(newServer);
                }
              } else {
                newIceServers.push(pcConfig.iceServers[i]);
              }
            }
            pcConfig.iceServers = newIceServers;
          }
        }
        return new mozRTCPeerConnection(pcConfig, pcConstraints);
      };
      window.RTCPeerConnection.prototype = mozRTCPeerConnection.prototype;

      // wrap static methods. Currently just generateCertificate.
      if (mozRTCPeerConnection.generateCertificate) {
        Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
          get: function() {
            return mozRTCPeerConnection.generateCertificate;
          }
        });
      }

      window.RTCSessionDescription = mozRTCSessionDescription;
      window.RTCIceCandidate = mozRTCIceCandidate;
    }

    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
        .forEach(function(method) {
          var nativeMethod = RTCPeerConnection.prototype[method];
          RTCPeerConnection.prototype[method] = function() {
            arguments[0] = new ((method === 'addIceCandidate') ?
                RTCIceCandidate : RTCSessionDescription)(arguments[0]);
            return nativeMethod.apply(this, arguments);
          };
        });

    // support for addIceCandidate(null or undefined)
    var nativeAddIceCandidate =
        RTCPeerConnection.prototype.addIceCandidate;
    RTCPeerConnection.prototype.addIceCandidate = function() {
      if (!arguments[0]) {
        if (arguments[1]) {
          arguments[1].apply(null);
        }
        return Promise.resolve();
      }
      return nativeAddIceCandidate.apply(this, arguments);
    };

    if (browserDetails.version < 48) {
      // shim getStats with maplike support
      var makeMapStats = function(stats) {
        var map = new Map();
        Object.keys(stats).forEach(function(key) {
          map.set(key, stats[key]);
          map[key] = stats[key];
        });
        return map;
      };

      var nativeGetStats = RTCPeerConnection.prototype.getStats;
      RTCPeerConnection.prototype.getStats = function(selector, onSucc, onErr) {
        return nativeGetStats.apply(this, [selector || null])
          .then(function(stats) {
            return makeMapStats(stats);
          })
          .then(onSucc, onErr);
      };
    }
  }
};

// Expose public methods.
module.exports = {
  shimOnTrack: firefoxShim.shimOnTrack,
  shimSourceObject: firefoxShim.shimSourceObject,
  shimPeerConnection: firefoxShim.shimPeerConnection,
  shimGetUserMedia: require('./getusermedia')
};

},{"../utils":"../node_modules/webrtc-adapter/src/js/utils.js","./getusermedia":"../node_modules/webrtc-adapter/src/js/firefox/getusermedia.js"}],"../node_modules/webrtc-adapter/src/js/safari/safari_shim.js":[function(require,module,exports) {
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
'use strict';
var safariShim = {
  // TODO: DrAlex, should be here, double check against LayoutTests
  // shimOnTrack: function() { },

  // TODO: once the back-end for the mac port is done, add.
  // TODO: check for webkitGTK+
  // shimPeerConnection: function() { },

  shimGetUserMedia: function() {
    navigator.getUserMedia = navigator.webkitGetUserMedia;
  }
};

// Expose public methods.
module.exports = {
  shimGetUserMedia: safariShim.shimGetUserMedia
  // TODO
  // shimOnTrack: safariShim.shimOnTrack,
  // shimPeerConnection: safariShim.shimPeerConnection
};

},{}],"../node_modules/webrtc-adapter/src/js/adapter_core.js":[function(require,module,exports) {
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */

'use strict';

// Shimming starts here.
(function() {
  // Utils.
  var logging = require('./utils').log;
  var browserDetails = require('./utils').browserDetails;
  // Export to the adapter global object visible in the browser.
  module.exports.browserDetails = browserDetails;
  module.exports.extractVersion = require('./utils').extractVersion;
  module.exports.disableLog = require('./utils').disableLog;

  // Uncomment the line below if you want logging to occur, including logging
  // for the switch statement below. Can also be turned on in the browser via
  // adapter.disableLog(false), but then logging from the switch statement below
  // will not appear.
  // require('./utils').disableLog(false);

  // Browser shims.
  var chromeShim = require('./chrome/chrome_shim') || null;
  var edgeShim = require('./edge/edge_shim') || null;
  var firefoxShim = require('./firefox/firefox_shim') || null;
  var safariShim = require('./safari/safari_shim') || null;

  // Shim browser if found.
  switch (browserDetails.browser) {
    case 'opera': // fallthrough as it uses chrome shims
    case 'chrome':
      if (!chromeShim || !chromeShim.shimPeerConnection) {
        logging('Chrome shim is not included in this adapter release.');
        return;
      }
      logging('adapter.js shimming chrome.');
      // Export to the adapter global object visible in the browser.
      module.exports.browserShim = chromeShim;

      chromeShim.shimGetUserMedia();
      chromeShim.shimMediaStream();
      chromeShim.shimSourceObject();
      chromeShim.shimPeerConnection();
      chromeShim.shimOnTrack();
      break;
    case 'firefox':
      if (!firefoxShim || !firefoxShim.shimPeerConnection) {
        logging('Firefox shim is not included in this adapter release.');
        return;
      }
      logging('adapter.js shimming firefox.');
      // Export to the adapter global object visible in the browser.
      module.exports.browserShim = firefoxShim;

      firefoxShim.shimGetUserMedia();
      firefoxShim.shimSourceObject();
      firefoxShim.shimPeerConnection();
      firefoxShim.shimOnTrack();
      break;
    case 'edge':
      if (!edgeShim || !edgeShim.shimPeerConnection) {
        logging('MS edge shim is not included in this adapter release.');
        return;
      }
      logging('adapter.js shimming edge.');
      // Export to the adapter global object visible in the browser.
      module.exports.browserShim = edgeShim;

      edgeShim.shimGetUserMedia();
      edgeShim.shimPeerConnection();
      break;
    case 'safari':
      if (!safariShim) {
        logging('Safari shim is not included in this adapter release.');
        return;
      }
      logging('adapter.js shimming safari.');
      // Export to the adapter global object visible in the browser.
      module.exports.browserShim = safariShim;

      safariShim.shimGetUserMedia();
      break;
    default:
      logging('Unsupported browser!');
  }
})();

},{"./utils":"../node_modules/webrtc-adapter/src/js/utils.js","./chrome/chrome_shim":"../node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","./edge/edge_shim":"../node_modules/webrtc-adapter/src/js/edge/edge_shim.js","./firefox/firefox_shim":"../node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","./safari/safari_shim":"../node_modules/webrtc-adapter/src/js/safari/safari_shim.js"}],"../node_modules/getusermedia/getusermedia.js":[function(require,module,exports) {
// getUserMedia helper by @HenrikJoreteg used for navigator.getUserMedia shim
var adapter = require('webrtc-adapter');

module.exports = function (constraints, cb) {
    var error;
    var haveOpts = arguments.length === 2;
    var defaultOpts = {video: true, audio: true};

    var denied = 'PermissionDeniedError';
    var altDenied = 'PERMISSION_DENIED';
    var notSatisfied = 'ConstraintNotSatisfiedError';

    // make constraints optional
    if (!haveOpts) {
        cb = constraints;
        constraints = defaultOpts;
    }

    // treat lack of browser support like an error
    if (typeof navigator === 'undefined' || !navigator.getUserMedia) {
        // throw proper error per spec
        error = new Error('MediaStreamError');
        error.name = 'NotSupportedError';

        // keep all callbacks async
        return setTimeout(function () {
            cb(error);
        }, 0);
    }

    // normalize error handling when no media types are requested
    if (!constraints.audio && !constraints.video) {
        error = new Error('MediaStreamError');
        error.name = 'NoMediaRequestedError';

        // keep all callbacks async
        return setTimeout(function () {
            cb(error);
        }, 0);
    }

    navigator.mediaDevices.getUserMedia(constraints)
    .then(function (stream) {
        cb(null, stream);
    }).catch(function (err) {
        var error;
        // coerce into an error object since FF gives us a string
        // there are only two valid names according to the spec
        // we coerce all non-denied to "constraint not satisfied".
        if (typeof err === 'string') {
            error = new Error('MediaStreamError');
            if (err === denied || err === altDenied) {
                error.name = denied;
            } else {
                error.name = notSatisfied;
            }
        } else {
            // if we get an error object make sure '.name' property is set
            // according to spec: http://dev.w3.org/2011/webrtc/editor/getusermedia.html#navigatorusermediaerror-and-navigatorusermediaerrorcallback
            error = err;
            if (!error.name) {
                // this is likely chrome which
                // sets a property called "ERROR_DENIED" on the error object
                // if so we make sure to set a name
                if (error[denied]) {
                    err.name = denied;
                } else {
                    err.name = notSatisfied;
                }
            }
        }

        cb(error);
    });
};

},{"webrtc-adapter":"../node_modules/webrtc-adapter/src/js/adapter_core.js"}],"v2.ts":[function(require,module,exports) {
"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
/*
  tags: basic

 <p> This example shows how to use copyTexImage2D to implement feedback effects </p>
 */

var regl_1 = __importDefault(require("regl"));

var gpu_js_1 = __importDefault(require("gpu.js")); // console.log(GPU);


var gpu = new gpu_js_1.default();
window.vScale = 1.0;
var regl = regl_1.default({
  extensions: ['webgl_draw_buffers', 'oes_texture_float', 'oes_texture_float_linear']
}); // const regl = require('regl')({extensions:["OES_texture_float"]})

var _mouse = require('mouse-change')();

var subsamp = 4096 * 2;
var fund = 261.625565;
var mc = fund * 2.0;
window.mul = 1.0;
var gSize = 128; //128*4 ;

var mpp = 1.0; //0.5;

function simF(mp) {
  return mc * gSize / mp;
}

window.fastMode = false;
window.simF = simF;
var samN = 0;
var stepsT = 0;
var stepsQ = 0;
var lastSTm = new Date().getTime();
var lastFm = new Date().getTime();
var vuu = [];

for (var i = 0; i < gSize; i++) {
  vuu[i] = [];

  for (var j = 0; j < gSize; j++) {
    vuu[i][j] = [0.0, 0.0];
  }
}

var kernel = gpu.createKernel(function (array) {
  var first = array[0],
      second = array[1];
  return first + second;
}, {
  output: [2],
  argumentTypes: {
    array: 'Array(2)'
  }
});
console.log("K", kernel([1, 2]));
var iterateBounce = gpu.createKernel(function (a, v) {
  var sum = 0.5;
  var sumv = 0.5 + v;
  var me = a[this.thread.x][this.thread.y][0] + a[this.thread.x][this.thread.y][0];
  sum += me;

  if (this.thread.x < 64.5) {
    if (this.thread.x > 62.5) {
      if (this.thread.y < 64.5) {
        if (this.thread.y > 62.5) {
          sum = sumv;
        }
      }
    }
  }

  return [sum - 0.5, a[this.thread.x][this.thread.y][1]];
}, {
  argumentTypes: {
    a: 'Array3D(2)',
    v: 'Float'
  }
}).setOutput([2, gSize, gSize]); // const iteratePull = gpu.createKernel(function(a: number[][][]) {
//   let sum:number = 0.5;
//   if(this.thread.z==1){
//     sum+=a[this.thread.x][this.thread.y][1];
//     sum+=-a[this.thread.x][this.thread.y][0];
//     sum+=a[this.thread.x+1][this.thread.y][0]/4.0;
//     sum+=a[this.thread.x-1][this.thread.y][0]/4.0;
//     sum+=a[this.thread.x][this.thread.y+1][0]/4.0;
//     sum+=a[this.thread.x][this.thread.y-1][0]/4.0;
//   }else{
//     sum+=a[this.thread.x][this.thread.y][0];
//   }
//   return sum-0.5;
// }).setOutput([2,gSize,gSize]).setOutputToTexture(true);

window.iterateBounce = iterateBounce; // window.iteratePull=iteratePull;

require('getusermedia')({
  audio: true
}, function (err, stream) {
  window.vol = [0.0];

  if (err) {
    return;
  } // Next we create an analyser node to intercept data from the mic


  var context = new AudioContext(); //const analyser = context.createAnalyser()
  // And then we connect them together

  var source = context.createMediaStreamSource(stream); //source.connect(analyser)

  var demoCode = function demoCode(context) {
    context.audioWorklet.addModule('./bypass-processor.js').then(function () {
      // const oscillator = new OscillatorNode(context);
      var bypasser = new AudioWorkletNode(context, 'bypass-processor');
      source.connect(bypasser).connect(context.destination); // oscillator.start();
    });
  }; //context.audioWorklet.addModule('bypass-processor.js');
  // demoCode(context);
  // registerProcessor('bypass-processor', BypassProcessor);


  var captureNode = context.createScriptProcessor(subsamp, 1, 1);
  console.log(context.sampleRate);

  captureNode.onaudioprocess = function (e) {
    // console.log("HI")
    var vu = e.inputBuffer.getChannelData(0);
    var ave = vu.map(Math.abs).reduce(function (a, b) {
      return a + b;
    }, 0) / vu.length;
    window.vScale = window.vScale * 0.1 + 1 / Math.max(ave, 0.01) * 0.9;
    var nv = [];

    for (var i = 0; i < vu.length; i++) {
      nv[i] = true ? vu[i] * window.vScale : Math.sin(Math.PI * 2 * samN / context.sampleRate * fund * window.mul) * 0.5; //Math.abs(vu[i])<0.0?0:vu[i];

      samN += 1;
    }

    if (stepsT * context.sampleRate < window.vol.length && window.fastMode) {
      window.vol = window.vol.concat(nv); //vol.concat(vu);
    } else {
      if (window.fastMode) {
        stepsT = stepsT - window.vol.length / context.sampleRate;
        window.vol = nv;
      } else {
        stepsT = ((stepsT - vu.length / context.sampleRate) % (1 / mc) + 1 / mc) % (1 / mc);
        window.vol = nv; //vol.concat(vu);//ave*1024;//(ave>0?vu.reduce((a,b)=>Math.max(a,b),0):vu.reduce((a,b)=>Math.min(a,b),0))/2+ave/2;///vu.length*128.0;
      }
    } //console.log(vu)
    // rawLeftChannelData is now a typed array with floating point samples

  };

  console.log(source);
  source.connect(captureNode).connect(context.destination);

  var getVol = function getVol() {
    var rn = new Date().getTime() / 1000 * context.sampleRate;
    return window.vol[Math.floor(rn % subsamp)];
  };

  function getVolS() {
    var rn = stepsT * context.sampleRate;
    var ler = rn % 1;
    return (window.vol[Math.floor(rn % subsamp)] || 0) * (1 - ler) + (window.vol[Math.floor((rn + 1) % subsamp)] || 0) * ler;
  } // source.start();
  // Here we preallocate buffers for streaming audio data
  // const fftSize = analyser.frequencyBinCount
  // const frequencies = new Uint8Array(fftSize)
  // const fftBuffer = regl.buffer({
  //   length: fftSize,
  //   type: 'uint8',
  //   usage: 'dynamic'
  // })
  // const pixels = regl.texture({wrapS:"clamp",wrapT:"clamp",type:"float",width:100,height:100});


  var fbo = regl.framebuffer({
    color: regl.texture({
      type: 'float',
      width: gSize,
      height: gSize,
      mag: 'linear'
    }),
    depthStencil: false
  });
  var fbo2 = regl.framebuffer({
    color: regl.texture({
      type: 'float',
      width: gSize,
      height: gSize,
      mag: 'linear'
    }),
    depthStencil: false
  });
  var fboB = regl.framebuffer({
    color: regl.texture({
      type: 'float',
      width: gSize,
      height: gSize,
      mag: 'linear'
    }),
    depthStencil: false
  });
  var fboB2 = regl.framebuffer({
    color: regl.texture({
      type: 'float',
      width: gSize,
      height: gSize,
      mag: 'linear'
    }),
    depthStencil: false
  });
  var fboC = regl.framebuffer({
    color: regl.texture({
      type: 'float',
      width: gSize,
      height: gSize,
      mag: 'linear'
    }),
    depthStencil: false
  });
  var fboC2 = regl.framebuffer({
    color: regl.texture({
      type: 'float',
      width: gSize,
      height: gSize,
      mag: 'linear'
    }),
    depthStencil: false
  }); // function doubleFbo(filter) {
  // 	let fbos = [createFbo(filter), createFbo(filter)];
  // 	return {
  // 		get read() {
  // 			return fbos[0];
  // 		},
  // 		get write() {
  // 			return fbos[1];
  // 		},
  // 		swap() {
  // 			fbos.reverse();
  // 		}
  // 	};
  // }
  // function createFbo(filter) {
  // 	let tex = regl.texture({
  // 		width: window.innerWidth >> config.TEXTURE_DOWNSAMPLE,
  // 		height: window.innerHeight >> config.TEXTURE_DOWNSAMPLE,
  // 		min: filter,
  // 		mag: filter,
  // 		type: "half float"
  // 	});
  // 	window.addEventListener("resize", () => {
  // 		tex.resize(
  // 			window.innerWidth >> config.TEXTURE_DOWNSAMPLE,
  // 			window.innerHeight >> config.TEXTURE_DOWNSAMPLE
  // 		);
  // 	});
  // 	return regl.framebuffer({
  // 		color: tex,
  // 		depthStencil: false
  // 	});
  // }

  var fr = "\nprecision mediump float;\nuniform sampler2D texture;\nuniform vec2 mouse;\nuniform vec2 res;\nuniform float t;\nuniform float vol;\nvarying vec2 uv;\nuniform float mp;\nvoid main () {\n    //float mp=0.5;///2.0;\n    \n    vec2 cVa=texture2D(texture,uv).xy;\n    vec2 cVa0=texture2D(texture,uv).xy;\n    float sX=cVa.x+0.0;\n    float gn=texture2D(texture,uv).z;\n    cVa.y=cVa.y*2.0-1.0;\n    cVa0.y=cVa0.y*2.0-1.0;\n    \n    float q=0.0;\n    float qC=0.0;\n    int i=1;\n   // for(int i=1;i<2;i++){\n      float s=float(i);\n      float c=1.0/(s);\n    vec2 up=uv+vec2(0.0,-1.0)/res.xy*s;\n    vec2 left=uv+vec2(-1.0,0.0)/res.xy*s;\n    vec2 right=uv+vec2(1.0,0.0)/res.xy*s;\n    vec2 down=uv+vec2(0.0,1.0)/res.xy*s;\n    \n    vec2 uVa=texture2D(texture,up).xy;\n    uVa.y=uVa.y*2.0-1.0;\n    vec2 lVa=texture2D(texture,left).xy;\n    lVa.y=lVa.y*2.0-1.0;\n    vec2 rVa=texture2D(texture,right).xy;\n    rVa.y=rVa.y*2.0-1.0;\n    vec2 dVa=texture2D(texture,down).xy;\n    dVa.y=dVa.y*2.0-1.0;\n    q+=(dVa.x)*c;\n    q+=(uVa.x)*c;\n    q+=(lVa.x)*c;\n    q+=(rVa.x)*c;\n    qC+=c*4.0;\n    //}\n    float pos=cVa.x-0.5;\n    \n    float accel=(q/qC-cVa.x)*mp*mp;\n    float vel=(cVa.y+0.0)+accel/2.0;\n    cVa.y+=accel;\n    \n    //cVa.y+=accel/2.0;\n    //cVa.x+=cVa.y*mp;\n    //uVa.x+=uVa.y*mp;\n    //lVa.x+=lVa.y*mp;\n    //rVa.x+=rVa.y*mp;\n    //dVa.x+=dVa.y*mp;\n    \n    float gnt=0.0;\n   \n    if(t<20.0){\n        cVa=vec2(0.5,0.0);\n        pos=0.0;\n        //gn=0.0;\n    }\n    gnt=gn;//1.0;//abs(abs(rVa.x-0.5)+abs(lVa.x-0.5)+abs(uVa.x-0.5)+abs(dVa.x-0.5)-abs((rVa.x-0.5)+(lVa.x-0.5)+(uVa.x-0.5)+(dVa.x-0.5))*2.0)+abs(cVa.x-0.5);\n    float apRat=pow(abs(-accel/mp/mp/pos),0.5);\n    gnt=pow(pow(pos,2.0)+pow(vel/mp/mp,2.0)/abs(-accel/mp/mp/pos),0.5);\n   \n    \n    //cVa.y=(vec2(0.5,0.0)*0.001+cVa*0.999).y;\n    float j=1.0-length(floor(abs(uv-vec2(0.5))*res.xy))*100.0;//pow(2.0,-pow(length(abs(uv-vec2(0.5))*res.xy)/10.0,2.0));\n    //j=1.0-length(floor(abs(uv-vec2(0.0,1.0))*res.xy));//pow(2.0,-pow(length(abs(uv-vec2(0.5))*res.xy)/10.0,2.0));\n    cVa.x+=cVa.y;\n    if( j>0.0 ){\n    j=1.0;\n    // cVa.y+=vol/2.0+0.5-cVa.x;\n      cVa.x=cVa.x*(1.0-j)+vec2(vol/2.0+0.5,0.0).x*j;//cos(t*0.1*2.0*atan(0.0,-1.0))/4.0+0.5;\n      //cVa.y=0.0;//-2.0*atan(0.0,-1.0)*0.01*sin(t*0.01*2.0*atan(0.0,-1.0))/2.0+0.5;\n    }\n    \n    if(t<20.0){\n      gn=abs(pos)*8.0;\n    }\n    if(gnt<1.0){//} && (abs(vel+pos)<=abs(pos) && abs(vel+pos-accel/2.0)>=abs(pos))){\n    \n      gnt=(abs(pos)*2.0+gnt)/2.0;//(abs(pos)+abs(uVa.x-0.5)+abs(lVa.x-0.5)+abs(dVa.x-0.5)+abs(rVa.x-0.5))/5.0;//gnt*8.0;//abs(pos);\n      float le=max(0.001,0.0);//max(min((1.0-pow(0.5,1.0*apRat/100.0)),0.01),0.00001);//min(abs(vel*2.0+pos-0.5)/abs(pos-0.5)*0.001+0.00001,1.0);\n      gnt=gnt;\n      gn=abs(gnt*le+gn*(1.0-le));\n    }\n    if(length(floor(abs(uv-vec2(0.0,0.0))*res.xy))<1.0){\n      //gn=0.05;\n    }\n    \n    if(t<20.0){\n      gn=0.0;\n    }\n    if(pos*vel>0.0){\n    cVa=(vec2(0.5,0.0)*0.001+cVa*0.999);\n    }\n  gl_FragColor = vec4(vec3(cVa.x,cVa.y*0.5+0.5,gn),1.0);\n}";
  var vr = "\n\n  precision mediump float;\n  attribute vec2 position;\n  varying vec2 uv;\n  void main () {\n    uv = position/2.0+vec2(0.5,0.5);\n    gl_Position = vec4(position, 0, 1);\n  }\n  ";
  var drawFeedback = [regl({
    frag: fr,
    vert: vr,
    attributes: {
      position: [-1, -1, 3, -1, -1, 3]
    },
    framebuffer: fbo,
    uniforms: {
      texture: fbo2,
      mouse: function mouse(_a) {
        var pixelRatio = _a.pixelRatio,
            viewportHeight = _a.viewportHeight,
            viewportWidth = _a.viewportWidth;
        return [_mouse.x * pixelRatio, viewportHeight - _mouse.y * pixelRatio];
      },
      res: function res(_a) {
        var viewportHeight = _a.viewportHeight,
            viewportWidth = _a.viewportWidth;
        return [gSize, gSize // viewportWidth,
        // viewportHeight
        ];
      },
      t: function t(_a) {
        var tick = _a.tick;
        return tick;
      },
      vol: function vol() {
        return getVolS();
      },
      mp: function mp() {
        return mpp;
      }
    },
    count: 3
  }), regl({
    frag: fr,
    vert: vr,
    attributes: {
      position: [-1, -1, 3, -1, -1, 3]
    },
    framebuffer: fbo2,
    uniforms: {
      texture: fbo,
      mouse: function mouse(_a) {
        var pixelRatio = _a.pixelRatio,
            viewportHeight = _a.viewportHeight,
            viewportWidth = _a.viewportWidth;
        return [_mouse.x * pixelRatio, viewportHeight - _mouse.y * pixelRatio];
      },
      res: function res(_a) {
        var viewportHeight = _a.viewportHeight,
            viewportWidth = _a.viewportWidth;
        return [gSize, gSize // viewportWidth,
        // viewportHeight
        ];
      },
      t: function t(_a) {
        var tick = _a.tick;
        return tick;
      },
      vol: function vol() {
        return getVolS();
      },
      mp: function mp() {
        return mpp;
      }
    },
    count: 3
  })];
  var drawFeedbackB = [regl({
    frag: fr,
    vert: vr,
    attributes: {
      position: [-1, -1, 3, -1, -1, 3]
    },
    framebuffer: fboB,
    uniforms: {
      texture: fboB2,
      mouse: function mouse(_a) {
        var pixelRatio = _a.pixelRatio,
            viewportHeight = _a.viewportHeight,
            viewportWidth = _a.viewportWidth;
        return [_mouse.x * pixelRatio, viewportHeight - _mouse.y * pixelRatio];
      },
      res: function res(_a) {
        var viewportHeight = _a.viewportHeight,
            viewportWidth = _a.viewportWidth;
        return [gSize, gSize // viewportWidth,
        // viewportHeight
        ];
      },
      t: function t(_a) {
        var tick = _a.tick;
        return tick;
      },
      vol: function vol() {
        return getVolS();
      },
      mp: function mp() {
        return mpp / 2;
      }
    },
    count: 3
  }), regl({
    frag: fr,
    vert: vr,
    attributes: {
      position: [-1, -1, 3, -1, -1, 3]
    },
    framebuffer: fboB2,
    uniforms: {
      texture: fboB,
      mouse: function mouse(_a) {
        var pixelRatio = _a.pixelRatio,
            viewportHeight = _a.viewportHeight,
            viewportWidth = _a.viewportWidth;
        return [_mouse.x * pixelRatio, viewportHeight - _mouse.y * pixelRatio];
      },
      res: function res(_a) {
        var viewportHeight = _a.viewportHeight,
            viewportWidth = _a.viewportWidth;
        return [gSize, gSize // viewportWidth,
        // viewportHeight
        ];
      },
      t: function t(_a) {
        var tick = _a.tick;
        return tick;
      },
      vol: function vol() {
        return getVolS();
      },
      mp: function mp() {
        return mpp / 2;
      }
    },
    count: 3
  })];
  var drawFeedbackC = [regl({
    frag: fr,
    vert: vr,
    attributes: {
      position: [-1, -1, 3, -1, -1, 3]
    },
    framebuffer: fboC,
    uniforms: {
      texture: fboC2,
      mouse: function mouse(_a) {
        var pixelRatio = _a.pixelRatio,
            viewportHeight = _a.viewportHeight,
            viewportWidth = _a.viewportWidth;
        return [_mouse.x * pixelRatio, viewportHeight - _mouse.y * pixelRatio];
      },
      res: function res(_a) {
        var viewportHeight = _a.viewportHeight,
            viewportWidth = _a.viewportWidth;
        return [gSize, gSize // viewportWidth,
        // viewportHeight
        ];
      },
      t: function t(_a) {
        var tick = _a.tick;
        return tick;
      },
      vol: function vol() {
        return getVolS();
      },
      mp: function mp() {
        return mpp / 4;
      }
    },
    count: 3
  }), regl({
    frag: fr,
    vert: vr,
    attributes: {
      position: [-1, -1, 3, -1, -1, 3]
    },
    framebuffer: fboC2,
    uniforms: {
      texture: fboC,
      mouse: function mouse(_a) {
        var pixelRatio = _a.pixelRatio,
            viewportHeight = _a.viewportHeight,
            viewportWidth = _a.viewportWidth;
        return [_mouse.x * pixelRatio, viewportHeight - _mouse.y * pixelRatio];
      },
      res: function res(_a) {
        var viewportHeight = _a.viewportHeight,
            viewportWidth = _a.viewportWidth;
        return [gSize, gSize // viewportWidth,
        // viewportHeight
        ];
      },
      t: function t(_a) {
        var tick = _a.tick;
        return tick;
      },
      vol: function vol() {
        return getVolS();
      },
      mp: function mp() {
        return mpp / 4;
      }
    },
    count: 3
  })];
  var drawNi = regl({
    frag: "\n    precision mediump float;\n    uniform sampler2D texture;\n    uniform sampler2D textureB;\n    uniform sampler2D textureC;\n    uniform vec2 mouse;\n    uniform vec2 res;\n    uniform vec2 resp;\n    uniform float t;\n    varying vec2 uv;\n    float hue2rgb(float f1, float f2, float hue) {\n      if (hue < 0.0)\n          hue += 1.0;\n      else if (hue > 1.0)\n          hue -= 1.0;\n      float res;\n      if ((6.0 * hue) < 1.0)\n          res = f1 + (f2 - f1) * 6.0 * hue;\n      else if ((2.0 * hue) < 1.0)\n          res = f2;\n      else if ((3.0 * hue) < 2.0)\n          res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\n      else\n          res = f1;\n      return res;\n  }\n  \n  vec3 hsl2rgb(vec3 hsl) {\n      vec3 rgb;\n      \n      if (hsl.y == 0.0) {\n          rgb = vec3(hsl.z); // Luminance\n      } else {\n          float f2;\n          \n          if (hsl.z < 0.5)\n              f2 = hsl.z * (1.0 + hsl.y);\n          else\n              f2 = hsl.z + hsl.y - hsl.y * hsl.z;\n              \n          float f1 = 2.0 * hsl.z - f2;\n          \n          rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));\n          rgb.g = hue2rgb(f1, f2, hsl.x);\n          rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));\n      }   \n      return rgb;\n  }\n  \n  vec3 normAt(vec2 p){\n    float mp=1.0;\n        float qb=2.0;\n        vec2 rc=vec2(min(res.x,res.y));\n        vec2 uv2=p;\n        vec2 up=uv2+vec2(0.0,-1.0)/resp.xy*qb;\n        vec2 left=uv2+vec2(-1.0,0.0)/resp.xy*qb;\n        vec2 right=uv2+vec2(1.0,0.0)/resp.xy*qb;\n        vec2 down=uv2+vec2(0.0,1.0)/resp.xy*qb;\n        vec2 cVa=texture2D(texture,uv2).xy;\n        float gn=texture2D(texture,uv2).z;\n        float gnB=texture2D(texture,vec2(0.0,0.0)).z;\n        cVa.y=cVa.y*2.0-1.0;\n        vec2 uVa=texture2D(texture,up).xy;\n        uVa.y=uVa.y*2.0-1.0;\n        vec2 lVa=texture2D(texture,left).xy;\n        lVa.y=lVa.y*2.0-1.0;\n        vec2 rVa=texture2D(texture,right).xy;\n        rVa.y=rVa.y*2.0-1.0;\n        vec2 dVa=texture2D(texture,down).xy;\n        dVa.y=dVa.y*2.0-1.0;\n        vec2 aa=(cVa+uVa+dVa+lVa+rVa)/5.0;\n        \n        //cVa.x+=cVa.y*mp;\n        //uVa.x+=uVa.y*mp;\n        //lVa.x+=lVa.y*mp;\n        //rVa.x+=rVa.y*mp;\n        //dVa.x+=dVa.y*mp;\n        vec3 normal=vec3(0.0,0.0,0.0);\n        float h=100.0;\n       \n        \n        \n        \n        \n        normal+=normalize(vec3(gn-texture2D(texture,right).z,0.0,1.0/h));\n        normal+=normalize(-vec3(gn-texture2D(texture,left).z,0.0,-1.0/h));\n        normal+=normalize(vec3(0.0,gn-texture2D(texture,down).z,1.0/h));\n        normal+=normalize(-vec3(0.0,gn-texture2D(texture,up).z,-1.0/h));\n        normal=normalize(normal);\n        return normal;\n  }\n    void main () {\n        float mp=1.0;\n        float qb=1.0;\n        vec2 rc=vec2(min(res.x,res.y));\n        vec2 uv2=(uv-vec2(0.5,0.5)-vec2(0.5,0.5)/res.xy*0.0)*res.xy/rc.xy+vec2(0.5,0.5);\n        vec2 up=uv2+vec2(0.0,-1.0)/resp.xy*qb;\n        vec2 left=uv2+vec2(-1.0,0.0)/resp.xy*qb;\n        vec2 right=uv2+vec2(1.0,0.0)/resp.xy*qb;\n        vec2 down=uv2+vec2(0.0,1.0)/resp.xy*qb;\n        vec2 cVa=texture2D(texture,uv2).xy;\n        float gn=texture2D(texture,uv2).z;\n        float gnB=texture2D(texture,vec2(0.0,0.0)).z;\n        cVa.y=cVa.y*2.0-1.0;\n        vec2 uVa=texture2D(texture,up).xy;\n        uVa.y=uVa.y*2.0-1.0;\n        vec2 lVa=texture2D(texture,left).xy;\n        lVa.y=lVa.y*2.0-1.0;\n        vec2 rVa=texture2D(texture,right).xy;\n        rVa.y=rVa.y*2.0-1.0;\n        vec2 dVa=texture2D(texture,down).xy;\n        dVa.y=dVa.y*2.0-1.0;\n        vec2 aa=(cVa+uVa+dVa+lVa+rVa)/5.0;\n        \n        //cVa.x+=cVa.y*mp;\n        //uVa.x+=uVa.y*mp;\n        //lVa.x+=lVa.y*mp;\n        //rVa.x+=rVa.y*mp;\n        //dVa.x+=dVa.y*mp;\n        vec3 normal=vec3(0.0);\n        vec3 mep=vec3(uv2,texture2D(texture,uv2).z/gnB);\n        float hb=0.0;\n        float tt=0.0;\n        for(int i=-1;i<=1;i++){\n          for(int j=-1;j<=1;j++){\n            if((i*i>0 || j*j>0 )){\n              \n            vec2 op=uv2+vec2(float(i),float(j))/resp.xy*qb;\n            vec2 op2=uv2+vec2(float(j),-float(i))/resp.xy*qb;\n            float pV=1.0/pow(length(op),2.0);\n            tt+=pV;\n            if(texture2D(texture,op).z>gn){// && texture2D(texture,uv2-op*2.0).z>gn){\n              hb+=pV;\n            }\n            \n            //hb=hb+texture2D(texture,op).z/gnB;\n              vec3 opp=vec3(op,texture2D(texture,op).z/gnB)-mep;\n              vec3 opp2=vec3(op2,texture2D(texture,op2).z/gnB)-mep;\n              normal+=normalize(cross(opp,opp2));\n            }\n          }\n        }\n        normal=normalize(normal);\n        //normalize(normAt(uv2)+normAt(up)+normAt(left)+normAt(down)+normAt(right));\n        float colA=atan(normal.y,normal.x)/atan(0.0,-1.0)/2.0;\n        if(cVa.y<0.0){\n          //colA+=0.5;\n          colA=mod(colA,1.0);\n        }\n        if(gnB*0.5<gn){\n          normal=-normal;\n        }\n       \n        gn=hb/tt*2.0-1.0;\n        vec3 col=hsl2rgb(vec3(mod(colA,1.0),1.0,min(max(gn,0.0),1.0)));//max(1.0-10.0*pow(pow((cVa.x-0.5)*4.0,2.0)+pow(cVa.y*8.0,2.0),0.5),0.0)));\n      gl_FragColor = vec4(vec3(dot(normal,normalize(vec3(-1.0,2.0,1.0)))*0.5)*col*0.0+col,1.0);\n      gl_FragColor=vec4(vec3(1.0-texture2D(texture,uv2).z/texture2D(texture,vec2(0.0)).z,1.0-texture2D(textureB,uv2).z/texture2D(textureB,vec2(0.0)).z,1.0-texture2D(textureC,uv2).z/texture2D(textureC,vec2(0.0)).z),1.0);\n      gl_FragColor=vec4(vec3(texture2D(texture,uv2).z,texture2D(textureB,uv2).z,texture2D(textureC,uv2).z),1.0);\n     \n      vec2 uvc=(uv2-vec2(0.5,0.5))*2.0;\n      if(max(abs(uvc.x),abs(uvc.y))>1.0){\n        gl_FragColor = vec4(vec3(0.0),1.0);\n      }\n    }",
    vert: "\n    precision mediump float;\n    attribute vec2 position;\n    varying vec2 uv;\n    void main () {\n      uv = position/2.0+vec2(0.5,0.5);\n      gl_Position = vec4(position, 0, 1);\n    }",
    attributes: {
      position: [-1, -1, 3, -1, -1, 3]
    },
    uniforms: {
      texture: fbo,
      textureB: fboB,
      textureC: fboC,
      mouse: function mouse(_a) {
        var pixelRatio = _a.pixelRatio,
            viewportHeight = _a.viewportHeight,
            viewportWidth = _a.viewportWidth;
        return [_mouse.x * pixelRatio, viewportHeight - _mouse.y * pixelRatio];
      },
      res: function res(_a) {
        var viewportHeight = _a.viewportHeight,
            viewportWidth = _a.viewportWidth;
        return [viewportWidth, viewportHeight];
      },
      resp: function resp(_a) {
        var viewportHeight = _a.viewportHeight,
            viewportWidth = _a.viewportWidth;
        return [gSize, gSize];
      },
      t: function t(_a) {
        var tick = _a.tick;
        return tick;
      }
    },
    count: 3
  });
  var flips = 0;
  regl.frame(function () {
    //   regl.clear({
    //     color: [0.5, 0.5, 0.5, 1]
    //   })
    var tm = new Date().getTime(); //*2-lastSTm;
    // while(lastSTm<tm){
    //   lastSTm+=1000/simF(mpp);
    //   stepsQ+=1;
    //   // if(tm-lastSTm>1000){
    //   //  console.log("sps",stepsQ,"need",mc*gSize,context.sampleRate/(mc*gSize))
    //   //   lastSTm=tm;
    //   //   stepsQ=0;
    //   // }
    //   if(stepsT*context.sampleRate<window.vol.length){
    //   drawFeedbackB[flips % 2]();
    //   drawFeedbackC[flips % 2]();
    //   drawFeedback[(flips++) % 2]();
    //   stepsT+=1/simF(mpp);
    //   }
    //   if(new Date().getTime()-tm>1000/60){
    //     break;
    //   }
    // }
    // drawNi();
    // while(new Date().getTime()-tm<1000/60){
    //   lastSTm+=1000/simF(mpp);
    //   stepsQ+=1;
    //   // if(tm-lastSTm>1000){
    //   //  console.log("sps",stepsQ,"need",mc*gSize,context.sampleRate/(mc*gSize))
    //   //   lastSTm=tm;
    //   //   stepsQ=0;
    //   // }
    //   if(stepsT*context.sampleRate<window.vol.length){
    //   drawFeedbackB[flips % 2]();
    //   drawFeedbackC[flips % 2]();
    //   drawFeedback[(flips++) % 2]();
    //   stepsT+=1/simF(mpp);
    //   }
    // }

    for (var i = 0; i < 4096; i++) {
      stepsQ += 1;

      if (stepsT * context.sampleRate < window.vol.length) {
        // var tm=new Date().getTime();
        // if(tm-lastSTm>1000){
        //  console.log("sps2",stepsQ,"need",mc*gSize,context.sampleRate/(mc*gSize))
        //   lastSTm=tm;
        //   stepsQ=0;
        // }
        drawFeedbackB[flips % 2]();
        drawFeedbackC[flips % 2]();
        drawFeedback[flips++ % 2]();
        stepsT += 1 / simF(mpp);
      }

      window.gd = [stepsT * context.sampleRate, window.vol.length];

      if (new Date().getTime() - tm > 1000 / 60) {
        break;
      }
    }

    drawNi();
    var tm = new Date().getTime();

    if (tm - lastFm > 1000) {
      console.log("sps", stepsQ, "need", mc * gSize, context.sampleRate / (mc * gSize));
      lastFm = tm;
      var sr = 0; //Math.log(stepsQ/context.sampleRate)/Math.log(2);

      sr = Math.min(Math.floor(sr), 0);
      var subSuper = Math.floor(context.sampleRate);

      if (stepsQ >= subSuper) {
        mpp = Math.max(mc * gSize / subSuper, 1); //0.125);

        console.log("subSuper", subSuper, "stepsQ", stepsQ);
        window.fastMode = true;

        if (mpp > 1) {
          mpp = 1;
          window.fastMode = false;
        }
      } else {
        mpp = 1;
        window.fastMode = false;
      }

      stepsQ = 0;
    }

    window.mpp = mpp;
    lastSTm = tm; //   pixels({
    //     copy: true
    //   })
  });
});
},{"regl":"../node_modules/regl/dist/regl.js","gpu.js":"../node_modules/gpu.js/dist/gpu-browser.js","mouse-change":"../node_modules/mouse-change/mouse-listen.js","getusermedia":"../node_modules/getusermedia/getusermedia.js"}],"../node_modules/parcel/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "41531" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["../node_modules/parcel/src/builtins/hmr-runtime.js","v2.ts"], null)
//# sourceMappingURL=/v2.5d2767c1.js.map